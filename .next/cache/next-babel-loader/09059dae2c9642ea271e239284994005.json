{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { BaseComponent, hoistMethods, unhoistMethods } from '../../Utilities';\n\nvar BaseDecorator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BaseDecorator, _super);\n\n  function BaseDecorator(props) {\n    var _this = _super.call(this, props) || this; // tslint:disable-next-line:typedef\n\n\n    _this._skipComponentRefResolution = true;\n    _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n    return _this;\n  }\n  /**\n   * Updates the ref to the component composed by the decorator, which will also take care of hoisting\n   * (and unhoisting as appropriate) methods from said component.\n   *\n   * Pass this method as the argument to the 'ref' property of the composed component.\n   */\n\n\n  BaseDecorator.prototype._updateComposedComponentRef = function (composedComponentInstance) {\n    this._composedComponentInstance = composedComponentInstance;\n\n    if (composedComponentInstance) {\n      this._hoisted = hoistMethods(this, composedComponentInstance);\n    } else if (this._hoisted) {\n      unhoistMethods(this, this._hoisted);\n    }\n  };\n\n  return BaseDecorator;\n}(BaseComponent);\n\nexport { BaseDecorator };","map":{"version":3,"sources":["utilities/decorators/BaseDecorator.ts"],"names":[],"mappings":";AACA,SAAS,aAAT,EAAwB,YAAxB,EAAsC,cAAtC,QAA4D,iBAA5D;;AAEA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmD,EAAA,OAAA,CAAA,SAAA,CAAA,aAAA,EAAA,MAAA;;AAQjD,WAAA,aAAA,CAAY,KAAZ,EAAyB;AAAzB,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd,CAAyB,CAPzB;;;AACU,IAAA,KAAA,CAAA,2BAAA,GAA8B,IAA9B;AAQR,IAAA,KAAI,CAAC,2BAAL,GAAmC,KAAI,CAAC,2BAAL,CAAiC,IAAjC,CAAsC,KAAtC,CAAnC;;AACD;AAED;;;;;;;;AAMU,EAAA,aAAA,CAAA,SAAA,CAAA,2BAAA,GAAV,UAAsC,yBAAtC,EAAgG;AAC9F,SAAK,0BAAL,GAAkC,yBAAlC;;AACA,QAAI,yBAAJ,EAA+B;AAC7B,WAAK,QAAL,GAAgB,YAAY,CAAC,IAAD,EAAO,yBAAP,CAA5B;AACD,KAFD,MAEO,IAAI,KAAK,QAAT,EAAmB;AACxB,MAAA,cAAc,CAAC,IAAD,EAAO,KAAK,QAAZ,CAAd;AACD;AACF,GAPS;;AAQZ,SAAA,aAAA;AAAC,CA3BD,CAAmD,aAAnD,CAAA","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, hoistMethods, unhoistMethods } from '../../Utilities';\n\nexport class BaseDecorator<TProps, TState> extends BaseComponent<TProps, TState> {\n  // tslint:disable-next-line:typedef\n  protected _skipComponentRefResolution = true;\n\n  protected _composedComponentInstance: React.Component<TProps, TState>;\n\n  private _hoisted: string[];\n\n  constructor(props: TProps) {\n    super(props);\n    this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n  }\n\n  /**\n   * Updates the ref to the component composed by the decorator, which will also take care of hoisting\n   * (and unhoisting as appropriate) methods from said component.\n   *\n   * Pass this method as the argument to the 'ref' property of the composed component.\n   */\n  protected _updateComposedComponentRef(composedComponentInstance: React.Component<TProps, TState>): void {\n    this._composedComponentInstance = composedComponentInstance;\n    if (composedComponentInstance) {\n      this._hoisted = hoistMethods(this, composedComponentInstance);\n    } else if (this._hoisted) {\n      unhoistMethods(this, this._hoisted);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}