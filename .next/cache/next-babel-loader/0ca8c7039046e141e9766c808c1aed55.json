{"ast":null,"code":"var _a;\n\nimport * as tslib_1 from \"tslib\";\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { getScrollbarWidth, getRTL, Rectangle as FullRectangle } from '../../Utilities';\nimport { RectangleEdge } from './positioning.types';\n\nvar Rectangle =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Rectangle, _super);\n\n  function Rectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return Rectangle;\n}(FullRectangle);\n\nexport { Rectangle };\n\nfunction _createPositionData(targetEdge, alignmentEdge, isAuto) {\n  return {\n    targetEdge: targetEdge,\n    alignmentEdge: alignmentEdge,\n    isAuto: isAuto\n  };\n} // Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target\n\n\nvar DirectionalDictionary = (_a = {}, _a[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left), _a[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top), _a[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right), _a[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, undefined, true), _a[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left), _a[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom), _a[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right), _a[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, undefined, true), _a[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top), _a[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left), _a[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom), _a[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top), _a[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right), _a[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom), _a);\n\nfunction _isRectangleWithinBounds(rect, boundingRect) {\n  if (rect.top < boundingRect.top) {\n    return false;\n  }\n\n  if (rect.bottom > boundingRect.bottom) {\n    return false;\n  }\n\n  if (rect.left < boundingRect.left) {\n    return false;\n  }\n\n  if (rect.right > boundingRect.right) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Gets all of the edges of a rectangle that are outside of the given bounds.\n * If there are no out of bounds edges it returns an empty array.\n */\n\n\nfunction _getOutOfBoundsEdges(rect, boundingRect) {\n  var outOfBounds = new Array();\n\n  if (rect.top < boundingRect.top) {\n    outOfBounds.push(RectangleEdge.top);\n  }\n\n  if (rect.bottom > boundingRect.bottom) {\n    outOfBounds.push(RectangleEdge.bottom);\n  }\n\n  if (rect.left < boundingRect.left) {\n    outOfBounds.push(RectangleEdge.left);\n  }\n\n  if (rect.right > boundingRect.right) {\n    outOfBounds.push(RectangleEdge.right);\n  }\n\n  return outOfBounds;\n}\n\nfunction _getEdgeValue(rect, edge) {\n  return rect[RectangleEdge[edge]];\n}\n\nfunction _setEdgeValue(rect, edge, value) {\n  rect[RectangleEdge[edge]] = value;\n  return rect;\n}\n/**\n * Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as\n * the itself already contains the other coordinate.\n * For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.\n *\n * @param {Rectangle} rect\n * @param {RectangleEdge} edge\n * @returns {number}\n */\n\n\nfunction _getCenterValue(rect, edge) {\n  var edges = _getFlankingEdges(edge);\n\n  return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;\n}\n/**\n * Flips the value depending on the edge.\n * If the edge is a \"positive\" edge, Top or Left, then the value should stay as it is.\n * If the edge is a \"negative\" edge, Bottom or Right, then the value should be flipped.\n * This is to account for the fact that the coordinates are effectively reveserved in certain cases for the \"negative\" edges.\n * For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2.\n * If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.\n * If top edge 1 is less than edge 2 then it is out of bounds.\n *\n *\n * @param {RectangleEdge} edge\n * @param {number} value\n * @returns {number}\n */\n\n\nfunction _getRelativeEdgeValue(edge, value) {\n  if (edge > 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n}\n\nfunction _getRelativeRectEdgeValue(edge, rect) {\n  return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));\n}\n\nfunction _getRelativeEdgeDifference(rect, hostRect, edge) {\n  var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);\n\n  return _getRelativeEdgeValue(edge, edgeDifference);\n}\n/**\n * Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.\n * For example, if it's a bottom edge it will only change y coordinates.\n *\n * @param {Rectangle} rect\n * @param {RectangleEdge} edge\n * @param {number} newValue\n * @returns {Rectangle}\n */\n\n\nfunction _moveEdge(rect, edge, newValue) {\n  var difference = _getEdgeValue(rect, edge) - newValue;\n  rect = _setEdgeValue(rect, edge, newValue);\n  rect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);\n  return rect;\n}\n/**\n * Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.\n *\n * @param {Rectangle} rect\n * @param {Rectangle} target\n * @param {RectangleEdge} edge\n * @param {number} [gap=0]\n * @returns {Rectangle}\n */\n\n\nfunction _alignEdges(rect, target, edge, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));\n}\n/**\n * Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.\n * For instance if targetEdge is bottom, then the rects top will be moved to match it.\n *\n * @param {Rectangle} rect\n * @param {Rectangle} target\n * @param {RectangleEdge} targetEdge\n * @param {number} [gap=0]\n * @returns {Rectangle}\n */\n\n\nfunction _alignOppositeEdges(rect, target, targetEdge, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  var oppositeEdge = targetEdge * -1;\n\n  var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);\n\n  return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);\n}\n/**\n * Tests to see if the given edge is within the bounds of the given rectangle.\n *\n * @param {Rectangle} rect\n * @param {Rectangle} bounds\n * @param {RectangleEdge} edge\n * @returns {boolean}\n */\n\n\nfunction _isEdgeInBounds(rect, bounds, edge) {\n  var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);\n\n  return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);\n}\n/**\n * Attempts to move the rectangle through various sides of the target to find a place to fit.\n * If no fit is found, the original position should be returned.\n *\n * @param {Rectangle} rect\n * @param {Rectangle} target\n * @param {Rectangle} bounding\n * @param {IPositionDirectionalHintData} positionData\n * @param {number} [gap=0]\n * @returns {IElementPosition}\n */\n\n\nfunction _flipToFit(rect, target, bounding, positionData, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  var directions = [RectangleEdge.left, RectangleEdge.right, RectangleEdge.bottom, RectangleEdge.top]; // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, therefore the order should be updated.\n\n  if (getRTL()) {\n    directions[0] *= -1;\n    directions[1] *= -1;\n  }\n\n  var currentEstimate = rect;\n  var currentEdge = positionData.targetEdge;\n  var currentAlignment = positionData.alignmentEdge; // Keep switching sides until one is found with enough space. If all sides don't fit then return the unmodified element.\n\n  for (var i = 0; i < 4; i++) {\n    if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {\n      directions.splice(directions.indexOf(currentEdge), 1);\n\n      if (directions.indexOf(currentEdge * -1) > -1) {\n        currentEdge = currentEdge * -1;\n      } else {\n        currentAlignment = currentEdge;\n        currentEdge = directions.slice(-1)[0];\n      }\n\n      currentEstimate = _estimatePosition(rect, target, {\n        targetEdge: currentEdge,\n        alignmentEdge: currentAlignment\n      }, gap);\n    } else {\n      return {\n        elementRectangle: currentEstimate,\n        targetEdge: currentEdge,\n        alignmentEdge: currentAlignment\n      };\n    }\n  }\n\n  return {\n    elementRectangle: rect,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: currentAlignment\n  };\n}\n/**\n * Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges into position,\n * when alignTargetEdge is specified.\n * @param elementEstimate\n * @param target\n * @param bounding\n * @param gap\n */\n\n\nfunction _flipAlignmentEdge(elementEstimate, target, gap, coverTarget) {\n  var alignmentEdge = elementEstimate.alignmentEdge,\n      targetEdge = elementEstimate.targetEdge,\n      elementRectangle = elementEstimate.elementRectangle;\n  var oppositeEdge = alignmentEdge * -1;\n\n  var newEstimate = _estimatePosition(elementRectangle, target, {\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge\n  }, gap, coverTarget);\n\n  return {\n    elementRectangle: newEstimate,\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge\n  };\n}\n/**\n * Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in\n * then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.\n *\n * @param {Rectangle} element\n * @param {Rectangle} target\n * @param {Rectangle} bounding\n * @param {IPositionDirectionalHintData} positionData\n * @param {number} [gap=0]\n * @param {boolean} [directionalHintFixed]\n * @param {boolean} [coverTarget]\n * @returns {IElementPosition}\n */\n\n\nfunction _adjustFitWithinBounds(element, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  var alignmentEdge = positionData.alignmentEdge,\n      alignTargetEdge = positionData.alignTargetEdge;\n  var elementEstimate = {\n    elementRectangle: element,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: alignmentEdge\n  };\n\n  if (!directionalHintFixed && !coverTarget) {\n    elementEstimate = _flipToFit(element, target, bounding, positionData, gap);\n  }\n\n  var outOfBounds = _getOutOfBoundsEdges(element, bounding);\n\n  if (alignTargetEdge) {\n    // The edge opposite to the alignment edge might be out of bounds. Flip alignment to see if we can get it within bounds.\n    if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {\n      var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);\n\n      if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {\n        return flippedElementEstimate;\n      }\n    }\n  } else {\n    for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {\n      var direction = outOfBounds_1[_i];\n      elementEstimate.elementRectangle = _alignEdges(elementEstimate.elementRectangle, bounding, direction);\n    }\n  }\n\n  return elementEstimate;\n}\n/**\n * Moves the middle point on an edge to the point given.\n * Only moves in one direction. For instance if a bottom edge is passed in, then\n * the bottom edge will be moved in the x axis to match the point.\n *\n * @param {Rectangle} rect\n * @param {RectangleEdge} edge\n * @param {number} point\n * @returns {Rectangle}\n */\n\n\nfunction _centerEdgeToPoint(rect, edge, point) {\n  var positiveEdge = _getFlankingEdges(edge).positiveEdge;\n\n  var elementMiddle = _getCenterValue(rect, edge);\n\n  var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);\n\n  return _moveEdge(rect, positiveEdge, point - distanceToMiddle);\n}\n/**\n * Moves the element rectangle to be appropriately positioned relative to a given target.\n * Does not flip or adjust the element.\n *\n * @param {Rectangle} elementToPosition\n * @param {Rectangle} target\n * @param {IPositionDirectionalHintData} positionData\n * @param {number} [gap=0]\n * @param {boolean} [coverTarget]\n * @returns {Rectangle}\n */\n\n\nfunction _estimatePosition(elementToPosition, target, positionData, gap, coverTarget) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  var estimatedElementPosition;\n  var alignmentEdge = positionData.alignmentEdge,\n      targetEdge = positionData.targetEdge;\n  var elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  estimatedElementPosition = coverTarget ? _alignEdges(elementToPosition, target, targetEdge, gap) : _alignOppositeEdges(elementToPosition, target, targetEdge, gap); // if no alignment edge is provided it's supposed to be centered.\n\n  if (!alignmentEdge) {\n    var targetMiddlePoint = _getCenterValue(target, targetEdge);\n\n    estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);\n  } else {\n    estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);\n  }\n\n  return estimatedElementPosition;\n}\n/**\n * Returns the non-opposite edges of the target edge.\n * For instance if bottom is passed in then left and right will be returned.\n *\n * @param {RectangleEdge} edge\n * @returns {{ firstEdge: RectangleEdge, secondEdge: RectangleEdge }}\n */\n\n\nfunction _getFlankingEdges(edge) {\n  if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {\n    return {\n      positiveEdge: RectangleEdge.left,\n      negativeEdge: RectangleEdge.right\n    };\n  } else {\n    return {\n      positiveEdge: RectangleEdge.top,\n      negativeEdge: RectangleEdge.bottom\n    };\n  }\n}\n/**\n * Retrieve the final value for the return edge of elementRectangle.\n * If the elementRectangle is closer to one side of the bounds versus the other, the return edge is flipped to grow inward.\n *\n * @param elementRectangle\n * @param targetEdge\n * @param bounds\n */\n\n\nfunction _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {\n  if (bounds && Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) > Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {\n    return returnEdge * -1;\n  }\n\n  return returnEdge;\n}\n/**\n * Finalizes the element positon based on the hostElement. Only returns the\n * rectangle values to position such that they are anchored to the target.\n * This helps prevent resizing from looking very strange.\n * For instance, if the target edge is top and aligned with the left side then\n * the bottom and left values are returned so as the callou shrinks it shrinks towards that corner.\n *\n * @param {Rectangle} elementRectangle\n * @param {HTMLElement} hostElement\n * @param {RectangleEdge} targetEdge\n * @param {RectangleEdge} bounds\n * @param {RectangleEdge} [alignmentEdge]\n * @param {boolean} coverTarget\n * @returns {IPartialIRectangle}\n */\n\n\nfunction _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget) {\n  var returnValue = {};\n\n  var hostRect = _getRectangleFromElement(hostElement);\n\n  var elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  var elementEdgeString = RectangleEdge[elementEdge];\n\n  var returnEdge = _finalizeReturnEdge(elementRectangle, alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);\n\n  returnValue[elementEdgeString] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);\n  return returnValue;\n} // Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.\n// We still want to position the beak based on it's midpoint which does not change. It will\n// be at (beakwidth / 2, beakwidth / 2)\n\n\nfunction _calculateActualBeakWidthInPixels(beakWidth) {\n  return Math.sqrt(beakWidth * beakWidth * 2);\n}\n/**\n * Returns the appropriate IPositionData based on the props altered for RTL.\n * If directionalHintForRTL is passed in that is used if the page is RTL.\n * If a directionalHint is specified and no directionalHintForRTL is available and the page is RTL the hint will be flipped.\n * For instance bottomLeftEdge would become bottomRightEdge.\n * If there is no directionalHint passed in bottomAutoEdge is chosen automatically.\n *\n * @param {IPositionProps} props\n * @returns {IPositionDirectionalHintData}\n */\n\n\nfunction _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {\n  if (directionalHint === void 0) {\n    directionalHint = DirectionalHint.bottomAutoEdge;\n  }\n\n  if (previousPositions) {\n    return {\n      alignmentEdge: previousPositions.alignmentEdge,\n      isAuto: previousPositions.isAuto,\n      targetEdge: previousPositions.targetEdge\n    };\n  }\n\n  var positionInformation = tslib_1.__assign({}, DirectionalDictionary[directionalHint]);\n\n  if (getRTL()) {\n    // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.\n    if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {\n      positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;\n    }\n\n    return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;\n  }\n\n  return positionInformation;\n}\n/**\n * Get's the alignment data for the given information. This only really matters if the positioning is Auto.\n * If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to\n * the center of the page.\n *\n * @param {IPositionDirectionalHintData} positionData\n * @param {Rectangle} target\n * @param {Rectangle} boundingRect\n * @param {boolean} [coverTarget]\n * @returns {IPositionDirectionalHintData}\n */\n\n\nfunction _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {\n  if (positionData.isAuto) {\n    positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);\n  }\n\n  positionData.alignTargetEdge = alignTargetEdge;\n  return positionData;\n}\n\nfunction getClosestEdge(targetEdge, target, boundingRect) {\n  var targetCenter = _getCenterValue(target, targetEdge);\n\n  var boundingCenter = _getCenterValue(boundingRect, targetEdge);\n\n  var _a = _getFlankingEdges(targetEdge),\n      positiveEdge = _a.positiveEdge,\n      negativeEdge = _a.negativeEdge;\n\n  if (targetCenter <= boundingCenter) {\n    return positiveEdge;\n  } else {\n    return negativeEdge;\n  }\n}\n\nfunction _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {\n  var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);\n\n  if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {\n    return {\n      elementRectangle: estimatedElementPosition,\n      targetEdge: positionData.targetEdge,\n      alignmentEdge: positionData.alignmentEdge\n    };\n  } else {\n    return _adjustFitWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);\n  }\n}\n\nfunction _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {\n  var targetEdge = elementPosition.targetEdge * -1; // The \"host\" element that we will use to help position the beak.\n\n  var actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);\n  var returnValue = {};\n\n  var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);\n\n  returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);\n  return {\n    elementPosition: tslib_1.__assign({}, returnValue),\n    closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),\n    targetEdge: targetEdge\n  };\n}\n\nfunction _positionBeak(beakWidth, elementPosition) {\n  var target = elementPosition.targetRectangle;\n  /**\n   * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and\n   * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,\n   * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels\n   * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.\n   * */\n\n  var _a = _getFlankingEdges(elementPosition.targetEdge),\n      positiveEdge = _a.positiveEdge,\n      negativeEdge = _a.negativeEdge;\n\n  var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);\n\n  var elementBounds = new Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);\n  var beakPosition = new Rectangle(0, beakWidth, 0, beakWidth);\n  beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);\n  beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));\n\n  if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);\n  } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);\n  }\n\n  return beakPosition;\n}\n\nfunction _getRectangleFromElement(element) {\n  var clientRect = element.getBoundingClientRect();\n  return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);\n}\n\nfunction _getRectangleFromIRect(rect) {\n  return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);\n}\n\nfunction _getTargetRect(bounds, target) {\n  var targetRectangle;\n\n  if (target) {\n    if (target.preventDefault) {\n      var ev = target;\n      targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);\n    } else if (target.getBoundingClientRect) {\n      targetRectangle = _getRectangleFromElement(target); // HTMLImgElements can have x and y values. The check for it being a point must go last.\n    } else {\n      var point = target;\n      targetRectangle = new Rectangle(point.x, point.x, point.y, point.y);\n    }\n\n    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\n      var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);\n\n      for (var _i = 0, outOfBounds_2 = outOfBounds; _i < outOfBounds_2.length; _i++) {\n        var direction = outOfBounds_2[_i];\n        targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];\n      }\n    }\n  } else {\n    targetRectangle = new Rectangle(0, 0, 0, 0);\n  }\n\n  return targetRectangle;\n}\n/**\n * If max height is less than zero it returns the bounds height instead.\n */\n\n\nfunction _getMaxHeightFromTargetRectangle(targetRectangle, targetEdge, gapSpace, bounds, coverTarget) {\n  var maxHeight = 0;\n  var directionalHint = DirectionalDictionary[targetEdge]; // If cover target is set, then the max height should be calculated using the opposite of the target edge since\n  // that's the direction that the callout will expand in.\n  // For instance, if the directionalhint is bottomLeftEdge then the callout will position so it's bottom edge\n  // is aligned with the bottom of the target and expand up towards the top of the screen and the calculated max height\n  // is (bottom of target) - (top of screen) - gapSpace.\n\n  var target = coverTarget ? directionalHint.targetEdge * -1 : directionalHint.targetEdge;\n\n  if (target === RectangleEdge.top) {\n    maxHeight = _getEdgeValue(targetRectangle, directionalHint.targetEdge) - bounds.top - gapSpace;\n  } else if (target === RectangleEdge.bottom) {\n    maxHeight = bounds.bottom - _getEdgeValue(targetRectangle, directionalHint.targetEdge) - gapSpace;\n  } else {\n    maxHeight = bounds.bottom - targetRectangle.top - gapSpace;\n  }\n\n  return maxHeight > 0 ? maxHeight : bounds.height;\n}\n\nfunction _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {\n  var gap = props.gapSpace ? props.gapSpace : 0;\n\n  var targetRect = _getTargetRect(boundingRect, props.target);\n\n  var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);\n\n  var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap, props.directionalHintFixed, props.coverTarget);\n\n  return tslib_1.__assign({}, positionedElement, {\n    targetRectangle: targetRect\n  });\n}\n\nfunction _finalizePositionData(positionedElement, hostElement, bounds, coverTarget) {\n  var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget);\n\n  return {\n    elementPosition: finalizedElement,\n    targetEdge: positionedElement.targetEdge,\n    alignmentEdge: positionedElement.alignmentEdge\n  };\n}\n\nfunction _positionElement(props, hostElement, elementToPosition, previousPositions) {\n  var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n\n  var positionedElement = _positionElementRelative(props, elementToPosition, boundingRect, previousPositions);\n\n  return _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget);\n}\n\nfunction _positionCallout(props, hostElement, callout, previousPositions) {\n  var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;\n  var gap = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);\n  var positionProps = props;\n  positionProps.gapSpace = gap;\n  var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n\n  var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);\n\n  var beakPositioned = _positionBeak(beakWidth, positionedElement);\n\n  var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);\n\n  return tslib_1.__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget), {\n    beakPosition: finalizedBeakPosition\n  });\n} // END PRIVATE FUNCTIONS\n\n/* tslint:disable:variable-name */\n\n\nexport var __positioningTestPackage = {\n  _finalizePositionData: _finalizePositionData,\n  _finalizeBeakPosition: _finalizeBeakPosition,\n  _calculateActualBeakWidthInPixels: _calculateActualBeakWidthInPixels,\n  _positionElementWithinBounds: _positionElementWithinBounds,\n  _positionBeak: _positionBeak,\n  _getPositionData: _getPositionData,\n  _getMaxHeightFromTargetRectangle: _getMaxHeightFromTargetRectangle\n};\n/* tslint:enable:variable-name */\n\n/**\n * Used to position an element relative to the given positioning props.\n * If positioning has been completed before, previousPositioningData\n * can be passed to ensure that the positioning element repositions based on\n * its previous targets rather than starting with directionalhint.\n *\n * @export\n * @param {IPositionProps} props\n * @param {HTMLElement} hostElement\n * @param {HTMLElement} elementToPosition\n * @param {IPositionedData} previousPositions\n * @returns\n */\n\nexport function positionElement(props, hostElement, elementToPosition, previousPositions) {\n  return _positionElement(props, hostElement, elementToPosition, previousPositions);\n}\nexport function positionCallout(props, hostElement, elementToPosition, previousPositions) {\n  return _positionCallout(props, hostElement, elementToPosition, previousPositions);\n}\n/**\n * Get's the maximum height that a rectangle can have in order to fit below or above a target.\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\n * of the target given.\n * If no bounds are provided then the window is treated as the bounds.\n */\n\nexport function getMaxHeight(target, targetEdge, gapSpace, bounds, coverTarget) {\n  if (gapSpace === void 0) {\n    gapSpace = 0;\n  }\n\n  var mouseTarget = target;\n  var elementTarget = target;\n  var pointTarget = target;\n  var targetRect;\n  var boundingRectangle = bounds ? _getRectangleFromIRect(bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n\n  if (mouseTarget.stopPropagation) {\n    targetRect = new Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);\n  } else if (pointTarget.x !== undefined && pointTarget.y !== undefined) {\n    targetRect = new Rectangle(pointTarget.x, pointTarget.x, pointTarget.y, pointTarget.y);\n  } else {\n    targetRect = _getRectangleFromElement(elementTarget);\n  }\n\n  return _getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle, coverTarget);\n}\n/**\n * Returns the opposite edge of the given RectangleEdge.\n */\n\nexport function getOppositeEdge(edge) {\n  return edge * -1;\n}","map":{"version":3,"sources":["utilities/positioning/positioning.ts"],"names":[],"mappings":"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","sourcesContent":["import { DirectionalHint } from '../../common/DirectionalHint';\nimport { getScrollbarWidth, getRTL, Rectangle as FullRectangle, IRectangle } from '../../Utilities';\nimport {\n  IPositionDirectionalHintData,\n  IPositionedData,\n  IPoint,\n  ICalloutPositionedInfo,\n  ICalloutBeakPositionedInfo,\n  IPositionProps,\n  ICalloutPositionProps,\n  RectangleEdge\n} from './positioning.types';\n\nexport class Rectangle extends FullRectangle {\n  [key: string]: number | boolean | any;\n}\n\nfunction _createPositionData(targetEdge: RectangleEdge, alignmentEdge?: RectangleEdge, isAuto?: boolean): IPositionDirectionalHintData {\n  return {\n    targetEdge: targetEdge,\n    alignmentEdge: alignmentEdge,\n    isAuto: isAuto\n  };\n}\n\n// Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target\nconst DirectionalDictionary: { [key: number]: IPositionDirectionalHintData } = {\n  [DirectionalHint.topLeftEdge]: _createPositionData(RectangleEdge.top, RectangleEdge.left),\n  [DirectionalHint.topCenter]: _createPositionData(RectangleEdge.top),\n  [DirectionalHint.topRightEdge]: _createPositionData(RectangleEdge.top, RectangleEdge.right),\n  [DirectionalHint.topAutoEdge]: _createPositionData(RectangleEdge.top, undefined, true),\n  [DirectionalHint.bottomLeftEdge]: _createPositionData(RectangleEdge.bottom, RectangleEdge.left),\n  [DirectionalHint.bottomCenter]: _createPositionData(RectangleEdge.bottom),\n  [DirectionalHint.bottomRightEdge]: _createPositionData(RectangleEdge.bottom, RectangleEdge.right),\n  [DirectionalHint.bottomAutoEdge]: _createPositionData(RectangleEdge.bottom, undefined, true),\n  [DirectionalHint.leftTopEdge]: _createPositionData(RectangleEdge.left, RectangleEdge.top),\n  [DirectionalHint.leftCenter]: _createPositionData(RectangleEdge.left),\n  [DirectionalHint.leftBottomEdge]: _createPositionData(RectangleEdge.left, RectangleEdge.bottom),\n  [DirectionalHint.rightTopEdge]: _createPositionData(RectangleEdge.right, RectangleEdge.top),\n  [DirectionalHint.rightCenter]: _createPositionData(RectangleEdge.right),\n  [DirectionalHint.rightBottomEdge]: _createPositionData(RectangleEdge.right, RectangleEdge.bottom)\n};\n\n/**\n * Do not call methods from this directly, use either positionCallout or positionElement or make another function that\n * utilizes them.\n * START Private functions and interfaces\n */\n\nexport interface IElementPosition {\n  elementRectangle: Rectangle;\n  targetEdge: RectangleEdge;\n  alignmentEdge: RectangleEdge | undefined;\n}\n\nexport interface IElementPositionInfo extends IElementPosition {\n  targetRectangle: Rectangle;\n}\n\ntype PartialIRectangle = Partial<IRectangle>;\n\ninterface IPartialIRectangle extends PartialIRectangle {\n  [key: string]: number | undefined;\n}\n\nfunction _isRectangleWithinBounds(rect: Rectangle, boundingRect: Rectangle): boolean {\n  if (rect.top < boundingRect.top) {\n    return false;\n  }\n  if (rect.bottom > boundingRect.bottom) {\n    return false;\n  }\n  if (rect.left < boundingRect.left) {\n    return false;\n  }\n  if (rect.right > boundingRect.right) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Gets all of the edges of a rectangle that are outside of the given bounds.\n * If there are no out of bounds edges it returns an empty array.\n */\nfunction _getOutOfBoundsEdges(rect: Rectangle, boundingRect: Rectangle): RectangleEdge[] {\n  const outOfBounds: RectangleEdge[] = new Array<RectangleEdge>();\n\n  if (rect.top < boundingRect.top) {\n    outOfBounds.push(RectangleEdge.top);\n  }\n  if (rect.bottom > boundingRect.bottom) {\n    outOfBounds.push(RectangleEdge.bottom);\n  }\n  if (rect.left < boundingRect.left) {\n    outOfBounds.push(RectangleEdge.left);\n  }\n  if (rect.right > boundingRect.right) {\n    outOfBounds.push(RectangleEdge.right);\n  }\n\n  return outOfBounds;\n}\n\nfunction _getEdgeValue(rect: Rectangle, edge: RectangleEdge): number {\n  return rect[RectangleEdge[edge]];\n}\n\nfunction _setEdgeValue(rect: Rectangle, edge: RectangleEdge, value: number) {\n  rect[RectangleEdge[edge]] = value;\n  return rect;\n}\n\n/**\n * Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as\n * the itself already contains the other coordinate.\n * For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.\n *\n * @param {Rectangle} rect\n * @param {RectangleEdge} edge\n * @returns {number}\n */\nfunction _getCenterValue(rect: Rectangle, edge: RectangleEdge): number {\n  const edges = _getFlankingEdges(edge);\n  return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;\n}\n\n/**\n * Flips the value depending on the edge.\n * If the edge is a \"positive\" edge, Top or Left, then the value should stay as it is.\n * If the edge is a \"negative\" edge, Bottom or Right, then the value should be flipped.\n * This is to account for the fact that the coordinates are effectively reveserved in certain cases for the \"negative\" edges.\n * For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2.\n * If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.\n * If top edge 1 is less than edge 2 then it is out of bounds.\n *\n *\n * @param {RectangleEdge} edge\n * @param {number} value\n * @returns {number}\n */\nfunction _getRelativeEdgeValue(edge: RectangleEdge, value: number): number {\n  if (edge > 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n}\n\nfunction _getRelativeRectEdgeValue(edge: RectangleEdge, rect: Rectangle): number {\n  return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));\n}\n\nfunction _getRelativeEdgeDifference(rect: Rectangle, hostRect: Rectangle, edge: RectangleEdge): number {\n  const edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);\n  return _getRelativeEdgeValue(edge, edgeDifference);\n}\n\n/**\n * Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.\n * For example, if it's a bottom edge it will only change y coordinates.\n *\n * @param {Rectangle} rect\n * @param {RectangleEdge} edge\n * @param {number} newValue\n * @returns {Rectangle}\n */\nfunction _moveEdge(rect: Rectangle, edge: RectangleEdge, newValue: number): Rectangle {\n  const difference = _getEdgeValue(rect, edge) - newValue;\n  rect = _setEdgeValue(rect, edge, newValue);\n  rect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);\n  return rect;\n}\n\n/**\n * Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.\n *\n * @param {Rectangle} rect\n * @param {Rectangle} target\n * @param {RectangleEdge} edge\n * @param {number} [gap=0]\n * @returns {Rectangle}\n */\nfunction _alignEdges(rect: Rectangle, target: Rectangle, edge: RectangleEdge, gap: number = 0): Rectangle {\n  return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));\n}\n\n/**\n * Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.\n * For instance if targetEdge is bottom, then the rects top will be moved to match it.\n *\n * @param {Rectangle} rect\n * @param {Rectangle} target\n * @param {RectangleEdge} targetEdge\n * @param {number} [gap=0]\n * @returns {Rectangle}\n */\nfunction _alignOppositeEdges(rect: Rectangle, target: Rectangle, targetEdge: RectangleEdge, gap: number = 0): Rectangle {\n  const oppositeEdge = targetEdge * -1;\n  const adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);\n  return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);\n}\n\n/**\n * Tests to see if the given edge is within the bounds of the given rectangle.\n *\n * @param {Rectangle} rect\n * @param {Rectangle} bounds\n * @param {RectangleEdge} edge\n * @returns {boolean}\n */\nfunction _isEdgeInBounds(rect: Rectangle, bounds: Rectangle, edge: RectangleEdge): boolean {\n  const adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);\n  return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);\n}\n\n/**\n * Attempts to move the rectangle through various sides of the target to find a place to fit.\n * If no fit is found, the original position should be returned.\n *\n * @param {Rectangle} rect\n * @param {Rectangle} target\n * @param {Rectangle} bounding\n * @param {IPositionDirectionalHintData} positionData\n * @param {number} [gap=0]\n * @returns {IElementPosition}\n */\nfunction _flipToFit(\n  rect: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0\n): IElementPosition {\n  const directions: RectangleEdge[] = [RectangleEdge.left, RectangleEdge.right, RectangleEdge.bottom, RectangleEdge.top];\n  // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, therefore the order should be updated.\n  if (getRTL()) {\n    directions[0] *= -1;\n    directions[1] *= -1;\n  }\n  let currentEstimate = rect;\n  let currentEdge = positionData.targetEdge;\n  let currentAlignment = positionData.alignmentEdge;\n  // Keep switching sides until one is found with enough space. If all sides don't fit then return the unmodified element.\n  for (let i = 0; i < 4; i++) {\n    if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {\n      directions.splice(directions.indexOf(currentEdge), 1);\n      if (directions.indexOf(currentEdge * -1) > -1) {\n        currentEdge = currentEdge * -1;\n      } else {\n        currentAlignment = currentEdge;\n        currentEdge = directions.slice(-1)[0];\n      }\n      currentEstimate = _estimatePosition(rect, target, { targetEdge: currentEdge, alignmentEdge: currentAlignment }, gap);\n    } else {\n      return {\n        elementRectangle: currentEstimate,\n        targetEdge: currentEdge,\n        alignmentEdge: currentAlignment\n      };\n    }\n  }\n  return {\n    elementRectangle: rect,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: currentAlignment\n  };\n}\n\n/**\n * Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges into position,\n * when alignTargetEdge is specified.\n * @param elementEstimate\n * @param target\n * @param bounding\n * @param gap\n */\nfunction _flipAlignmentEdge(elementEstimate: IElementPosition, target: Rectangle, gap: number, coverTarget?: boolean): IElementPosition {\n  const { alignmentEdge, targetEdge, elementRectangle } = elementEstimate;\n  const oppositeEdge = alignmentEdge! * -1;\n  const newEstimate = _estimatePosition(\n    elementRectangle,\n    target,\n    { targetEdge: targetEdge, alignmentEdge: oppositeEdge },\n    gap,\n    coverTarget\n  );\n\n  return {\n    elementRectangle: newEstimate,\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge\n  };\n}\n\n/**\n * Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in\n * then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.\n *\n * @param {Rectangle} element\n * @param {Rectangle} target\n * @param {Rectangle} bounding\n * @param {IPositionDirectionalHintData} positionData\n * @param {number} [gap=0]\n * @param {boolean} [directionalHintFixed]\n * @param {boolean} [coverTarget]\n * @returns {IElementPosition}\n */\nfunction _adjustFitWithinBounds(\n  element: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0,\n  directionalHintFixed?: boolean,\n  coverTarget?: boolean\n): IElementPosition {\n  const { alignmentEdge, alignTargetEdge } = positionData;\n  let elementEstimate: IElementPosition = {\n    elementRectangle: element,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: alignmentEdge\n  };\n\n  if (!directionalHintFixed && !coverTarget) {\n    elementEstimate = _flipToFit(element, target, bounding, positionData, gap);\n  }\n\n  const outOfBounds = _getOutOfBoundsEdges(element, bounding);\n\n  if (alignTargetEdge) {\n    // The edge opposite to the alignment edge might be out of bounds. Flip alignment to see if we can get it within bounds.\n    if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {\n      const flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);\n      if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {\n        return flippedElementEstimate;\n      }\n    }\n  } else {\n    for (const direction of outOfBounds) {\n      elementEstimate.elementRectangle = _alignEdges(elementEstimate.elementRectangle, bounding, direction);\n    }\n  }\n\n  return elementEstimate;\n}\n\n/**\n * Moves the middle point on an edge to the point given.\n * Only moves in one direction. For instance if a bottom edge is passed in, then\n * the bottom edge will be moved in the x axis to match the point.\n *\n * @param {Rectangle} rect\n * @param {RectangleEdge} edge\n * @param {number} point\n * @returns {Rectangle}\n */\nfunction _centerEdgeToPoint(rect: Rectangle, edge: RectangleEdge, point: number): Rectangle {\n  const { positiveEdge } = _getFlankingEdges(edge);\n  const elementMiddle = _getCenterValue(rect, edge);\n  const distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);\n  return _moveEdge(rect, positiveEdge, point - distanceToMiddle);\n}\n\n/**\n * Moves the element rectangle to be appropriately positioned relative to a given target.\n * Does not flip or adjust the element.\n *\n * @param {Rectangle} elementToPosition\n * @param {Rectangle} target\n * @param {IPositionDirectionalHintData} positionData\n * @param {number} [gap=0]\n * @param {boolean} [coverTarget]\n * @returns {Rectangle}\n */\nfunction _estimatePosition(\n  elementToPosition: Rectangle,\n  target: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0,\n  coverTarget?: boolean\n): Rectangle {\n  let estimatedElementPosition: Rectangle;\n  const { alignmentEdge, targetEdge } = positionData;\n  const elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  estimatedElementPosition = coverTarget\n    ? _alignEdges(elementToPosition, target, targetEdge, gap)\n    : _alignOppositeEdges(elementToPosition, target, targetEdge, gap);\n  // if no alignment edge is provided it's supposed to be centered.\n  if (!alignmentEdge) {\n    const targetMiddlePoint = _getCenterValue(target, targetEdge);\n    estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);\n  } else {\n    estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);\n  }\n\n  return estimatedElementPosition;\n}\n\n/**\n * Returns the non-opposite edges of the target edge.\n * For instance if bottom is passed in then left and right will be returned.\n *\n * @param {RectangleEdge} edge\n * @returns {{ firstEdge: RectangleEdge, secondEdge: RectangleEdge }}\n */\nfunction _getFlankingEdges(edge: RectangleEdge): { positiveEdge: RectangleEdge; negativeEdge: RectangleEdge } {\n  if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {\n    return {\n      positiveEdge: RectangleEdge.left,\n      negativeEdge: RectangleEdge.right\n    };\n  } else {\n    return {\n      positiveEdge: RectangleEdge.top,\n      negativeEdge: RectangleEdge.bottom\n    };\n  }\n}\n\n/**\n * Retrieve the final value for the return edge of elementRectangle.\n * If the elementRectangle is closer to one side of the bounds versus the other, the return edge is flipped to grow inward.\n *\n * @param elementRectangle\n * @param targetEdge\n * @param bounds\n */\nfunction _finalizeReturnEdge(elementRectangle: Rectangle, returnEdge: RectangleEdge, bounds?: Rectangle): RectangleEdge {\n  if (\n    bounds &&\n    Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) >\n      Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))\n  ) {\n    return returnEdge * -1;\n  }\n\n  return returnEdge;\n}\n\n/**\n * Finalizes the element positon based on the hostElement. Only returns the\n * rectangle values to position such that they are anchored to the target.\n * This helps prevent resizing from looking very strange.\n * For instance, if the target edge is top and aligned with the left side then\n * the bottom and left values are returned so as the callou shrinks it shrinks towards that corner.\n *\n * @param {Rectangle} elementRectangle\n * @param {HTMLElement} hostElement\n * @param {RectangleEdge} targetEdge\n * @param {RectangleEdge} bounds\n * @param {RectangleEdge} [alignmentEdge]\n * @param {boolean} coverTarget\n * @returns {IPartialIRectangle}\n */\nfunction _finalizeElementPosition(\n  elementRectangle: Rectangle,\n  hostElement: HTMLElement,\n  targetEdge: RectangleEdge,\n  bounds?: Rectangle,\n  alignmentEdge?: RectangleEdge,\n  coverTarget?: boolean\n): IPartialIRectangle {\n  const returnValue: IPartialIRectangle = {};\n\n  const hostRect: Rectangle = _getRectangleFromElement(hostElement);\n  const elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  const elementEdgeString = RectangleEdge[elementEdge];\n  const returnEdge = _finalizeReturnEdge(\n    elementRectangle,\n    alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge,\n    bounds\n  );\n\n  returnValue[elementEdgeString] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);\n\n  return returnValue;\n}\n\n// Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.\n// We still want to position the beak based on it's midpoint which does not change. It will\n// be at (beakwidth / 2, beakwidth / 2)\nfunction _calculateActualBeakWidthInPixels(beakWidth: number): number {\n  return Math.sqrt(beakWidth * beakWidth * 2);\n}\n\n/**\n * Returns the appropriate IPositionData based on the props altered for RTL.\n * If directionalHintForRTL is passed in that is used if the page is RTL.\n * If a directionalHint is specified and no directionalHintForRTL is available and the page is RTL the hint will be flipped.\n * For instance bottomLeftEdge would become bottomRightEdge.\n * If there is no directionalHint passed in bottomAutoEdge is chosen automatically.\n *\n * @param {IPositionProps} props\n * @returns {IPositionDirectionalHintData}\n */\nfunction _getPositionData(\n  directionalHint: DirectionalHint = DirectionalHint.bottomAutoEdge,\n  directionalHintForRTL?: DirectionalHint,\n  previousPositions?: IPositionDirectionalHintData\n): IPositionDirectionalHintData {\n  if (previousPositions) {\n    return {\n      alignmentEdge: previousPositions.alignmentEdge,\n      isAuto: previousPositions.isAuto,\n      targetEdge: previousPositions.targetEdge\n    };\n  }\n  const positionInformation: IPositionDirectionalHintData = { ...DirectionalDictionary[directionalHint] };\n  if (getRTL()) {\n    // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.\n    if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {\n      positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;\n    }\n\n    return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;\n  }\n  return positionInformation;\n}\n\n/**\n * Get's the alignment data for the given information. This only really matters if the positioning is Auto.\n * If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to\n * the center of the page.\n *\n * @param {IPositionDirectionalHintData} positionData\n * @param {Rectangle} target\n * @param {Rectangle} boundingRect\n * @param {boolean} [coverTarget]\n * @returns {IPositionDirectionalHintData}\n */\nfunction _getAlignmentData(\n  positionData: IPositionDirectionalHintData,\n  target: Rectangle,\n  boundingRect: Rectangle,\n  coverTarget?: boolean,\n  alignTargetEdge?: boolean\n): IPositionDirectionalHintData {\n  if (positionData.isAuto) {\n    positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);\n  }\n\n  positionData.alignTargetEdge = alignTargetEdge;\n  return positionData;\n}\n\nfunction getClosestEdge(targetEdge: RectangleEdge, target: Rectangle, boundingRect: Rectangle): RectangleEdge {\n  const targetCenter: number = _getCenterValue(target, targetEdge);\n  const boundingCenter: number = _getCenterValue(boundingRect, targetEdge);\n  const { positiveEdge, negativeEdge } = _getFlankingEdges(targetEdge);\n  if (targetCenter <= boundingCenter) {\n    return positiveEdge;\n  } else {\n    return negativeEdge;\n  }\n}\n\nfunction _positionElementWithinBounds(\n  elementToPosition: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number,\n  directionalHintFixed?: boolean,\n  coverTarget?: boolean\n): IElementPosition {\n  const estimatedElementPosition: Rectangle = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);\n  if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {\n    return {\n      elementRectangle: estimatedElementPosition,\n      targetEdge: positionData.targetEdge,\n      alignmentEdge: positionData.alignmentEdge\n    };\n  } else {\n    return _adjustFitWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);\n  }\n}\n\nfunction _finalizeBeakPosition(\n  elementPosition: IElementPosition,\n  positionedBeak: Rectangle,\n  bounds?: Rectangle\n): ICalloutBeakPositionedInfo {\n  const targetEdge = elementPosition.targetEdge * -1;\n  // The \"host\" element that we will use to help position the beak.\n  const actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);\n  const returnValue: IPartialIRectangle = {};\n  const returnEdge = _finalizeReturnEdge(\n    elementPosition.elementRectangle,\n    elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge,\n    bounds\n  );\n\n  returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);\n\n  return {\n    elementPosition: { ...returnValue },\n    closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),\n    targetEdge: targetEdge\n  };\n}\n\nfunction _positionBeak(beakWidth: number, elementPosition: IElementPositionInfo): Rectangle {\n  const target = elementPosition.targetRectangle;\n  /**\n   * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and\n   * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,\n   * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels\n   * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.\n   * */\n  const { positiveEdge, negativeEdge } = _getFlankingEdges(elementPosition.targetEdge);\n  const beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);\n  const elementBounds = new Rectangle(\n    beakWidth / 2,\n    elementPosition.elementRectangle.width - beakWidth / 2,\n    beakWidth / 2,\n    elementPosition.elementRectangle.height - beakWidth / 2\n  );\n\n  let beakPosition: Rectangle = new Rectangle(0, beakWidth, 0, beakWidth);\n\n  beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);\n\n  beakPosition = _centerEdgeToPoint(\n    beakPosition,\n    elementPosition.targetEdge * -1,\n    beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle)\n  );\n\n  if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);\n  } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);\n  }\n\n  return beakPosition;\n}\n\nfunction _getRectangleFromElement(element: Element): Rectangle {\n  const clientRect: ClientRect = element.getBoundingClientRect();\n\n  return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);\n}\n\nfunction _getRectangleFromIRect(rect: IRectangle): Rectangle {\n  return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);\n}\n\nfunction _getTargetRect(bounds: Rectangle, target: Element | MouseEvent | IPoint | undefined): Rectangle {\n  let targetRectangle: Rectangle;\n  if (target) {\n    if ((target as MouseEvent).preventDefault) {\n      const ev = target as MouseEvent;\n      targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);\n    } else if ((target as Element).getBoundingClientRect) {\n      targetRectangle = _getRectangleFromElement(target as Element);\n      // HTMLImgElements can have x and y values. The check for it being a point must go last.\n    } else {\n      const point: IPoint = target as IPoint;\n      targetRectangle = new Rectangle(point.x, point.x, point.y, point.y);\n    }\n\n    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\n      const outOfBounds: RectangleEdge[] = _getOutOfBoundsEdges(targetRectangle, bounds);\n\n      for (const direction of outOfBounds) {\n        (targetRectangle as any)[RectangleEdge[direction]] = (bounds as any)[RectangleEdge[direction]];\n      }\n    }\n  } else {\n    targetRectangle = new Rectangle(0, 0, 0, 0);\n  }\n\n  return targetRectangle;\n}\n\n/**\n * If max height is less than zero it returns the bounds height instead.\n */\nfunction _getMaxHeightFromTargetRectangle(\n  targetRectangle: Rectangle,\n  targetEdge: DirectionalHint,\n  gapSpace: number,\n  bounds: Rectangle,\n  coverTarget?: boolean\n) {\n  let maxHeight = 0;\n  const directionalHint = DirectionalDictionary[targetEdge];\n\n  // If cover target is set, then the max height should be calculated using the opposite of the target edge since\n  // that's the direction that the callout will expand in.\n  // For instance, if the directionalhint is bottomLeftEdge then the callout will position so it's bottom edge\n  // is aligned with the bottom of the target and expand up towards the top of the screen and the calculated max height\n  // is (bottom of target) - (top of screen) - gapSpace.\n  const target = coverTarget ? directionalHint.targetEdge * -1 : directionalHint.targetEdge;\n\n  if (target === RectangleEdge.top) {\n    maxHeight = _getEdgeValue(targetRectangle, directionalHint.targetEdge) - bounds.top - gapSpace;\n  } else if (target === RectangleEdge.bottom) {\n    maxHeight = bounds.bottom - _getEdgeValue(targetRectangle, directionalHint.targetEdge) - gapSpace;\n  } else {\n    maxHeight = bounds.bottom - targetRectangle.top - gapSpace;\n  }\n\n  return maxHeight > 0 ? maxHeight : bounds.height;\n}\n\nfunction _positionElementRelative(\n  props: IPositionProps,\n  elementToPosition: HTMLElement,\n  boundingRect: Rectangle,\n  previousPositions?: IPositionedData\n): IElementPositionInfo {\n  const gap: number = props.gapSpace ? props.gapSpace : 0;\n  const targetRect: Rectangle = _getTargetRect(boundingRect, props.target);\n  const positionData: IPositionDirectionalHintData = _getAlignmentData(\n    _getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions)!,\n    targetRect,\n    boundingRect,\n    props.coverTarget,\n    props.alignTargetEdge\n  );\n  const positionedElement: IElementPosition = _positionElementWithinBounds(\n    _getRectangleFromElement(elementToPosition),\n    targetRect,\n    boundingRect,\n    positionData,\n    gap,\n    props.directionalHintFixed,\n    props.coverTarget\n  );\n  return { ...positionedElement, targetRectangle: targetRect };\n}\n\nfunction _finalizePositionData(\n  positionedElement: IElementPosition,\n  hostElement: HTMLElement,\n  bounds?: Rectangle,\n  coverTarget?: boolean\n): IPositionedData {\n  const finalizedElement: IPartialIRectangle = _finalizeElementPosition(\n    positionedElement.elementRectangle,\n    hostElement,\n    positionedElement.targetEdge,\n    bounds,\n    positionedElement.alignmentEdge,\n    coverTarget\n  );\n  return {\n    elementPosition: finalizedElement,\n    targetEdge: positionedElement.targetEdge,\n    alignmentEdge: positionedElement.alignmentEdge\n  };\n}\n\nfunction _positionElement(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: IPositionedData\n): IPositionedData {\n  const boundingRect: Rectangle = props.bounds\n    ? _getRectangleFromIRect(props.bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  const positionedElement: IElementPosition = _positionElementRelative(props, elementToPosition, boundingRect, previousPositions);\n  return _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget);\n}\n\nfunction _positionCallout(\n  props: ICalloutPositionProps,\n  hostElement: HTMLElement,\n  callout: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo\n): ICalloutPositionedInfo {\n  const beakWidth: number = props.isBeakVisible ? props.beakWidth || 0 : 0;\n  const gap: number = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);\n  const positionProps: IPositionProps = props;\n  positionProps.gapSpace = gap;\n  const boundingRect: Rectangle = props.bounds\n    ? _getRectangleFromIRect(props.bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  const positionedElement: IElementPositionInfo = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);\n  const beakPositioned: Rectangle = _positionBeak(beakWidth, positionedElement);\n  const finalizedBeakPosition: ICalloutBeakPositionedInfo = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);\n  return {\n    ..._finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget),\n    beakPosition: finalizedBeakPosition\n  };\n}\n// END PRIVATE FUNCTIONS\n\n/* tslint:disable:variable-name */\nexport const __positioningTestPackage = {\n  _finalizePositionData,\n  _finalizeBeakPosition,\n  _calculateActualBeakWidthInPixels,\n  _positionElementWithinBounds,\n  _positionBeak,\n  _getPositionData,\n  _getMaxHeightFromTargetRectangle\n};\n/* tslint:enable:variable-name */\n\n/**\n * Used to position an element relative to the given positioning props.\n * If positioning has been completed before, previousPositioningData\n * can be passed to ensure that the positioning element repositions based on\n * its previous targets rather than starting with directionalhint.\n *\n * @export\n * @param {IPositionProps} props\n * @param {HTMLElement} hostElement\n * @param {HTMLElement} elementToPosition\n * @param {IPositionedData} previousPositions\n * @returns\n */\nexport function positionElement(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: IPositionedData\n): IPositionedData {\n  return _positionElement(props, hostElement, elementToPosition, previousPositions);\n}\n\nexport function positionCallout(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo\n): ICalloutPositionedInfo {\n  return _positionCallout(props, hostElement, elementToPosition, previousPositions);\n}\n\n/**\n * Get's the maximum height that a rectangle can have in order to fit below or above a target.\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\n * of the target given.\n * If no bounds are provided then the window is treated as the bounds.\n */\nexport function getMaxHeight(\n  target: Element | MouseEvent | IPoint,\n  targetEdge: DirectionalHint,\n  gapSpace: number = 0,\n  bounds?: IRectangle,\n  coverTarget?: boolean\n): number {\n  const mouseTarget: MouseEvent = target as MouseEvent;\n  const elementTarget: Element = target as Element;\n  const pointTarget: IPoint = target as IPoint;\n  let targetRect: Rectangle;\n  const boundingRectangle = bounds\n    ? _getRectangleFromIRect(bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n\n  if (mouseTarget.stopPropagation) {\n    targetRect = new Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);\n  } else if (pointTarget.x !== undefined && pointTarget.y !== undefined) {\n    targetRect = new Rectangle(pointTarget.x, pointTarget.x, pointTarget.y, pointTarget.y);\n  } else {\n    targetRect = _getRectangleFromElement(elementTarget);\n  }\n\n  return _getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle, coverTarget);\n}\n\n/**\n * Returns the opposite edge of the given RectangleEdge.\n */\nexport function getOppositeEdge(edge: RectangleEdge): RectangleEdge {\n  return edge * -1;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}