{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, KeyCodes, getId, getNativeProps, divProperties, classNamesFunction, warn } from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { PivotItem } from './PivotItem';\nimport { PivotLinkFormat } from './Pivot.types';\nimport { PivotLinkSize } from './Pivot.types';\nimport { Icon } from '../../Icon';\nvar getClassNames = classNamesFunction();\nvar PivotItemType = React.createElement(PivotItem, null).type;\n/**\n *  Usage:\n *\n *     <Pivot>\n *       <PivotItem headerText=\"Foo\">\n *         <Label>Pivot #1</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bar\">\n *         <Label>Pivot #2</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bas\">\n *         <Label>Pivot #3</Label>\n *       </PivotItem>\n *     </Pivot>\n */\n\nvar PivotBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PivotBase, _super);\n\n  function PivotBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n\n    _this._renderPivotLink = function (linkCollection, link, selectedKey) {\n      var itemKey = link.itemKey,\n          headerButtonProps = link.headerButtonProps;\n      var tabId = linkCollection.keyToTabIdMapping[itemKey];\n      var onRenderItemLink = link.onRenderItemLink;\n      var linkContent;\n      var isSelected = selectedKey === itemKey;\n\n      if (onRenderItemLink) {\n        linkContent = onRenderItemLink(link, _this._renderLinkContent);\n      } else {\n        linkContent = _this._renderLinkContent(link);\n      }\n\n      var contentString = link.headerText || '';\n      contentString += link.itemCount ? ' (' + link.itemCount + ')' : ''; // Adding space supplementary for icon\n\n      contentString += link.itemIcon ? ' xx' : '';\n      return React.createElement(CommandButton, tslib_1.__assign({}, headerButtonProps, {\n        id: tabId,\n        key: itemKey,\n        className: isSelected ? _this._classNames.linkIsSelected : _this._classNames.link,\n        onClick: _this._onLinkClick.bind(_this, itemKey),\n        onKeyPress: _this._onKeyPress.bind(_this, itemKey),\n        ariaLabel: link.ariaLabel,\n        role: \"tab\",\n        \"aria-selected\": isSelected,\n        name: link.headerText,\n        keytipProps: link.keytipProps,\n        \"data-content\": contentString\n      }), linkContent);\n    };\n\n    _this._renderLinkContent = function (link) {\n      var itemCount = link.itemCount,\n          itemIcon = link.itemIcon,\n          headerText = link.headerText;\n      var classNames = _this._classNames;\n      return React.createElement(\"span\", {\n        className: classNames.linkContent\n      }, itemIcon !== undefined && React.createElement(\"span\", {\n        className: classNames.icon\n      }, React.createElement(Icon, {\n        iconName: itemIcon\n      })), headerText !== undefined && React.createElement(\"span\", {\n        className: classNames.text\n      }, \" \", link.headerText), itemCount !== undefined && React.createElement(\"span\", {\n        className: classNames.count\n      }, \" (\", itemCount, \")\"));\n    };\n\n    _this._warnDeprecations({\n      initialSelectedKey: 'defaultSelectedKey',\n      initialSelectedIndex: 'defaultSelectedIndex'\n    });\n\n    _this._pivotId = getId('Pivot');\n\n    var links = _this._getPivotLinks(props).links;\n\n    var _a = props.defaultSelectedKey,\n        defaultSelectedKey = _a === void 0 ? props.initialSelectedKey : _a,\n        _b = props.defaultSelectedIndex,\n        defaultSelectedIndex = _b === void 0 ? props.initialSelectedIndex : _b;\n    var selectedKey;\n\n    if (defaultSelectedKey) {\n      selectedKey = defaultSelectedKey;\n    } else if (typeof defaultSelectedIndex === 'number') {\n      selectedKey = links[defaultSelectedIndex].itemKey;\n    } else if (links.length) {\n      selectedKey = links[0].itemKey;\n    }\n\n    _this.state = {\n      selectedKey: selectedKey\n    };\n    return _this;\n  }\n  /**\n   * Sets focus to the first pivot tab.\n   */\n\n\n  PivotBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n\n  PivotBase.prototype.render = function () {\n    var linkCollection = this._getPivotLinks(this.props);\n\n    var selectedKey = this._getSelectedKey(linkCollection);\n\n    var divProps = getNativeProps(this.props, divProperties);\n    this._classNames = this._getClassNames(this.props);\n    return React.createElement(\"div\", tslib_1.__assign({}, divProps), this._renderPivotLinks(linkCollection, selectedKey), selectedKey && this._renderPivotItem(linkCollection, selectedKey));\n  };\n\n  PivotBase.prototype._getSelectedKey = function (linkCollection) {\n    var propsSelectedKey = this.props.selectedKey;\n\n    if (this._isKeyValid(linkCollection, propsSelectedKey) || propsSelectedKey === null) {\n      return propsSelectedKey;\n    }\n\n    var stateSelectedKey = this.state.selectedKey;\n\n    if (this._isKeyValid(linkCollection, stateSelectedKey)) {\n      return stateSelectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  };\n  /**\n   * Renders the set of links to route between pivots\n   */\n\n\n  PivotBase.prototype._renderPivotLinks = function (linkCollection, selectedKey) {\n    var _this = this;\n\n    var items = linkCollection.links.map(function (l) {\n      return _this._renderPivotLink(linkCollection, l, selectedKey);\n    });\n    return React.createElement(FocusZone, {\n      componentRef: this._focusZone,\n      direction: FocusZoneDirection.horizontal\n    }, React.createElement(\"div\", {\n      className: this._classNames.root,\n      role: \"tablist\"\n    }, items));\n  };\n  /**\n   * Renders the current Pivot Item\n   */\n\n\n  PivotBase.prototype._renderPivotItem = function (linkCollection, itemKey) {\n    if (this.props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    var index = linkCollection.keyToIndexMapping[itemKey];\n    var selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n    return React.createElement(\"div\", {\n      role: \"tabpanel\",\n      \"aria-labelledby\": selectedTabId,\n      className: this._classNames.itemContainer\n    }, React.Children.toArray(this.props.children)[index]);\n  };\n  /**\n   * Gets the set of PivotLinks as array of IPivotItemProps\n   * The set of Links is determined by child components of type PivotItem\n   */\n\n\n  PivotBase.prototype._getPivotLinks = function (props) {\n    var _this = this;\n\n    var result = {\n      links: [],\n      keyToIndexMapping: {},\n      keyToTabIdMapping: {}\n    };\n    React.Children.map(React.Children.toArray(props.children), function (child, index) {\n      if (typeof child === 'object' && child.type === PivotItemType) {\n        var pivotItem = child;\n\n        var _a = pivotItem.props,\n            linkText = _a.linkText,\n            pivotItemProps = tslib_1.__rest(_a, [\"linkText\"]);\n\n        var itemKey = pivotItem.props.itemKey || index.toString();\n        result.links.push(tslib_1.__assign({\n          // Use linkText (deprecated) if headerText is not provided\n          headerText: linkText\n        }, pivotItemProps, {\n          itemKey: itemKey\n        }));\n        result.keyToIndexMapping[itemKey] = index;\n        result.keyToTabIdMapping[itemKey] = _this._getTabId(itemKey, index);\n      } else {\n        warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n      }\n    });\n    return result;\n  };\n  /**\n   * Generates the Id for the tab button.\n   */\n\n\n  PivotBase.prototype._getTabId = function (itemKey, index) {\n    if (this.props.getTabId) {\n      return this.props.getTabId(itemKey, index);\n    }\n\n    return this._pivotId + (\"-Tab\" + index);\n  };\n  /**\n   * whether the key exists in the pivot items.\n   */\n\n\n  PivotBase.prototype._isKeyValid = function (linkCollection, itemKey) {\n    return itemKey !== undefined && itemKey !== null && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  };\n  /**\n   * Handles the onClick event on PivotLinks\n   */\n\n\n  PivotBase.prototype._onLinkClick = function (itemKey, ev) {\n    ev.preventDefault();\n\n    this._updateSelectedItem(itemKey, ev);\n  };\n  /**\n   * Handle the onKeyPress eventon the PivotLinks\n   */\n\n\n  PivotBase.prototype._onKeyPress = function (itemKey, ev) {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n\n      this._updateSelectedItem(itemKey);\n    }\n  };\n  /**\n   * Updates the state with the new selected index\n   */\n\n\n  PivotBase.prototype._updateSelectedItem = function (itemKey, ev) {\n    this.setState({\n      selectedKey: itemKey\n    });\n\n    var linkCollection = this._getPivotLinks(this.props);\n\n    if (this.props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      var index = linkCollection.keyToIndexMapping[itemKey]; // React.Element<any> cannot directly convert to PivotItem.\n\n      var item = React.Children.toArray(this.props.children)[index];\n\n      if (typeof item === 'object' && item.type === PivotItemType) {\n        this.props.onLinkClick(item, ev);\n      }\n    }\n  };\n\n  PivotBase.prototype._getClassNames = function (props) {\n    var theme = props.theme;\n    var rootIsLarge = props.linkSize === PivotLinkSize.large;\n    var rootIsTabs = props.linkFormat === PivotLinkFormat.tabs;\n    return getClassNames(props.styles, {\n      theme: theme,\n      rootIsLarge: rootIsLarge,\n      rootIsTabs: rootIsTabs\n    });\n  };\n\n  return PivotBase;\n}(BaseComponent);\n\nexport { PivotBase };","map":{"version":3,"sources":["components/Pivot/Pivot.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, KeyCodes, getId, getNativeProps, divProperties, classNamesFunction, warn } from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { IPivotProps, IPivotStyleProps, IPivotStyles } from './Pivot.types';\nimport { IPivotItemProps } from './PivotItem.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { PivotItem } from './PivotItem';\nimport { PivotLinkFormat } from './Pivot.types';\nimport { PivotLinkSize } from './Pivot.types';\nimport { Icon } from '../../Icon';\n\nconst getClassNames = classNamesFunction<IPivotStyleProps, IPivotStyles>();\n\nexport interface IPivotState {\n  selectedKey: string | undefined;\n}\n\nconst PivotItemType = (<PivotItem /> as React.ReactElement<IPivotItemProps>).type;\n\ntype PivotLinkCollection = {\n  links: IPivotItemProps[];\n  keyToIndexMapping: { [key: string]: number };\n  keyToTabIdMapping: { [key: string]: string };\n};\n\n/**\n *  Usage:\n *\n *     <Pivot>\n *       <PivotItem headerText=\"Foo\">\n *         <Label>Pivot #1</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bar\">\n *         <Label>Pivot #2</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bas\">\n *         <Label>Pivot #3</Label>\n *       </PivotItem>\n *     </Pivot>\n */\nexport class PivotBase extends BaseComponent<IPivotProps, IPivotState> {\n  private _pivotId: string;\n  private _focusZone = React.createRef<FocusZone>();\n  private _classNames: { [key in keyof IPivotStyles]: string };\n\n  constructor(props: IPivotProps) {\n    super(props);\n\n    this._warnDeprecations({\n      initialSelectedKey: 'defaultSelectedKey',\n      initialSelectedIndex: 'defaultSelectedIndex'\n    });\n\n    this._pivotId = getId('Pivot');\n    const links: IPivotItemProps[] = this._getPivotLinks(props).links;\n\n    const { defaultSelectedKey = props.initialSelectedKey, defaultSelectedIndex = props.initialSelectedIndex } = props;\n\n    let selectedKey: string | undefined;\n\n    if (defaultSelectedKey) {\n      selectedKey = defaultSelectedKey;\n    } else if (typeof defaultSelectedIndex === 'number') {\n      selectedKey = links[defaultSelectedIndex].itemKey!;\n    } else if (links.length) {\n      selectedKey = links[0].itemKey!;\n    }\n\n    this.state = {\n      selectedKey\n    };\n  }\n\n  /**\n   * Sets focus to the first pivot tab.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    const linkCollection = this._getPivotLinks(this.props);\n    const selectedKey = this._getSelectedKey(linkCollection);\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    this._classNames = this._getClassNames(this.props);\n\n    return (\n      <div {...divProps}>\n        {this._renderPivotLinks(linkCollection, selectedKey)}\n        {selectedKey && this._renderPivotItem(linkCollection, selectedKey)}\n      </div>\n    );\n  }\n\n  private _getSelectedKey(linkCollection: PivotLinkCollection) {\n    const { selectedKey: propsSelectedKey } = this.props;\n\n    if (this._isKeyValid(linkCollection, propsSelectedKey) || propsSelectedKey === null) {\n      return propsSelectedKey;\n    }\n\n    const { selectedKey: stateSelectedKey } = this.state;\n    if (this._isKeyValid(linkCollection, stateSelectedKey)) {\n      return stateSelectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Renders the set of links to route between pivots\n   */\n  private _renderPivotLinks(linkCollection: PivotLinkCollection, selectedKey: string | null | undefined): JSX.Element {\n    const items = linkCollection.links.map(l => this._renderPivotLink(linkCollection, l, selectedKey));\n\n    return (\n      <FocusZone componentRef={this._focusZone} direction={FocusZoneDirection.horizontal}>\n        <div className={this._classNames.root} role=\"tablist\">\n          {items}\n        </div>\n      </FocusZone>\n    );\n  }\n\n  private _renderPivotLink = (\n    linkCollection: PivotLinkCollection,\n    link: IPivotItemProps,\n    selectedKey: string | null | undefined\n  ): JSX.Element => {\n    const { itemKey, headerButtonProps } = link;\n    const tabId = linkCollection.keyToTabIdMapping[itemKey!];\n    const { onRenderItemLink } = link;\n    let linkContent: JSX.Element | null;\n    const isSelected: boolean = selectedKey === itemKey;\n\n    if (onRenderItemLink) {\n      linkContent = onRenderItemLink(link, this._renderLinkContent);\n    } else {\n      linkContent = this._renderLinkContent(link);\n    }\n\n    let contentString = link.headerText || '';\n    contentString += link.itemCount ? ' (' + link.itemCount + ')' : '';\n    // Adding space supplementary for icon\n    contentString += link.itemIcon ? ' xx' : '';\n\n    return (\n      <CommandButton\n        {...headerButtonProps}\n        id={tabId}\n        key={itemKey}\n        className={isSelected ? this._classNames.linkIsSelected : this._classNames.link}\n        onClick={this._onLinkClick.bind(this, itemKey)}\n        onKeyPress={this._onKeyPress.bind(this, itemKey)}\n        ariaLabel={link.ariaLabel}\n        role=\"tab\"\n        aria-selected={isSelected}\n        name={link.headerText}\n        keytipProps={link.keytipProps}\n        data-content={contentString}\n      >\n        {linkContent}\n      </CommandButton>\n    );\n  };\n\n  private _renderLinkContent = (link: IPivotItemProps): JSX.Element => {\n    const { itemCount, itemIcon, headerText } = link;\n    const classNames = this._classNames;\n\n    return (\n      <span className={classNames.linkContent}>\n        {itemIcon !== undefined && (\n          <span className={classNames.icon}>\n            <Icon iconName={itemIcon} />\n          </span>\n        )}\n        {headerText !== undefined && <span className={classNames.text}> {link.headerText}</span>}\n        {itemCount !== undefined && <span className={classNames.count}> ({itemCount})</span>}\n      </span>\n    );\n  };\n\n  /**\n   * Renders the current Pivot Item\n   */\n  private _renderPivotItem(linkCollection: PivotLinkCollection, itemKey: string | undefined): JSX.Element | null {\n    if (this.props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    const index = linkCollection.keyToIndexMapping[itemKey];\n    const selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n\n    return (\n      <div role=\"tabpanel\" aria-labelledby={selectedTabId} className={this._classNames.itemContainer}>\n        {React.Children.toArray(this.props.children)[index]}\n      </div>\n    );\n  }\n\n  /**\n   * Gets the set of PivotLinks as array of IPivotItemProps\n   * The set of Links is determined by child components of type PivotItem\n   */\n  private _getPivotLinks(props: IPivotProps): PivotLinkCollection {\n    const result: PivotLinkCollection = {\n      links: [],\n      keyToIndexMapping: {},\n      keyToTabIdMapping: {}\n    };\n\n    React.Children.map(React.Children.toArray(props.children), (child: any, index: number) => {\n      if (typeof child === 'object' && child.type === PivotItemType) {\n        const pivotItem = child as PivotItem;\n        const { linkText, ...pivotItemProps } = pivotItem.props;\n        const itemKey = pivotItem.props.itemKey || index.toString();\n\n        result.links.push({\n          // Use linkText (deprecated) if headerText is not provided\n          headerText: linkText,\n          ...pivotItemProps,\n          itemKey: itemKey\n        });\n        result.keyToIndexMapping[itemKey] = index;\n        result.keyToTabIdMapping[itemKey] = this._getTabId(itemKey, index);\n      } else {\n        warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Generates the Id for the tab button.\n   */\n  private _getTabId(itemKey: string, index: number): string {\n    if (this.props.getTabId) {\n      return this.props.getTabId(itemKey, index);\n    }\n\n    return this._pivotId + `-Tab${index}`;\n  }\n\n  /**\n   * whether the key exists in the pivot items.\n   */\n  private _isKeyValid(linkCollection: PivotLinkCollection, itemKey: string | null | undefined): boolean {\n    return itemKey !== undefined && itemKey !== null && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  }\n\n  /**\n   * Handles the onClick event on PivotLinks\n   */\n  private _onLinkClick(itemKey: string, ev: React.MouseEvent<HTMLElement>): void {\n    ev.preventDefault();\n    this._updateSelectedItem(itemKey, ev);\n  }\n\n  /**\n   * Handle the onKeyPress eventon the PivotLinks\n   */\n  private _onKeyPress(itemKey: string, ev: React.KeyboardEvent<HTMLElement>): void {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      this._updateSelectedItem(itemKey);\n    }\n  }\n\n  /**\n   * Updates the state with the new selected index\n   */\n  private _updateSelectedItem(itemKey: string, ev?: React.MouseEvent<HTMLElement>): void {\n    this.setState({\n      selectedKey: itemKey\n    });\n\n    const linkCollection = this._getPivotLinks(this.props);\n\n    if (this.props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      const index = linkCollection.keyToIndexMapping[itemKey];\n\n      // React.Element<any> cannot directly convert to PivotItem.\n      const item = React.Children.toArray(this.props.children)[index] as any;\n\n      if (typeof item === 'object' && item.type === PivotItemType) {\n        this.props.onLinkClick(item as PivotItem, ev);\n      }\n    }\n  }\n\n  private _getClassNames(props: IPivotProps): { [key in keyof IPivotStyles]: string } {\n    const { theme } = props;\n    const rootIsLarge: boolean = props.linkSize === PivotLinkSize.large;\n    const rootIsTabs: boolean = props.linkFormat === PivotLinkFormat.tabs;\n\n    return getClassNames(props.styles!, {\n      theme: theme!,\n      rootIsLarge,\n      rootIsTabs\n    });\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}