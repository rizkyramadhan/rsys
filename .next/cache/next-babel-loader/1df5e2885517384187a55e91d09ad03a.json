{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { AutoScroll, BaseComponent, classNamesFunction, findScrollableParent, getDistanceBetweenPoints, getRTL } from '../../Utilities';\nvar getClassNames = classNamesFunction(); // We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\n\nvar MIN_DRAG_DISTANCE = 5;\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\n\nvar MarqueeSelectionBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MarqueeSelectionBase, _super);\n\n  function MarqueeSelectionBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n\n    _this._onMouseDown = function (ev) {\n      var _a = _this.props,\n          isEnabled = _a.isEnabled,\n          onShouldStartSelection = _a.onShouldStartSelection; // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n\n      if (_this._isMouseEventOnScrollbar(ev)) {\n        return;\n      }\n\n      if (_this._isInSelectionToggle(ev)) {\n        return;\n      }\n\n      if (!_this._isTouch && isEnabled && !_this._isDragStartInSelection(ev) && (!onShouldStartSelection || onShouldStartSelection(ev))) {\n        if (_this._scrollableSurface && ev.button === 0 && _this._root.current) {\n          _this._selectedIndicies = {};\n          _this._preservedIndicies = undefined;\n\n          _this._events.on(window, 'mousemove', _this._onAsyncMouseMove, true);\n\n          _this._events.on(_this._scrollableParent, 'scroll', _this._onAsyncMouseMove);\n\n          _this._events.on(window, 'click', _this._onMouseUp, true);\n\n          _this._autoScroll = new AutoScroll(_this._root.current);\n          _this._scrollTop = _this._scrollableSurface.scrollTop;\n          _this._rootRect = _this._root.current.getBoundingClientRect();\n\n          _this._onMouseMove(ev);\n        }\n      }\n    };\n\n    _this._onTouchStart = function (ev) {\n      _this._isTouch = true;\n\n      _this._async.setTimeout(function () {\n        _this._isTouch = false;\n      }, 0);\n    };\n\n    _this._onPointerDown = function (ev) {\n      if (ev.pointerType === 'touch') {\n        _this._isTouch = true;\n\n        _this._async.setTimeout(function () {\n          _this._isTouch = false;\n        }, 0);\n      }\n    };\n\n    _this.state = {\n      dragRect: undefined\n    };\n    return _this;\n  }\n\n  MarqueeSelectionBase.prototype.componentDidMount = function () {\n    this._scrollableParent = findScrollableParent(this._root.current);\n    this._scrollableSurface = this._scrollableParent === window ? document.body : this._scrollableParent; // When scroll events come from window, we need to read scrollTop values from the body.\n\n    var hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n\n    this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n\n    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n\n    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n  };\n\n  MarqueeSelectionBase.prototype.componentWillUnmount = function () {\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n  };\n\n  MarqueeSelectionBase.prototype.render = function () {\n    var _a = this.props,\n        rootProps = _a.rootProps,\n        children = _a.children,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles;\n    var dragRect = this.state.dragRect;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    return React.createElement(\"div\", tslib_1.__assign({}, rootProps, {\n      className: classNames.root,\n      ref: this._root\n    }), children, dragRect && React.createElement(\"div\", {\n      className: classNames.dragMask\n    }), dragRect && React.createElement(\"div\", {\n      className: classNames.box,\n      style: dragRect\n    }, React.createElement(\"div\", {\n      className: classNames.boxFill\n    })));\n  };\n  /** Determine if the mouse event occured on a scrollbar of the target element. */\n\n\n  MarqueeSelectionBase.prototype._isMouseEventOnScrollbar = function (ev) {\n    var targetElement = ev.target;\n    var targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n\n    if (targetScrollbarWidth) {\n      var targetRect = targetElement.getBoundingClientRect(); // Check vertical scroll\n\n      if (getRTL()) {\n        if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n          return true;\n        }\n      } else {\n        if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n          return true;\n        }\n      } // Check horizontal scroll\n\n\n      if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MarqueeSelectionBase.prototype._getRootRect = function () {\n    return {\n      left: this._rootRect.left,\n      top: this._rootRect.top + (this._scrollTop - this._scrollableSurface.scrollTop),\n      width: this._rootRect.width,\n      height: this._rootRect.height\n    };\n  };\n\n  MarqueeSelectionBase.prototype._onAsyncMouseMove = function (ev) {\n    var _this = this;\n\n    this._async.requestAnimationFrame(function () {\n      _this._onMouseMove(ev);\n    });\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  MarqueeSelectionBase.prototype._onMouseMove = function (ev) {\n    if (!this._autoScroll) {\n      return;\n    }\n\n    if (ev.clientX !== undefined) {\n      this._lastMouseEvent = ev;\n    }\n\n    var rootRect = this._getRootRect();\n\n    var currentPoint = {\n      x: ev.clientX - rootRect.left,\n      y: ev.clientY - rootRect.top\n    };\n\n    if (!this._dragOrigin) {\n      this._dragOrigin = currentPoint;\n    }\n\n    if (ev.buttons !== undefined && ev.buttons === 0) {\n      this._onMouseUp(ev);\n    } else {\n      if (this.state.dragRect || getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n        if (!this.state.dragRect) {\n          var selection = this.props.selection;\n\n          if (!ev.shiftKey) {\n            selection.setAllSelected(false);\n          }\n\n          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n        } // We need to constrain the current point to the rootRect boundaries.\n\n\n        var constrainedPoint = this.props.isDraggingConstrainedToRoot ? {\n          x: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent.clientX - rootRect.left)),\n          y: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent.clientY - rootRect.top))\n        } : {\n          x: this._lastMouseEvent.clientX - rootRect.left,\n          y: this._lastMouseEvent.clientY - rootRect.top\n        };\n        var dragRect = {\n          left: Math.min(this._dragOrigin.x, constrainedPoint.x),\n          top: Math.min(this._dragOrigin.y, constrainedPoint.y),\n          width: Math.abs(constrainedPoint.x - this._dragOrigin.x),\n          height: Math.abs(constrainedPoint.y - this._dragOrigin.y)\n        };\n\n        this._evaluateSelection(dragRect, rootRect);\n\n        this.setState({\n          dragRect: dragRect\n        });\n      }\n    }\n\n    return false;\n  };\n\n  MarqueeSelectionBase.prototype._onMouseUp = function (ev) {\n    this._events.off(window);\n\n    this._events.off(this._scrollableParent, 'scroll');\n\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n\n    this._autoScroll = this._dragOrigin = this._lastMouseEvent = this._selectedIndicies = this._itemRectCache = undefined;\n\n    if (this.state.dragRect) {\n      this.setState({\n        dragRect: undefined\n      });\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n\n  MarqueeSelectionBase.prototype._isPointInRectangle = function (rectangle, point) {\n    return rectangle.top < point.y && rectangle.bottom > point.y && rectangle.left < point.x && rectangle.right > point.x;\n  };\n  /**\n   * We do not want to start the marquee if we're trying to marquee\n   * from within an existing marquee selection.\n   */\n\n\n  MarqueeSelectionBase.prototype._isDragStartInSelection = function (ev) {\n    var selection = this.props.selection;\n\n    if (!this._root.current || selection && selection.getSelectedCount() === 0) {\n      return false;\n    }\n\n    var allElements = this._root.current.querySelectorAll('[data-selection-index]');\n\n    for (var i = 0; i < allElements.length; i++) {\n      var element = allElements[i];\n      var index = Number(element.getAttribute('data-selection-index'));\n\n      if (selection.isIndexSelected(index)) {\n        var itemRect = element.getBoundingClientRect();\n\n        if (this._isPointInRectangle(itemRect, {\n          x: ev.clientX,\n          y: ev.clientY\n        })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  MarqueeSelectionBase.prototype._isInSelectionToggle = function (ev) {\n    var element = ev.target;\n\n    while (element && element !== this._root.current) {\n      if (element.getAttribute('data-selection-toggle') === 'true') {\n        return true;\n      }\n\n      element = element.parentElement;\n    }\n\n    return false;\n  };\n\n  MarqueeSelectionBase.prototype._evaluateSelection = function (dragRect, rootRect) {\n    // Break early if we don't need to evaluate.\n    if (!dragRect || !this._root.current) {\n      return;\n    }\n\n    var selection = this.props.selection;\n\n    var allElements = this._root.current.querySelectorAll('[data-selection-index]');\n\n    if (!this._itemRectCache) {\n      this._itemRectCache = {};\n    }\n\n    for (var i = 0; i < allElements.length; i++) {\n      var element = allElements[i];\n      var index = element.getAttribute('data-selection-index'); // Pull the memoized rectangle for the item, or the get the rect and memoize.\n\n      var itemRect = this._itemRectCache[index];\n\n      if (!itemRect) {\n        itemRect = element.getBoundingClientRect(); // Normalize the item rect to the dragRect coordinates.\n\n        itemRect = {\n          left: itemRect.left - rootRect.left,\n          top: itemRect.top - rootRect.top,\n          width: itemRect.width,\n          height: itemRect.height,\n          right: itemRect.left - rootRect.left + itemRect.width,\n          bottom: itemRect.top - rootRect.top + itemRect.height\n        };\n\n        if (itemRect.width > 0 && itemRect.height > 0) {\n          this._itemRectCache[index] = itemRect;\n        }\n      }\n\n      if (itemRect.top < dragRect.top + dragRect.height && itemRect.bottom > dragRect.top && itemRect.left < dragRect.left + dragRect.width && itemRect.right > dragRect.left) {\n        this._selectedIndicies[index] = true;\n      } else {\n        delete this._selectedIndicies[index];\n      }\n    } // set previousSelectedIndices to be all of the selected indices from last time\n\n\n    var previousSelectedIndices = this._allSelectedIndices || {};\n    this._allSelectedIndices = {}; // set all indices that are supposed to be selected in _allSelectedIndices\n\n    for (var index in this._selectedIndicies) {\n      if (this._selectedIndicies.hasOwnProperty(index)) {\n        this._allSelectedIndices[index] = true;\n      }\n    }\n\n    if (this._preservedIndicies) {\n      for (var _i = 0, _a = this._preservedIndicies; _i < _a.length; _i++) {\n        var index = _a[_i];\n        this._allSelectedIndices[index] = true;\n      }\n    } // check if needs to update selection, only when current _allSelectedIndices\n    // is different than previousSelectedIndices\n\n\n    var needToUpdate = false;\n\n    for (var index in this._allSelectedIndices) {\n      if (this._allSelectedIndices[index] !== previousSelectedIndices[index]) {\n        needToUpdate = true;\n        break;\n      }\n    }\n\n    if (!needToUpdate) {\n      for (var index in previousSelectedIndices) {\n        if (this._allSelectedIndices[index] !== previousSelectedIndices[index]) {\n          needToUpdate = true;\n          break;\n        }\n      }\n    } // only update selection when needed\n\n\n    if (needToUpdate) {\n      // Stop change events, clear selection to re-populate.\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n\n      for (var _b = 0, _c = _Object$keys(this._allSelectedIndices); _b < _c.length; _b++) {\n        var index = _c[_b];\n        selection.setIndexSelected(Number(index), true, false);\n      }\n\n      selection.setChangeEvents(true);\n    }\n  };\n\n  MarqueeSelectionBase.defaultProps = {\n    rootTagName: 'div',\n    rootProps: {},\n    isEnabled: true\n  };\n  return MarqueeSelectionBase;\n}(BaseComponent);\n\nexport { MarqueeSelectionBase };","map":{"version":3,"sources":["components/MarqueeSelection/MarqueeSelection.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  AutoScroll,\n  BaseComponent,\n  IPoint,\n  IRectangle,\n  classNamesFunction,\n  findScrollableParent,\n  getDistanceBetweenPoints,\n  getRTL\n} from '../../Utilities';\n\nimport { IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\n\nconst getClassNames = classNamesFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>();\n\nexport interface IMarqueeSelectionState {\n  dragOrigin?: IPoint;\n  dragRect?: IRectangle;\n}\n\n// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\nconst MIN_DRAG_DISTANCE = 5;\n\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\nexport class MarqueeSelectionBase extends BaseComponent<IMarqueeSelectionProps, IMarqueeSelectionState> {\n  public static defaultProps = {\n    rootTagName: 'div',\n    rootProps: {},\n    isEnabled: true\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragOrigin: IPoint | undefined;\n  private _rootRect: IRectangle;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _autoScroll: AutoScroll | undefined;\n  private _selectedIndicies: { [key: string]: boolean } | undefined;\n  private _preservedIndicies: number[] | undefined;\n  private _itemRectCache: { [key: string]: IRectangle } | undefined;\n  private _allSelectedIndices: { [key: string]: boolean } | undefined;\n  private _scrollableParent: HTMLElement;\n  private _scrollableSurface: HTMLElement;\n  private _scrollTop: number;\n  private _isTouch: boolean;\n\n  constructor(props: IMarqueeSelectionProps) {\n    super(props);\n\n    this.state = {\n      dragRect: undefined\n    };\n  }\n\n  public componentDidMount(): void {\n    this._scrollableParent = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollableSurface = this._scrollableParent === (window as any) ? document.body : this._scrollableParent;\n    // When scroll events come from window, we need to read scrollTop values from the body.\n\n    const hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n\n    this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n  }\n\n  public render(): JSX.Element {\n    const { rootProps, children, theme, className, styles } = this.props;\n    const { dragRect } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className\n    });\n\n    return (\n      <div {...rootProps} className={classNames.root} ref={this._root}>\n        {children}\n        {dragRect && <div className={classNames.dragMask} />}\n        {dragRect && (\n          <div className={classNames.box} style={dragRect}>\n            <div className={classNames.boxFill} />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /** Determine if the mouse event occured on a scrollbar of the target element. */\n  private _isMouseEventOnScrollbar(ev: MouseEvent): boolean {\n    const targetElement = ev.target as HTMLElement;\n    const targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n\n    if (targetScrollbarWidth) {\n      const targetRect = targetElement.getBoundingClientRect();\n\n      // Check vertical scroll\n      if (getRTL()) {\n        if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n          return true;\n        }\n      } else {\n        if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n          return true;\n        }\n      }\n\n      // Check horizontal scroll\n      if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseDown = (ev: MouseEvent): void => {\n    const { isEnabled, onShouldStartSelection } = this.props;\n\n    // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n    if (this._isMouseEventOnScrollbar(ev)) {\n      return;\n    }\n\n    if (this._isInSelectionToggle(ev)) {\n      return;\n    }\n\n    if (!this._isTouch && isEnabled && !this._isDragStartInSelection(ev) && (!onShouldStartSelection || onShouldStartSelection(ev))) {\n      if (this._scrollableSurface && ev.button === 0 && this._root.current) {\n        this._selectedIndicies = {};\n        this._preservedIndicies = undefined;\n        this._events.on(window, 'mousemove', this._onAsyncMouseMove, true);\n        this._events.on(this._scrollableParent, 'scroll', this._onAsyncMouseMove);\n        this._events.on(window, 'click', this._onMouseUp, true);\n\n        this._autoScroll = new AutoScroll(this._root.current);\n        this._scrollTop = this._scrollableSurface.scrollTop;\n        this._rootRect = this._root.current.getBoundingClientRect();\n\n        this._onMouseMove(ev);\n      }\n    }\n  };\n\n  private _onTouchStart = (ev: TouchEvent): void => {\n    this._isTouch = true;\n\n    this._async.setTimeout(() => {\n      this._isTouch = false;\n    }, 0);\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._isTouch = true;\n\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 0);\n    }\n  };\n\n  private _getRootRect(): IRectangle {\n    return {\n      left: this._rootRect.left,\n      top: this._rootRect.top + (this._scrollTop - this._scrollableSurface.scrollTop),\n      width: this._rootRect.width,\n      height: this._rootRect.height\n    };\n  }\n\n  private _onAsyncMouseMove(ev: MouseEvent): void {\n    this._async.requestAnimationFrame(() => {\n      this._onMouseMove(ev);\n    });\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  private _onMouseMove(ev: MouseEvent): boolean | undefined {\n    if (!this._autoScroll) {\n      return;\n    }\n\n    if (ev.clientX !== undefined) {\n      this._lastMouseEvent = ev;\n    }\n\n    const rootRect = this._getRootRect();\n    const currentPoint = { x: ev.clientX - rootRect.left, y: ev.clientY - rootRect.top };\n\n    if (!this._dragOrigin) {\n      this._dragOrigin = currentPoint;\n    }\n\n    if (ev.buttons !== undefined && ev.buttons === 0) {\n      this._onMouseUp(ev);\n    } else {\n      if (this.state.dragRect || getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n        if (!this.state.dragRect) {\n          const { selection } = this.props;\n\n          if (!ev.shiftKey) {\n            selection.setAllSelected(false);\n          }\n\n          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n        }\n\n        // We need to constrain the current point to the rootRect boundaries.\n        const constrainedPoint = this.props.isDraggingConstrainedToRoot\n          ? {\n              x: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent!.clientX - rootRect.left)),\n              y: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent!.clientY - rootRect.top))\n            }\n          : {\n              x: this._lastMouseEvent!.clientX - rootRect.left,\n              y: this._lastMouseEvent!.clientY - rootRect.top\n            };\n\n        const dragRect = {\n          left: Math.min(this._dragOrigin.x, constrainedPoint.x),\n          top: Math.min(this._dragOrigin.y, constrainedPoint.y),\n          width: Math.abs(constrainedPoint.x - this._dragOrigin.x),\n          height: Math.abs(constrainedPoint.y - this._dragOrigin.y)\n        };\n\n        this._evaluateSelection(dragRect, rootRect);\n\n        this.setState({ dragRect });\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseUp(ev: MouseEvent): void {\n    this._events.off(window);\n    this._events.off(this._scrollableParent, 'scroll');\n\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n\n    this._autoScroll = this._dragOrigin = this._lastMouseEvent = this._selectedIndicies = this._itemRectCache = undefined;\n\n    if (this.state.dragRect) {\n      this.setState({\n        dragRect: undefined\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _isPointInRectangle(rectangle: IRectangle, point: IPoint): boolean {\n    return rectangle.top < point.y && rectangle.bottom! > point.y && rectangle.left < point.x && rectangle.right! > point.x;\n  }\n\n  /**\n   * We do not want to start the marquee if we're trying to marquee\n   * from within an existing marquee selection.\n   */\n  private _isDragStartInSelection(ev: MouseEvent): boolean {\n    const selection = this.props.selection;\n    if (!this._root.current || (selection && selection.getSelectedCount() === 0)) {\n      return false;\n    }\n\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = Number(element.getAttribute('data-selection-index'));\n      if (selection.isIndexSelected(index)) {\n        const itemRect = element.getBoundingClientRect();\n        if (this._isPointInRectangle(itemRect, { x: ev.clientX, y: ev.clientY })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private _isInSelectionToggle(ev: MouseEvent): boolean {\n    let element: HTMLElement | null = ev.target as HTMLElement;\n\n    while (element && element !== this._root.current) {\n      if (element.getAttribute('data-selection-toggle') === 'true') {\n        return true;\n      }\n\n      element = element.parentElement;\n    }\n\n    return false;\n  }\n\n  private _evaluateSelection(dragRect: IRectangle, rootRect: IRectangle): void {\n    // Break early if we don't need to evaluate.\n    if (!dragRect || !this._root.current) {\n      return;\n    }\n\n    const { selection } = this.props;\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n\n    if (!this._itemRectCache) {\n      this._itemRectCache = {};\n    }\n\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = element.getAttribute('data-selection-index') as string;\n\n      // Pull the memoized rectangle for the item, or the get the rect and memoize.\n      let itemRect = this._itemRectCache[index];\n\n      if (!itemRect) {\n        itemRect = element.getBoundingClientRect();\n\n        // Normalize the item rect to the dragRect coordinates.\n        itemRect = {\n          left: itemRect.left - rootRect.left,\n          top: itemRect.top - rootRect.top,\n          width: itemRect.width,\n          height: itemRect.height,\n          right: itemRect.left - rootRect.left + itemRect.width,\n          bottom: itemRect.top - rootRect.top + itemRect.height\n        };\n\n        if (itemRect.width > 0 && itemRect.height > 0) {\n          this._itemRectCache[index] = itemRect;\n        }\n      }\n\n      if (\n        itemRect.top < dragRect.top + dragRect.height &&\n        itemRect.bottom! > dragRect.top &&\n        itemRect.left < dragRect.left + dragRect.width &&\n        itemRect.right! > dragRect.left\n      ) {\n        this._selectedIndicies![index] = true;\n      } else {\n        delete this._selectedIndicies![index];\n      }\n    }\n\n    // set previousSelectedIndices to be all of the selected indices from last time\n    const previousSelectedIndices = this._allSelectedIndices || {};\n    this._allSelectedIndices = {};\n\n    // set all indices that are supposed to be selected in _allSelectedIndices\n    for (const index in this._selectedIndicies!) {\n      if (this._selectedIndicies!.hasOwnProperty(index)) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    if (this._preservedIndicies) {\n      for (const index of this._preservedIndicies!) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    // check if needs to update selection, only when current _allSelectedIndices\n    // is different than previousSelectedIndices\n    let needToUpdate = false;\n    for (const index in this._allSelectedIndices!) {\n      if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n        needToUpdate = true;\n        break;\n      }\n    }\n\n    if (!needToUpdate) {\n      for (const index in previousSelectedIndices!) {\n        if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n          needToUpdate = true;\n          break;\n        }\n      }\n    }\n\n    // only update selection when needed\n    if (needToUpdate) {\n      // Stop change events, clear selection to re-populate.\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n\n      for (const index of Object.keys(this._allSelectedIndices!)) {\n        selection.setIndexSelected(Number(index), true, false);\n      }\n\n      selection.setChangeEvents(true);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}