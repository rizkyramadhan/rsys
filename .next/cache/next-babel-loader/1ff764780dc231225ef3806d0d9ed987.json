{"ast":null,"code":"\"use strict\";\n\nvar _parseFloat = require(\"@babel/runtime-corejs2/core-js/parse-float\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar index_1 = require(\"../FocusTrapZone/index\");\n\nvar Modal_styles_1 = require(\"./Modal.styles\");\n\nvar Overlay_1 = require(\"../../Overlay\");\n\nvar Layer_1 = require(\"../../Layer\");\n\nvar index_2 = require(\"../Popup/index\");\n\nvar withResponsiveMode_1 = require(\"../../utilities/decorators/withResponsiveMode\");\n\nvar index_3 = require(\"../Callout/index\");\n\nvar index_4 = require(\"../Icon/index\");\n\nvar index_5 = require(\"../../utilities/DraggableZone/index\"); // @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\n\n\nvar DefaultLayerProps = {\n  eventBubblingEnabled: false\n};\nvar getClassNames = Utilities_1.classNamesFunction();\n\nvar ModalBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ModalBase, _super);\n\n  function ModalBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusTrapZone = React.createRef(); // Allow the user to scroll within the modal but not on the body\n\n    _this._allowScrollOnModal = function (elt) {\n      if (elt) {\n        Utilities_1.allowScrollOnElement(elt, _this._events);\n      } else {\n        _this._events.off(_this._scrollableContent);\n      }\n\n      _this._scrollableContent = elt;\n    };\n\n    _this._onModalContextMenuClose = function () {\n      _this.setState({\n        isModalMenuOpen: false\n      });\n    };\n\n    _this._onModalClose = function () {\n      _this._lastSetX = 0;\n      _this._lastSetY = 0;\n\n      _this.setState({\n        isModalMenuOpen: false,\n        isInKeyboardMoveMode: false,\n        isOpen: false,\n        x: 0,\n        y: 0\n      }); // Call the onDismiss callback\n\n\n      if (_this.props.onDismissed) {\n        _this.props.onDismissed();\n      }\n    };\n\n    _this._onDragStart = function () {\n      _this.setState({\n        isModalMenuOpen: false,\n        isInKeyboardMoveMode: false\n      });\n    };\n\n    _this._onDrag = function (_, ui) {\n      var _a = _this.state,\n          x = _a.x,\n          y = _a.y;\n\n      _this.setState({\n        x: x + ui.delta.x,\n        y: y + ui.delta.y\n      });\n    };\n\n    _this._onDragStop = function () {\n      _this.focus();\n    };\n\n    _this._onDialogKeyUp = function (event) {\n      // Need to handle the CTRL + ALT + SPACE key during keyup due to FireFox bug:\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n      // Otherwise it would continue to fire a click even if the event was cancelled\n      // during mouseDown.\n      if (event.altKey && event.ctrlKey && event.keyCode === Utilities_1.KeyCodes.space) {\n        _this.setState({\n          isModalMenuOpen: !_this.state.isModalMenuOpen\n        });\n\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n\n    _this._onDialogKeyDown = function (event) {\n      if (event.altKey && event.ctrlKey && event.keyCode === Utilities_1.KeyCodes.space) {\n        // CTRL + ALT + SPACE is handled during keyUp\n        event.preventDefault();\n        event.stopPropagation();\n        return;\n      }\n\n      if (_this.state.isModalMenuOpen && (event.altKey || event.keyCode === Utilities_1.KeyCodes.escape)) {\n        _this.setState({\n          isModalMenuOpen: false\n        });\n      }\n\n      if (_this.state.isInKeyboardMoveMode && (event.keyCode === Utilities_1.KeyCodes.escape || event.keyCode === Utilities_1.KeyCodes.enter)) {\n        _this.setState({\n          isInKeyboardMoveMode: false\n        });\n\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      if (_this.state.isInKeyboardMoveMode) {\n        var handledEvent = true;\n\n        var delta = _this._getMoveDelta(event);\n\n        switch (event.keyCode) {\n          case Utilities_1.KeyCodes.escape:\n            _this.setState({\n              x: _this._lastSetX,\n              y: _this._lastSetY\n            });\n\n          case Utilities_1.KeyCodes.enter:\n            {\n              _this._lastSetX = 0;\n              _this._lastSetY = 0;\n\n              _this.setState({\n                isInKeyboardMoveMode: false\n              });\n\n              break;\n            }\n\n          case Utilities_1.KeyCodes.up:\n            {\n              _this.setState({\n                y: _this.state.y - delta\n              });\n\n              break;\n            }\n\n          case Utilities_1.KeyCodes.down:\n            {\n              _this.setState({\n                y: _this.state.y + delta\n              });\n\n              break;\n            }\n\n          case Utilities_1.KeyCodes.left:\n            {\n              _this.setState({\n                x: _this.state.x - delta\n              });\n\n              break;\n            }\n\n          case Utilities_1.KeyCodes.right:\n            {\n              _this.setState({\n                x: _this.state.x + delta\n              });\n\n              break;\n            }\n\n          default:\n            {\n              handledEvent = false;\n            }\n        }\n\n        if (handledEvent) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n    };\n\n    _this._onEnterKeyboardMoveMode = function () {\n      _this._lastSetX = _this.state.x;\n      _this._lastSetY = _this.state.y;\n\n      _this.setState({\n        isInKeyboardMoveMode: true,\n        isModalMenuOpen: false\n      });\n    };\n\n    _this._onExitKeyboardMoveMode = function () {\n      _this._lastSetX = 0;\n      _this._lastSetY = 0;\n\n      _this.setState({\n        isInKeyboardMoveMode: false\n      });\n    };\n\n    _this.state = {\n      id: Utilities_1.getId('Modal'),\n      isOpen: props.isOpen,\n      isVisible: props.isOpen,\n      hasBeenOpened: props.isOpen,\n      x: 0,\n      y: 0\n    };\n    _this._lastSetX = 0;\n    _this._lastSetY = 0;\n\n    _this._warnDeprecations({\n      onLayerDidMount: 'layerProps.onLayerDidMount'\n    });\n\n    return _this;\n  } // tslint:disable-next-line function-name\n\n\n  ModalBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    clearTimeout(this._onModalCloseTimer); // Opening the dialog\n\n    if (newProps.isOpen) {\n      if (!this.state.isOpen) {\n        // First Open\n        this.setState({\n          isOpen: true\n        });\n      } else {\n        // Modal has been opened\n        // Reopen during closing\n        this.setState({\n          hasBeenOpened: true,\n          isVisible: true\n        });\n\n        if (newProps.topOffsetFixed) {\n          var dialogMain = document.getElementsByClassName('ms-Dialog-main');\n          var modalRectangle = void 0;\n\n          if (dialogMain.length > 0) {\n            modalRectangle = dialogMain[0].getBoundingClientRect();\n            this.setState({\n              modalRectangleTop: modalRectangle.top\n            });\n          }\n        }\n      }\n    } // Closing the dialog\n\n\n    if (!newProps.isOpen && this.state.isOpen) {\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, _parseFloat(Modal_styles_1.animationDuration) * 1000);\n      this.setState({\n        isVisible: false\n      });\n    }\n  };\n\n  ModalBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (!prevProps.isOpen && !prevState.isVisible) {\n      this.setState({\n        isVisible: true\n      });\n    }\n  };\n\n  ModalBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        containerClassName = _a.containerClassName,\n        scrollableContentClassName = _a.scrollableContentClassName,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n        firstFocusableSelector = _a.firstFocusableSelector,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n        isBlocking = _a.isBlocking,\n        isClickableOutsideFocusTrap = _a.isClickableOutsideFocusTrap,\n        isDarkOverlay = _a.isDarkOverlay,\n        onDismiss = _a.onDismiss,\n        layerProps = _a.layerProps,\n        overlay = _a.overlay,\n        responsiveMode = _a.responsiveMode,\n        titleAriaId = _a.titleAriaId,\n        styles = _a.styles,\n        subtitleAriaId = _a.subtitleAriaId,\n        theme = _a.theme,\n        topOffsetFixed = _a.topOffsetFixed,\n        onLayerDidMount = _a.onLayerDidMount,\n        isModeless = _a.isModeless,\n        dragOptions = _a.dragOptions;\n    var _b = this.state,\n        isOpen = _b.isOpen,\n        isVisible = _b.isVisible,\n        hasBeenOpened = _b.hasBeenOpened,\n        modalRectangleTop = _b.modalRectangleTop,\n        x = _b.x,\n        y = _b.y,\n        isInKeyboardMoveMode = _b.isInKeyboardMoveMode;\n\n    if (!isOpen) {\n      return null;\n    }\n\n    var layerClassName = layerProps === undefined ? '' : layerProps.className;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      containerClassName: containerClassName,\n      scrollableContentClassName: scrollableContentClassName,\n      isOpen: isOpen,\n      isVisible: isVisible,\n      hasBeenOpened: hasBeenOpened,\n      modalRectangleTop: modalRectangleTop,\n      topOffsetFixed: topOffsetFixed,\n      isModeless: isModeless,\n      layerClassName: layerClassName,\n      isDefaultDragHandle: dragOptions && !dragOptions.dragHandleSelector\n    });\n\n    var mergedLayerProps = tslib_1.__assign({}, DefaultLayerProps, this.props.layerProps, {\n      onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount,\n      insertFirst: isModeless,\n      className: classNames.layer\n    });\n\n    var modalContent = React.createElement(index_1.FocusTrapZone, {\n      componentRef: this._focusTrapZone,\n      className: classNames.main,\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      isClickableOutsideFocusTrap: isModeless || isClickableOutsideFocusTrap || !isBlocking,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      forceFocusInsideTrap: isModeless ? !isModeless : forceFocusInsideTrap,\n      firstFocusableSelector: firstFocusableSelector,\n      focusPreviouslyFocusedInnerElement: true,\n      onKeyDown: dragOptions ? this._onDialogKeyDown : undefined,\n      onKeyUp: dragOptions ? this._onDialogKeyUp : undefined,\n      onBlur: isInKeyboardMoveMode ? this._onExitKeyboardMoveMode : undefined\n    }, dragOptions && isInKeyboardMoveMode && React.createElement(\"div\", {\n      className: classNames.keyboardMoveIconContainer\n    }, dragOptions.keyboardMoveIconProps ? React.createElement(index_4.Icon, tslib_1.__assign({}, dragOptions.keyboardMoveIconProps)) : React.createElement(index_4.Icon, {\n      iconName: \"move\",\n      className: classNames.keyboardMoveIcon\n    })), React.createElement(\"div\", {\n      ref: this._allowScrollOnModal,\n      className: classNames.scrollableContent,\n      \"data-is-scrollable\": true\n    }, dragOptions && this.state.isModalMenuOpen && React.createElement(dragOptions.menu, {\n      items: [{\n        key: 'move',\n        text: dragOptions.moveMenuItemText,\n        onClick: this._onEnterKeyboardMoveMode\n      }, {\n        key: 'close',\n        text: dragOptions.closeMenuItemText,\n        onClick: this._onModalClose\n      }],\n      onDismiss: this._onModalContextMenuClose,\n      alignTargetEdge: true,\n      coverTarget: true,\n      directionalHint: index_3.DirectionalHint.topLeftEdge,\n      directionalHintFixed: true,\n      shouldFocusOnMount: true,\n      target: this._scrollableContent\n    }), this.props.children)); // @temp tuatology - Will adjust this to be a panel at certain breakpoints\n\n    if (responsiveMode >= withResponsiveMode_1.ResponsiveMode.small) {\n      return React.createElement(Layer_1.Layer, tslib_1.__assign({}, mergedLayerProps), React.createElement(index_2.Popup, {\n        role: isModeless || !isBlocking ? 'dialog' : 'alertdialog',\n        \"aria-modal\": !isModeless,\n        ariaLabelledBy: titleAriaId,\n        ariaDescribedBy: subtitleAriaId,\n        onDismiss: onDismiss\n      }, React.createElement(\"div\", {\n        className: classNames.root\n      }, !isModeless && React.createElement(Overlay_1.Overlay, tslib_1.__assign({\n        isDarkThemed: isDarkOverlay,\n        onClick: isBlocking ? undefined : onDismiss\n      }, overlay)), dragOptions ? React.createElement(index_5.DraggableZone, {\n        handleSelector: dragOptions.dragHandleSelector || \".\" + classNames.main.split(' ')[0],\n        preventDragSelector: \"button\",\n        onStart: this._onDragStart,\n        onDragChange: this._onDrag,\n        onStop: this._onDragStop,\n        position: {\n          x: x,\n          y: y\n        }\n      }, modalContent) : modalContent)));\n    }\n\n    return null;\n  };\n\n  ModalBase.prototype.focus = function () {\n    if (this._focusTrapZone.current) {\n      this._focusTrapZone.current.focus();\n    }\n  };\n\n  ModalBase.prototype._getMoveDelta = function (event) {\n    var delta = 10;\n\n    if (event.shiftKey) {\n      if (!event.ctrlKey) {\n        delta = 50;\n      }\n    } else if (event.ctrlKey) {\n      delta = 1;\n    }\n\n    return delta;\n  };\n\n  ModalBase.defaultProps = {\n    isOpen: false,\n    isDarkOverlay: true,\n    isBlocking: false,\n    className: '',\n    containerClassName: ''\n  };\n  ModalBase = tslib_1.__decorate([withResponsiveMode_1.withResponsiveMode], ModalBase);\n  return ModalBase;\n}(Utilities_1.BaseComponent);\n\nexports.ModalBase = ModalBase;","map":{"version":3,"sources":["components/Modal/Modal.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction, getId, allowScrollOnElement, KeyCodes } from '../../Utilities';\nimport { FocusTrapZone, IFocusTrapZone } from '../FocusTrapZone/index';\nimport { animationDuration } from './Modal.styles';\nimport { IModalProps, IModalStyleProps, IModalStyles, IModal } from './Modal.types';\nimport { Overlay } from '../../Overlay';\nimport { ILayerProps, Layer } from '../../Layer';\nimport { Popup } from '../Popup/index';\nimport { withResponsiveMode, ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nimport { DirectionalHint } from '../Callout/index';\nimport { Icon } from '../Icon/index';\nimport { DraggableZone, IDragData } from '../../utilities/DraggableZone/index';\n\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\n\nconst DefaultLayerProps: ILayerProps = {\n  eventBubblingEnabled: false\n};\n\nexport interface IDialogState {\n  isOpen?: boolean;\n  isVisible?: boolean;\n  isVisibleClose?: boolean;\n  id?: string;\n  hasBeenOpened?: boolean;\n  modalRectangleTop?: number;\n  isModalMenuOpen?: boolean;\n  isInKeyboardMoveMode?: boolean;\n  x: number;\n  y: number;\n}\n\nconst getClassNames = classNamesFunction<IModalStyleProps, IModalStyles>();\n\n@withResponsiveMode\nexport class ModalBase extends BaseComponent<IModalProps, IDialogState> implements IModal {\n  public static defaultProps: IModalProps = {\n    isOpen: false,\n    isDarkOverlay: true,\n    isBlocking: false,\n    className: '',\n    containerClassName: ''\n  };\n\n  private _onModalCloseTimer: number;\n  private _focusTrapZone = React.createRef<IFocusTrapZone>();\n  private _scrollableContent: HTMLDivElement | null;\n  private _lastSetX: number;\n  private _lastSetY: number;\n\n  constructor(props: IModalProps) {\n    super(props);\n    this.state = {\n      id: getId('Modal'),\n      isOpen: props.isOpen,\n      isVisible: props.isOpen,\n      hasBeenOpened: props.isOpen,\n      x: 0,\n      y: 0\n    };\n\n    this._lastSetX = 0;\n    this._lastSetY = 0;\n\n    this._warnDeprecations({\n      onLayerDidMount: 'layerProps.onLayerDidMount'\n    });\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IModalProps): void {\n    clearTimeout(this._onModalCloseTimer);\n\n    // Opening the dialog\n    if (newProps.isOpen) {\n      if (!this.state.isOpen) {\n        // First Open\n        this.setState({\n          isOpen: true\n        });\n      } else {\n        // Modal has been opened\n        // Reopen during closing\n        this.setState({\n          hasBeenOpened: true,\n          isVisible: true\n        });\n\n        if (newProps.topOffsetFixed) {\n          const dialogMain = document.getElementsByClassName('ms-Dialog-main');\n          let modalRectangle;\n          if (dialogMain.length > 0) {\n            modalRectangle = dialogMain[0].getBoundingClientRect();\n            this.setState({\n              modalRectangleTop: modalRectangle.top\n            });\n          }\n        }\n      }\n    }\n\n    // Closing the dialog\n    if (!newProps.isOpen && this.state.isOpen) {\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(animationDuration) * 1000);\n      this.setState({\n        isVisible: false\n      });\n    }\n  }\n\n  public componentDidUpdate(prevProps: IModalProps, prevState: IDialogState) {\n    if (!prevProps.isOpen && !prevState.isVisible) {\n      this.setState({\n        isVisible: true\n      });\n    }\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      className,\n      containerClassName,\n      scrollableContentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      onDismiss,\n      layerProps,\n      overlay,\n      responsiveMode,\n      titleAriaId,\n      styles,\n      subtitleAriaId,\n      theme,\n      topOffsetFixed,\n      onLayerDidMount,\n      isModeless,\n      dragOptions\n    } = this.props;\n    const { isOpen, isVisible, hasBeenOpened, modalRectangleTop, x, y, isInKeyboardMoveMode } = this.state;\n\n    if (!isOpen) {\n      return null;\n    }\n\n    const layerClassName = layerProps === undefined ? '' : layerProps.className;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      containerClassName,\n      scrollableContentClassName,\n      isOpen,\n      isVisible,\n      hasBeenOpened,\n      modalRectangleTop,\n      topOffsetFixed,\n      isModeless,\n      layerClassName,\n      isDefaultDragHandle: dragOptions && !dragOptions.dragHandleSelector\n    });\n\n    const mergedLayerProps = {\n      ...DefaultLayerProps,\n      ...this.props.layerProps,\n      onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount,\n      insertFirst: isModeless,\n      className: classNames.layer\n    };\n    const modalContent = (\n      <FocusTrapZone\n        componentRef={this._focusTrapZone}\n        className={classNames.main}\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        isClickableOutsideFocusTrap={isModeless || isClickableOutsideFocusTrap || !isBlocking}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        forceFocusInsideTrap={isModeless ? !isModeless : forceFocusInsideTrap}\n        firstFocusableSelector={firstFocusableSelector}\n        focusPreviouslyFocusedInnerElement={true}\n        onKeyDown={dragOptions ? this._onDialogKeyDown : undefined}\n        onKeyUp={dragOptions ? this._onDialogKeyUp : undefined}\n        onBlur={isInKeyboardMoveMode ? this._onExitKeyboardMoveMode : undefined}\n      >\n        {dragOptions && isInKeyboardMoveMode && (\n          <div className={classNames.keyboardMoveIconContainer}>\n            {dragOptions.keyboardMoveIconProps ? (\n              <Icon {...dragOptions.keyboardMoveIconProps} />\n            ) : (\n              <Icon iconName=\"move\" className={classNames.keyboardMoveIcon} />\n            )}\n          </div>\n        )}\n        <div ref={this._allowScrollOnModal} className={classNames.scrollableContent} data-is-scrollable={true}>\n          {dragOptions && this.state.isModalMenuOpen && (\n            <dragOptions.menu\n              items={[\n                { key: 'move', text: dragOptions.moveMenuItemText, onClick: this._onEnterKeyboardMoveMode },\n                { key: 'close', text: dragOptions.closeMenuItemText, onClick: this._onModalClose }\n              ]}\n              onDismiss={this._onModalContextMenuClose}\n              alignTargetEdge={true}\n              coverTarget={true}\n              directionalHint={DirectionalHint.topLeftEdge}\n              directionalHintFixed={true}\n              shouldFocusOnMount={true}\n              target={this._scrollableContent}\n            />\n          )}\n          {this.props.children}\n        </div>\n      </FocusTrapZone>\n    );\n\n    // @temp tuatology - Will adjust this to be a panel at certain breakpoints\n    if (responsiveMode! >= ResponsiveMode.small) {\n      return (\n        <Layer {...mergedLayerProps}>\n          <Popup\n            role={isModeless || !isBlocking ? 'dialog' : 'alertdialog'}\n            aria-modal={!isModeless}\n            ariaLabelledBy={titleAriaId}\n            ariaDescribedBy={subtitleAriaId}\n            onDismiss={onDismiss}\n          >\n            <div className={classNames.root}>\n              {!isModeless && <Overlay isDarkThemed={isDarkOverlay} onClick={isBlocking ? undefined : (onDismiss as any)} {...overlay} />}\n              {dragOptions ? (\n                <DraggableZone\n                  handleSelector={dragOptions.dragHandleSelector || `.${classNames.main.split(' ')[0]}`}\n                  preventDragSelector=\"button\"\n                  onStart={this._onDragStart}\n                  onDragChange={this._onDrag}\n                  onStop={this._onDragStop}\n                  position={{ x: x, y: y }}\n                >\n                  {modalContent}\n                </DraggableZone>\n              ) : (\n                modalContent\n              )}\n            </div>\n          </Popup>\n        </Layer>\n      );\n    }\n    return null;\n  }\n\n  public focus() {\n    if (this._focusTrapZone.current) {\n      this._focusTrapZone.current.focus();\n    }\n  }\n\n  // Allow the user to scroll within the modal but not on the body\n  private _allowScrollOnModal = (elt: HTMLDivElement | null): void => {\n    if (elt) {\n      allowScrollOnElement(elt, this._events);\n    } else {\n      this._events.off(this._scrollableContent);\n    }\n    this._scrollableContent = elt;\n  };\n\n  private _onModalContextMenuClose = (): void => {\n    this.setState({ isModalMenuOpen: false });\n  };\n\n  private _onModalClose = (): void => {\n    this._lastSetX = 0;\n    this._lastSetY = 0;\n\n    this.setState({\n      isModalMenuOpen: false,\n      isInKeyboardMoveMode: false,\n      isOpen: false,\n      x: 0,\n      y: 0\n    });\n\n    // Call the onDismiss callback\n    if (this.props.onDismissed) {\n      this.props.onDismissed();\n    }\n  };\n\n  private _onDragStart = (): void => {\n    this.setState({ isModalMenuOpen: false, isInKeyboardMoveMode: false });\n  };\n\n  private _onDrag = (_: React.MouseEvent<HTMLElement> & React.TouchEvent<HTMLElement>, ui: IDragData): void => {\n    const { x, y } = this.state;\n    this.setState({ x: x + ui.delta.x, y: y + ui.delta.y });\n  };\n\n  private _onDragStop = (): void => {\n    this.focus();\n  };\n\n  private _onDialogKeyUp = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n    // Need to handle the CTRL + ALT + SPACE key during keyup due to FireFox bug:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n    // Otherwise it would continue to fire a click even if the event was cancelled\n    // during mouseDown.\n    if (event.altKey && event.ctrlKey && event.keyCode === KeyCodes.space) {\n      this.setState({ isModalMenuOpen: !this.state.isModalMenuOpen });\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  private _onDialogKeyDown = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (event.altKey && event.ctrlKey && event.keyCode === KeyCodes.space) {\n      // CTRL + ALT + SPACE is handled during keyUp\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (this.state.isModalMenuOpen && (event.altKey || event.keyCode === KeyCodes.escape)) {\n      this.setState({ isModalMenuOpen: false });\n    }\n\n    if (this.state.isInKeyboardMoveMode && (event.keyCode === KeyCodes.escape || event.keyCode === KeyCodes.enter)) {\n      this.setState({ isInKeyboardMoveMode: false });\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (this.state.isInKeyboardMoveMode) {\n      let handledEvent = true;\n      const delta = this._getMoveDelta(event);\n\n      switch (event.keyCode) {\n        case KeyCodes.escape:\n          this.setState({ x: this._lastSetX, y: this._lastSetY });\n        case KeyCodes.enter: {\n          this._lastSetX = 0;\n          this._lastSetY = 0;\n          this.setState({ isInKeyboardMoveMode: false });\n          break;\n        }\n        case KeyCodes.up: {\n          this.setState({\n            y: this.state.y - delta\n          });\n          break;\n        }\n        case KeyCodes.down: {\n          this.setState({\n            y: this.state.y + delta\n          });\n          break;\n        }\n        case KeyCodes.left: {\n          this.setState({\n            x: this.state.x - delta\n          });\n          break;\n        }\n        case KeyCodes.right: {\n          this.setState({\n            x: this.state.x + delta\n          });\n          break;\n        }\n        default: {\n          handledEvent = false;\n        }\n      }\n\n      if (handledEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n  };\n\n  private _getMoveDelta(event: React.KeyboardEvent<HTMLDivElement>): number {\n    let delta = 10;\n    if (event.shiftKey) {\n      if (!event.ctrlKey) {\n        delta = 50;\n      }\n    } else if (event.ctrlKey) {\n      delta = 1;\n    }\n\n    return delta;\n  }\n\n  private _onEnterKeyboardMoveMode = () => {\n    this._lastSetX = this.state.x;\n    this._lastSetY = this.state.y;\n    this.setState({ isInKeyboardMoveMode: true, isModalMenuOpen: false });\n  };\n\n  private _onExitKeyboardMoveMode = () => {\n    this._lastSetX = 0;\n    this._lastSetY = 0;\n    this.setState({ isInKeyboardMoveMode: false });\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}