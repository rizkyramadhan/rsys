{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar index_1 = require(\"../../utilities/selection/index\");\n\nvar GroupHeader_1 = require(\"./GroupHeader\");\n\nvar GroupShowAll_1 = require(\"./GroupShowAll\");\n\nvar GroupFooter_1 = require(\"./GroupFooter\");\n\nvar List_1 = require(\"../../List\");\n\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nvar GroupedListSection =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GroupedListSection, _super);\n\n  function GroupedListSection(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._list = React.createRef();\n\n    _this._onRenderGroupHeader = function (props) {\n      return React.createElement(GroupHeader_1.GroupHeader, tslib_1.__assign({}, props));\n    };\n\n    _this._onRenderGroupShowAll = function (props) {\n      return React.createElement(GroupShowAll_1.GroupShowAll, tslib_1.__assign({}, props));\n    };\n\n    _this._onRenderGroupFooter = function (props) {\n      return React.createElement(GroupFooter_1.GroupFooter, tslib_1.__assign({}, props));\n    };\n\n    _this._renderSubGroup = function (subGroup, subGroupIndex) {\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          dragDropHelper = _a.dragDropHelper,\n          eventsToRegister = _a.eventsToRegister,\n          getGroupItemLimit = _a.getGroupItemLimit,\n          groupNestingDepth = _a.groupNestingDepth,\n          groupProps = _a.groupProps,\n          items = _a.items,\n          headerProps = _a.headerProps,\n          showAllProps = _a.showAllProps,\n          footerProps = _a.footerProps,\n          listProps = _a.listProps,\n          onRenderCell = _a.onRenderCell,\n          selection = _a.selection,\n          selectionMode = _a.selectionMode,\n          viewport = _a.viewport,\n          onRenderGroupHeader = _a.onRenderGroupHeader,\n          onRenderGroupShowAll = _a.onRenderGroupShowAll,\n          onRenderGroupFooter = _a.onRenderGroupFooter,\n          onShouldVirtualize = _a.onShouldVirtualize,\n          group = _a.group,\n          compact = _a.compact;\n      var nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n      return !subGroup || subGroup.count > 0 || groupProps && groupProps.showEmptyGroups ? React.createElement(GroupedListSection, {\n        ref: 'subGroup_' + subGroupIndex,\n        key: _this._getGroupKey(subGroup, subGroupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: getGroupItemLimit,\n        group: subGroup,\n        groupIndex: subGroupIndex,\n        groupNestingDepth: nestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        items: items,\n        listProps: listProps,\n        onRenderCell: onRenderCell,\n        selection: selection,\n        selectionMode: selectionMode,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onRenderGroupHeader: onRenderGroupHeader,\n        onRenderGroupShowAll: onRenderGroupShowAll,\n        onRenderGroupFooter: onRenderGroupFooter,\n        onShouldVirtualize: onShouldVirtualize,\n        groups: group.children,\n        compact: compact\n      }) : null;\n    };\n    /**\n     * collect all the data we need to enable drag/drop for a group\n     */\n\n\n    _this._getGroupDragDropOptions = function () {\n      var _a = _this.props,\n          group = _a.group,\n          groupIndex = _a.groupIndex,\n          dragDropEvents = _a.dragDropEvents,\n          eventsToRegister = _a.eventsToRegister;\n      var options = {\n        eventMap: eventsToRegister,\n        selectionIndex: -1,\n        context: {\n          data: group,\n          index: groupIndex,\n          isGroup: true\n        },\n        canDrag: function () {\n          return false;\n        },\n        canDrop: dragDropEvents.canDrop,\n        updateDropState: _this._updateDroppingState\n      };\n      return options;\n    };\n    /**\n     * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * @param newValue - new isDropping state value\n     * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n     */\n\n\n    _this._updateDroppingState = function (newIsDropping, event) {\n      var isDropping = _this.state.isDropping;\n      var dragDropEvents = _this.props.dragDropEvents;\n\n      if (!isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(event, undefined);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          dragDropEvents.onDragEnter(event, undefined);\n        }\n      }\n\n      if (isDropping !== newIsDropping) {\n        _this.setState({\n          isDropping: newIsDropping\n        });\n      }\n    };\n\n    var selection = props.selection,\n        group = props.group;\n    Utilities_1.initializeComponentRef(_this);\n    _this._id = Utilities_1.getId('GroupedListSection');\n    _this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false\n    };\n    _this._events = new Utilities_1.EventGroup(_this);\n    return _this;\n  }\n\n  GroupedListSection.prototype.componentDidMount = function () {\n    var _a = this.props,\n        dragDropHelper = _a.dragDropHelper,\n        selection = _a.selection;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n    }\n\n    if (selection) {\n      this._events.on(selection, index_1.SELECTION_CHANGE, this._onSelectionChange);\n    }\n  };\n\n  GroupedListSection.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  };\n\n  GroupedListSection.prototype.componentDidUpdate = function (previousProps) {\n    if (this.props.group !== previousProps.group || this.props.groupIndex !== previousProps.groupIndex || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n      }\n    }\n  };\n\n  GroupedListSection.prototype.render = function () {\n    var _a = this.props,\n        getGroupItemLimit = _a.getGroupItemLimit,\n        group = _a.group,\n        groupIndex = _a.groupIndex,\n        headerProps = _a.headerProps,\n        showAllProps = _a.showAllProps,\n        footerProps = _a.footerProps,\n        viewport = _a.viewport,\n        selectionMode = _a.selectionMode,\n        _b = _a.onRenderGroupHeader,\n        onRenderGroupHeader = _b === void 0 ? this._onRenderGroupHeader : _b,\n        _c = _a.onRenderGroupShowAll,\n        onRenderGroupShowAll = _c === void 0 ? this._onRenderGroupShowAll : _c,\n        _d = _a.onRenderGroupFooter,\n        onRenderGroupFooter = _d === void 0 ? this._onRenderGroupFooter : _d,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        groupedListClassNames = _a.groupedListClassNames,\n        groups = _a.groups,\n        compact = _a.compact;\n    var isSelected = this.state.isSelected;\n    var renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    var isShowAllVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll && (group.count > renderCount || group.hasMoreData);\n    var hasNestedGroups = group && group.children && group.children.length > 0;\n    var dividerProps = {\n      group: group,\n      groupIndex: groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected: isSelected,\n      viewport: viewport,\n      selectionMode: selectionMode,\n      groups: groups,\n      compact: compact\n    };\n    var ariaControlsProps = {\n      groupedListId: this._id\n    };\n\n    var groupHeaderProps = tslib_1.__assign({}, headerProps, dividerProps, ariaControlsProps);\n\n    var groupShowAllProps = tslib_1.__assign({}, showAllProps, dividerProps);\n\n    var groupFooterProps = tslib_1.__assign({}, footerProps, dividerProps);\n\n    return React.createElement(\"div\", {\n      ref: this._root,\n      className: Utilities_1.css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName()),\n      role: \"presentation\"\n    }, onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader), group && group.isCollapsed ? null : hasNestedGroups ? React.createElement(List_1.List, {\n      role: \"presentation\",\n      ref: this._list,\n      items: group.children,\n      onRenderCell: this._renderSubGroup,\n      getItemCountForPage: this._returnOne,\n      onShouldVirtualize: onShouldVirtualize,\n      id: this._id\n    }) : this._onRenderGroup(renderCount), group && group.isCollapsed ? null : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll), onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter));\n  };\n\n  GroupedListSection.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this.forceListUpdate();\n  };\n\n  GroupedListSection.prototype.forceListUpdate = function () {\n    var group = this.props.group;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        var subGroupCount = group.children.length;\n\n        for (var i = 0; i < subGroupCount; i++) {\n          var subGroup = this._list.current.refs['subGroup_' + String(i)];\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      var subGroup = this.refs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  };\n\n  GroupedListSection.prototype._onSelectionChange = function () {\n    var _a = this.props,\n        group = _a.group,\n        selection = _a.selection;\n    var isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n    if (isSelected !== this.state.isSelected) {\n      this.setState({\n        isSelected: isSelected\n      });\n    }\n  };\n\n  GroupedListSection.prototype._onRenderGroupCell = function (onRenderCell, groupNestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  };\n\n  GroupedListSection.prototype._onRenderGroup = function (renderCount) {\n    var _a = this.props,\n        group = _a.group,\n        items = _a.items,\n        onRenderCell = _a.onRenderCell,\n        listProps = _a.listProps,\n        groupNestingDepth = _a.groupNestingDepth,\n        onShouldVirtualize = _a.onShouldVirtualize;\n    var count = group && !group.isShowingAll ? group.count : items.length;\n    var startIndex = group ? group.startIndex : 0;\n    return React.createElement(List_1.List, tslib_1.__assign({\n      role: \"grid\",\n      items: items,\n      onRenderCell: this._onRenderGroupCell(onRenderCell, groupNestingDepth),\n      ref: this._list,\n      renderCount: Math.min(count, renderCount),\n      startIndex: startIndex,\n      onShouldVirtualize: onShouldVirtualize,\n      id: this._id\n    }, listProps));\n  };\n\n  GroupedListSection.prototype._returnOne = function () {\n    return 1;\n  };\n\n  GroupedListSection.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  };\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n\n\n  GroupedListSection.prototype._getDroppingClassName = function () {\n    var isDropping = this.state.isDropping;\n    var _a = this.props,\n        group = _a.group,\n        groupedListClassNames = _a.groupedListClassNames;\n    isDropping = !!(group && isDropping);\n    return Utilities_1.css(isDropping && DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);\n  };\n\n  return GroupedListSection;\n}(React.Component);\n\nexports.GroupedListSection = GroupedListSection;","map":{"version":3,"sources":["components/GroupedList/GroupedListSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\n\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\n\nimport { initializeComponentRef, IRenderFunction, IDisposable, IClassNames, css, getId, EventGroup } from '../../Utilities';\n\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/index';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { IListProps } from '../List/index';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IClassNames<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription: IDisposable;\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group && !group.children && !group.isCollapsed && !group.isShowingAll && (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    return (\n      <div\n        ref={this._root}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group!.children}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed ? null : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.refs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this.refs['subGroup_' + String(0)] as GroupedListSection;\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    const isSelected = selection!.isRangeSelected(group!.startIndex, group!.count);\n\n    if (isSelected !== this.state.isSelected) {\n      this.setState({ isSelected });\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role=\"grid\"\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={'subGroup_' + subGroupIndex}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group!.children}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      canDrag: () => false, // cannot drag groups\n      canDrop: dragDropEvents!.canDrop,\n      updateDropState: this._updateDroppingState\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents } = this.props;\n\n    if (!isDropping) {\n      if (dragDropEvents && dragDropEvents.onDragLeave) {\n        dragDropEvents.onDragLeave!(event, undefined);\n      }\n    } else {\n      if (dragDropEvents && dragDropEvents.onDragEnter) {\n        dragDropEvents.onDragEnter(event, undefined);\n      }\n    }\n\n    if (isDropping !== newIsDropping) {\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(isDropping && DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}