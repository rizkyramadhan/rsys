{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar Styling_1 = require(\"../../Styling\");\n\nvar MessageBar_types_1 = require(\"./MessageBar.types\");\n\nvar GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine'\n}; // Returns the background color of the MessageBar root element based on the type of MessageBar.\n\nvar getRootBackground = function (messageBarType, palette, semanticColors) {\n  switch (messageBarType) {\n    case MessageBar_types_1.MessageBarType.error:\n    case MessageBar_types_1.MessageBarType.blocked:\n      return semanticColors.errorBackground;\n\n    case MessageBar_types_1.MessageBarType.severeWarning:\n      return semanticColors.blockingBackground;\n\n    case MessageBar_types_1.MessageBarType.success:\n      return semanticColors.successBackground;\n\n    case MessageBar_types_1.MessageBarType.warning:\n      return semanticColors.warningBackground;\n  }\n\n  return palette.neutralLighter;\n}; // Returns the icon color based on the type of MessageBar.\n\n\nvar getIconColor = function (messageBarType, palette, semanticColors) {\n  switch (messageBarType) {\n    case MessageBar_types_1.MessageBarType.error:\n    case MessageBar_types_1.MessageBarType.blocked:\n    case MessageBar_types_1.MessageBarType.severeWarning:\n      return semanticColors.errorText;\n\n    case MessageBar_types_1.MessageBarType.success:\n      return palette.green;\n\n    case MessageBar_types_1.MessageBarType.warning:\n      return semanticColors.warningText;\n  }\n\n  return palette.neutralSecondary;\n};\n\nexports.getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n\n  var theme = props.theme,\n      className = props.className,\n      messageBarType = props.messageBarType,\n      onDismiss = props.onDismiss,\n      truncated = props.truncated,\n      isMultiline = props.isMultiline,\n      expandSingleLine = props.expandSingleLine;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var SmallScreenSelector = Styling_1.getScreenSelector(0, Styling_1.ScreenWidthMaxSmall);\n  var classNames = Styling_1.getGlobalClassNames(GlobalClassNames, theme);\n  var dismissalAndExpandIconStyle = {\n    fontSize: Styling_1.IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: palette.neutralPrimary,\n    selectors: (_a = {}, _a[Styling_1.HighContrastSelector] = {\n      MsHighContrastAdjust: 'none',\n      color: 'Window'\n    }, _a)\n  };\n  var dismissalAndExpandStyle = [Styling_1.getFocusStyle(theme, {\n    inset: 1,\n    highContrastStyle: {\n      outlineOffset: '-4px',\n      outlineColor: 'Window'\n    },\n    borderColor: 'transparent'\n  }), {\n    flexShrink: 0,\n    width: 32,\n    height: 32,\n    padding: '8px 12px',\n    selectors: {\n      '& .ms-Button-icon': dismissalAndExpandIconStyle,\n      ':hover': {\n        backgroundColor: 'transparent'\n      },\n      ':active': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }];\n  return {\n    root: [classNames.root, theme.fonts.medium, messageBarType === MessageBar_types_1.MessageBarType.error && classNames.error, messageBarType === MessageBar_types_1.MessageBarType.blocked && classNames.blocked, messageBarType === MessageBar_types_1.MessageBarType.severeWarning && classNames.severeWarning, messageBarType === MessageBar_types_1.MessageBarType.success && classNames.success, messageBarType === MessageBar_types_1.MessageBarType.warning && classNames.warning, isMultiline ? classNames.multiline : classNames.singleline, !isMultiline && onDismiss && classNames.dismissalSingleLine, !isMultiline && truncated && classNames.expandingSingleLine, {\n      background: getRootBackground(messageBarType, palette, semanticColors),\n      color: palette.neutralPrimary,\n      minHeight: 32,\n      width: '100%',\n      display: 'flex',\n      wordBreak: 'break-word',\n      selectors: (_b = {\n        '& .ms-Link': tslib_1.__assign({\n          color: palette.themeDark\n        }, fonts.small)\n      }, _b[Styling_1.HighContrastSelector] = {\n        background: 'WindowText',\n        color: 'Window'\n      }, _b)\n    }, isMultiline && {\n      flexDirection: 'column'\n    }, className],\n    content: [classNames.content, {\n      display: 'flex',\n      width: '100%',\n      lineHeight: 'normal'\n    }],\n    iconContainer: [classNames.iconContainer, {\n      fontSize: Styling_1.IconFontSizes.medium,\n      minWidth: 16,\n      minHeight: 16,\n      display: 'flex',\n      flexShrink: 0,\n      margin: '8px 0 8px 12px'\n    }],\n    icon: {\n      color: getIconColor(messageBarType, palette, semanticColors),\n      selectors: (_c = {}, _c[Styling_1.HighContrastSelector] = {\n        MsHighContrastAdjust: 'none',\n        color: 'Window'\n      }, _c)\n    },\n    text: [classNames.text, tslib_1.__assign({\n      minWidth: 0,\n      display: 'flex',\n      flexGrow: 1,\n      margin: 8\n    }, fonts.small, {\n      selectors: (_d = {}, _d[Styling_1.HighContrastSelector] = {\n        MsHighContrastAdjust: 'none'\n      }, _d)\n    }), !onDismiss && {\n      marginRight: 12\n    }],\n    innerText: [classNames.innerText, {\n      lineHeight: 16,\n      selectors: {\n        '& span a': {\n          paddingLeft: 4\n        }\n      }\n    }, truncated && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }, !isMultiline && {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }, !isMultiline && !truncated && {\n      selectors: (_e = {}, _e[SmallScreenSelector] = {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      }, _e)\n    }, expandSingleLine && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }],\n    dismissSingleLine: [classNames.dismissSingleLine],\n    expandSingleLine: [classNames.expandSingleLine],\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [isMultiline ? classNames.actions : classNames.actionsSingleline, {\n      display: 'flex',\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis: 'auto',\n      flexDirection: 'row-reverse',\n      alignItems: 'center',\n      margin: '0 12px 0 8px',\n      selectors: {\n        '& button:nth-child(n+2)': {\n          marginLeft: 8\n        }\n      }\n    }, isMultiline && {\n      marginBottom: 8\n    }, onDismiss && !isMultiline && {\n      marginRight: 0\n    }]\n  };\n};","map":{"version":3,"sources":["components/MessageBar/MessageBar.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IStyle,\n  IPalette,\n  ISemanticColors,\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes\n} from '../../Styling';\nimport { IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine'\n};\n\n// Returns the background color of the MessageBar root element based on the type of MessageBar.\nconst getRootBackground = (messageBarType: MessageBarType | undefined, palette: IPalette, semanticColors: ISemanticColors): string => {\n  switch (messageBarType) {\n    case MessageBarType.error:\n    case MessageBarType.blocked:\n      return semanticColors.errorBackground;\n    case MessageBarType.severeWarning:\n      return semanticColors.blockingBackground;\n    case MessageBarType.success:\n      return semanticColors.successBackground;\n    case MessageBarType.warning:\n      return semanticColors.warningBackground;\n  }\n  return palette.neutralLighter;\n};\n\n// Returns the icon color based on the type of MessageBar.\nconst getIconColor = (messageBarType: MessageBarType | undefined, palette: IPalette, semanticColors: ISemanticColors): string => {\n  switch (messageBarType) {\n    case MessageBarType.error:\n    case MessageBarType.blocked:\n    case MessageBarType.severeWarning:\n      return semanticColors.errorText;\n    case MessageBarType.success:\n      return palette.green;\n    case MessageBarType.warning:\n      return semanticColors.warningText;\n  }\n  return palette.neutralSecondary;\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const { theme, className, messageBarType, onDismiss, truncated, isMultiline, expandSingleLine } = props;\n  const { semanticColors, palette, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: palette.neutralPrimary,\n    selectors: {\n      [HighContrastSelector]: {\n        MsHighContrastAdjust: 'none',\n        color: 'Window'\n      }\n    }\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-4px',\n        outlineColor: 'Window'\n      },\n      borderColor: 'transparent'\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent'\n        },\n        ':active': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: getRootBackground(messageBarType, palette, semanticColors),\n        color: palette.neutralPrimary,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '& .ms-Link': {\n            color: palette.themeDark,\n            ...fonts.small\n          },\n          [HighContrastSelector]: {\n            background: 'WindowText',\n            color: 'Window'\n          }\n        }\n      },\n      isMultiline && {\n        flexDirection: 'column'\n      },\n      className\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal'\n      }\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px'\n      }\n    ],\n    icon: {\n      color: getIconColor(messageBarType, palette, semanticColors),\n      selectors: {\n        [HighContrastSelector]: {\n          MsHighContrastAdjust: 'none',\n          color: 'Window'\n        }\n      }\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            MsHighContrastAdjust: 'none'\n          }\n        }\n      },\n      !onDismiss && {\n        marginRight: 12\n      }\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a': {\n            paddingLeft: 4\n          }\n        }\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      },\n      !isMultiline && {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap'\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap'\n            }\n          }\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      }\n    ],\n    dismissSingleLine: [classNames.dismissSingleLine],\n    expandSingleLine: [classNames.expandSingleLine],\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8\n          }\n        }\n      },\n      isMultiline && {\n        marginBottom: 8\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0\n        }\n    ]\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}