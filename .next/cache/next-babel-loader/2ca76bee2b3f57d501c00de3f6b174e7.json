{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../../Utilities\");\n\nvar Button_1 = require(\"../../../Button\");\n\nvar stylesImport = require(\"./Suggestions.scss\");\n\nvar legacyStyles = stylesImport;\nvar getClassNames = Utilities_1.classNamesFunction();\n/**\n * {@docCategory Pickers}\n */\n\nvar SuggestionsItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SuggestionsItem, _super);\n\n  function SuggestionsItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SuggestionsItem.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        suggestionModel = _b.suggestionModel,\n        RenderSuggestion = _b.RenderSuggestion,\n        onClick = _b.onClick,\n        className = _b.className,\n        onRemoveItem = _b.onRemoveItem,\n        isSelectedOverride = _b.isSelectedOverride,\n        removeButtonAriaLabel = _b.removeButtonAriaLabel,\n        styles = _b.styles,\n        theme = _b.theme; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggested: suggestionModel.selected || isSelectedOverride\n    }) : {\n      root: Utilities_1.css('ms-Suggestions-item', legacyStyles.suggestionsItem, (_a = {}, _a['is-suggested ' + legacyStyles.suggestionsItemIsSuggested] = suggestionModel.selected || isSelectedOverride, _a), className),\n      itemButton: Utilities_1.css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n      closeButton: Utilities_1.css('ms-Suggestions-closeButton', legacyStyles.closeButton)\n    };\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, React.createElement(Button_1.CommandButton, {\n      onClick: onClick,\n      className: classNames.itemButton\n    }, RenderSuggestion(suggestionModel.item, this.props)), this.props.showRemoveButton ? React.createElement(Button_1.IconButton, {\n      iconProps: {\n        iconName: 'Cancel',\n        styles: {\n          root: {\n            fontSize: '12px'\n          }\n        }\n      },\n      title: removeButtonAriaLabel,\n      ariaLabel: removeButtonAriaLabel,\n      onClick: onRemoveItem,\n      className: classNames.closeButton\n    }) : null);\n  };\n\n  return SuggestionsItem;\n}(Utilities_1.BaseComponent);\n\nexports.SuggestionsItem = SuggestionsItem;","map":{"version":3,"sources":["components/pickers/Suggestions/SuggestionsItem.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAGA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAM,YAAY,GAAQ,YAA1B;AAEA,IAAM,aAAa,GAAG,WAAA,CAAA,kBAAA,EAAtB;AAEA;;;;AAGA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,OAAA,CAAA,SAAA,CAAA,eAAA,EAAA,MAAA;;AAAxC,WAAA,eAAA,GAAA;;AA6DC;;AA5DQ,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;;;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QACJ,eAAA,GAAA,EAAA,CAAA,eADI;AAAA,QAEJ,gBAAA,GAAA,EAAA,CAAA,gBAFI;AAAA,QAGJ,OAAA,GAAA,EAAA,CAAA,OAHI;AAAA,QAIJ,SAAA,GAAA,EAAA,CAAA,SAJI;AAAA,QAKJ,YAAA,GAAA,EAAA,CAAA,YALI;AAAA,QAMJ,kBAAA,GAAA,EAAA,CAAA,kBANI;AAAA,QAOJ,qBAAA,GAAA,EAAA,CAAA,qBAPI;AAAA,QAQJ,MAAA,GAAA,EAAA,CAAA,MARI;AAAA,QASJ,KAAA,GAAA,EAAA,CAAA,KATI,CADR,CAaE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAM,UAAU,GAAwD,MAAM,GAC1E,aAAa,CAAC,MAAD,EAAS;AACpB,MAAA,KAAK,EAAE,KADa;AAEpB,MAAA,SAAS,EAAA,SAFW;AAGpB,MAAA,SAAS,EAAE,eAAe,CAAC,QAAhB,IAA4B;AAHnB,KAAT,CAD6D,GAM1E;AACE,MAAA,IAAI,EAAE,WAAA,CAAA,GAAA,CACJ,qBADI,EAEJ,YAAY,CAAC,eAFT,GAEwB,EAAA,GAAA,EAAA,EAE1B,EAAA,CAAC,kBAAkB,YAAY,CAAC,0BAAhC,CAAA,GAA6D,eAAe,CAAC,QAAhB,IAA4B,kBAF/D,E,EAFxB,GAMJ,SANI,CADR;AASE,MAAA,UAAU,EAAE,WAAA,CAAA,GAAA,CAAI,2BAAJ,EAAiC,YAAY,CAAC,UAA9C,CATd;AAUE,MAAA,WAAW,EAAE,WAAA,CAAA,GAAA,CAAI,4BAAJ,EAAkC,YAAY,CAAC,WAA/C;AAVf,KANJ;AAmBA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,UAAU,CAAC;AAA3B,KAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAA,CAAA,aAAD,EAAc;AAAC,MAAA,OAAO,EAAE,OAAV;AAAmB,MAAA,SAAS,EAAE,UAAU,CAAC;AAAzC,KAAd,EACG,gBAAgB,CAAC,eAAe,CAAC,IAAjB,EAAuB,KAAK,KAA5B,CADnB,CADF,EAIG,KAAK,KAAL,CAAW,gBAAX,GACC,KAAA,CAAA,aAAA,CAAC,QAAA,CAAA,UAAD,EAAW;AACT,MAAA,SAAS,EAAE;AAAE,QAAA,QAAQ,EAAE,QAAZ;AAAsB,QAAA,MAAM,EAAE;AAAE,UAAA,IAAI,EAAE;AAAE,YAAA,QAAQ,EAAE;AAAZ;AAAR;AAA9B,OADF;AAET,MAAA,KAAK,EAAE,qBAFE;AAGT,MAAA,SAAS,EAAE,qBAHF;AAIT,MAAA,OAAO,EAAE,YAJA;AAKT,MAAA,SAAS,EAAE,UAAU,CAAC;AALb,KAAX,CADD,GAQG,IAZN,CADF;AAgBD,GA3DM;;AA4DT,SAAA,eAAA;AAAC,CA7DD,CAAwC,WAAA,CAAA,aAAxC,CAAA;;AAAa,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, BaseComponent, css } from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { CommandButton, IconButton } from '../../../Button';\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nimport * as stylesImport from './Suggestions.scss';\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsItem<T> extends BaseComponent<ISuggestionItemProps<T>, {}> {\n  public render(): JSX.Element {\n    const {\n      suggestionModel,\n      RenderSuggestion,\n      onClick,\n      className,\n      onRemoveItem,\n      isSelectedOverride,\n      removeButtonAriaLabel,\n      styles,\n      theme\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggested: suggestionModel.selected || isSelectedOverride\n        })\n      : {\n          root: css(\n            'ms-Suggestions-item',\n            legacyStyles.suggestionsItem,\n            {\n              ['is-suggested ' + legacyStyles.suggestionsItemIsSuggested]: suggestionModel.selected || isSelectedOverride\n            },\n            className\n          ),\n          itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n          closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton)\n        };\n\n    return (\n      <div className={classNames.root}>\n        <CommandButton onClick={onClick} className={classNames.itemButton}>\n          {RenderSuggestion(suggestionModel.item, this.props)}\n        </CommandButton>\n        {this.props.showRemoveButton ? (\n          <IconButton\n            iconProps={{ iconName: 'Cancel', styles: { root: { fontSize: '12px' } } }}\n            title={removeButtonAriaLabel}\n            ariaLabel={removeButtonAriaLabel}\n            onClick={onRemoveItem}\n            className={classNames.closeButton}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}