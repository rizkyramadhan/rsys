{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DateValues_1 = require(\"../dateValues/DateValues\");\n\nvar TimeConstants_1 = require(\"../dateValues/TimeConstants\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param {Date} date - The origin date\n * @param {number} days - The number of days to offset. 'days' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of days\n */\n\n\nfunction addDays(date, days) {\n  var result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nexports.addDays = addDays;\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param {Date} date - The origin date\n * @param {number} weeks - The number of weeks to offset. 'weeks' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of weeks\n */\n\nfunction addWeeks(date, weeks) {\n  return addDays(date, weeks * TimeConstants_1.default.DaysInOneWeek);\n}\n\nexports.addWeeks = addWeeks;\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} months - The number of months to offset. 'months' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of months\n */\n\nfunction addMonths(date, months) {\n  var result = new Date(date.getTime());\n  var newMonth = result.getMonth() + months;\n  result.setMonth(newMonth); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (newMonth % TimeConstants_1.default.MonthInOneYear + TimeConstants_1.default.MonthInOneYear) % TimeConstants_1.default.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n\nexports.addMonths = addMonths;\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} years - The number of years to offset. 'years' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of years\n */\n\nfunction addYears(date, years) {\n  var result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (date.getMonth() % TimeConstants_1.default.MonthInOneYear + TimeConstants_1.default.MonthInOneYear) % TimeConstants_1.default.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n\nexports.addYears = addYears;\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param {Date} date - The origin date\n * @return {Date} A new Date object with the day set to the first day of the month.\n */\n\nfunction getMonthStart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\nexports.getMonthStart = getMonthStart;\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param {Date} date - The origin date\n * @return {Date} A new Date object with the day set to the last day of the month.\n */\n\nfunction getMonthEnd(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\nexports.getMonthEnd = getMonthEnd;\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param {Date} date - The origin date\n * @return {Date} A new Date object with the day set to the first day of the year.\n */\n\nfunction getYearStart(date) {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\nexports.getYearStart = getYearStart;\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param {Date} date - The origin date\n * @return {Date} A new Date object with the day set to the last day of the year.\n */\n\nfunction getYearEnd(date) {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\nexports.getYearEnd = getYearEnd;\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} month - The 0-based index of the month to set on the date.\n * @return {Date} A new Date object with the given month set.\n */\n\nfunction setMonth(date, month) {\n  return addMonths(date, month - date.getMonth());\n}\n\nexports.setMonth = setMonth;\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @return {boolean} True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\n\nfunction compareDates(date1, date2) {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  }\n}\n\nexports.compareDates = compareDates;\n/**\n * Compare the date parts of two dates\n * @param {Date} date1 - The first date to compare\n * @param {Date} date2 - The second date to compare\n * @returns {Number} A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\n\nfunction compareDatePart(date1, date2) {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\nexports.compareDatePart = compareDatePart;\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param {Date} date - The input date\n * @param {DateRangeType} dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param {DayOfWeek} firstDayOfWeek - The first day of the week.\n * @param {DayOfWeek[]} workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @returns {Date[]} An array of dates representing the date range containing the specified date.\n */\n\nfunction getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays) {\n  var datesArray = new Array();\n  var startDate;\n  var endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DateValues_1.DayOfWeek.Monday, DateValues_1.DayOfWeek.Tuesday, DateValues_1.DayOfWeek.Wednesday, DateValues_1.DayOfWeek.Thursday, DateValues_1.DayOfWeek.Friday];\n  }\n\n  switch (dateRangeType) {\n    case DateValues_1.DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, 1);\n      break;\n\n    case DateValues_1.DateRangeType.Week:\n    case DateValues_1.DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants_1.default.DaysInOneWeek);\n      break;\n\n    case DateValues_1.DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      return Utilities_1.assertNever(dateRangeType);\n  } // Populate the dates array with the dates in range\n\n\n  var nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateValues_1.DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\nexports.getDateRangeArray = getDateRangeArray;\n/**\n * Checks whether the specified date is in the given date range.\n * @param {Date} date - The origin date\n * @param {Date[]} dateRange - An array of dates to do the lookup on\n * @returns {bool} True if the date matches one of the dates in the specified array, false otherwise.\n */\n\nfunction isInDateRangeArray(date, dateRange) {\n  for (var _i = 0, dateRange_1 = dateRange; _i < dateRange_1.length; _i++) {\n    var dateInRange = dateRange_1[_i];\n\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.isInDateRangeArray = isInDateRangeArray;\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param {navigatedDate} Date - A date to find the week number for.\n * @param {firstDayOfWeek} DayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param {firstWeekOfYear} FirstWeekOfYear - The first week of the year (1-2)\n * @return {weeksArray} The weeks number array for the current month.\n */\n\nfunction getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {\n  var selectedYear = navigatedDate.getFullYear();\n  var selectedMonth = navigatedDate.getMonth();\n  var dayOfMonth = 1;\n  var fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  var endOfFirstWeek = dayOfMonth + (firstDayOfWeek + TimeConstants_1.default.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  var endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n  var weeksArray = [];\n\n  for (var i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants_1.default.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n\n  return weeksArray;\n}\n\nexports.getWeekNumbersInMonth = getWeekNumbersInMonth;\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param {Date} date - A date to find the week number for.\n * @param {DayOfWeek} firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param {firstWeekOfYear} firstWeekOfYear - The first week of the year (1-2)\n * @return {Number} The week's number in the year.\n */\n\nfunction getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {\n  // First four-day week of the year - minumum days count\n  var fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case DateValues_1.FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants_1.default.DaysInOneWeek);\n\n    case DateValues_1.FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\nexports.getWeekNumber = getWeekNumber;\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param {Date} date - The date to find the beginning of the week date for.\n * @return {Date} A new date object representing the first day of the week containing the input date.\n */\n\nfunction getStartDateOfWeek(date, firstDayOfWeek) {\n  var daysOffset = firstDayOfWeek - date.getDay();\n\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants_1.default.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n\nexports.getStartDateOfWeek = getStartDateOfWeek;\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param {Date} date - The origin date\n * @returns {Date} A new date with the time set to midnight\n */\n\nfunction getDatePart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n/**\n * Helper function to assist in date comparisons\n */\n\n\nfunction getDatePartHashValue(date) {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n\n  /* tslint:disable:no-bitwise */\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n  /* tslint:enable:no-bitwise */\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param {date} Date - current selected date.\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param {numberOfFullDays} number - week settings.\n * @return {Number} The week's number in the year.\n */\n\n\nfunction getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {\n  var dayOfYear = getDayOfYear(date) - 1;\n  var num = date.getDay() - dayOfYear % TimeConstants_1.default.DaysInOneWeek;\n  var lastDayOfPrevYear = new Date(date.getFullYear() - 1, DateValues_1.MonthOfYear.December, 31);\n  var daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n  var num2 = (firstDayOfWeek - num + 2 * TimeConstants_1.default.DaysInOneWeek) % TimeConstants_1.default.DaysInOneWeek;\n\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants_1.default.DaysInOneWeek;\n  }\n\n  var num3 = dayOfYear - num2;\n\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants_1.default.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants_1.default.DaysInOneWeek) % TimeConstants_1.default.DaysInOneWeek;\n\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants_1.default.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants_1.default.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param {date} Date - current selected date.\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\n * @return {Number} The week's number in the year.\n */\n\n\nfunction getFirstDayWeekOfYear(date, firstDayOfWeek) {\n  var num = getDayOfYear(date) - 1;\n  var num2 = date.getDay() - num % TimeConstants_1.default.DaysInOneWeek;\n  var num3 = (num2 - firstDayOfWeek + 2 * TimeConstants_1.default.DaysInOneWeek) % TimeConstants_1.default.DaysInOneWeek;\n  return Math.floor((num + num3) / TimeConstants_1.default.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param {dateWeekDay} DayOfWeek - shifts number forward to 1 week in case passed as true\n * @return {DayOfWeek} The day of week adjusted to firstDayOfWeek. E.g. when FirstDyOfWeek is Monday (1), Sunday becomes = 7 (7 > 1).\n */\n\n\nfunction adjustWeekDay(firstDayOfWeek, dateWeekDay) {\n  return firstDayOfWeek !== DateValues_1.DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants_1.default.DaysInOneWeek : dateWeekDay;\n}\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param {Date} date - A date to find the day number for.\n * @return {Number} The day's number in the year.\n */\n\n\nfunction getDayOfYear(date) {\n  var month = date.getMonth();\n  var year = date.getFullYear();\n  var daysUntilDate = 0;\n\n  for (var i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n  return daysUntilDate;\n}\n/**\n * Returns the number of days in the month\n * @param {number} month - The month number to target (months 1-12).\n * @param {number} year - The year to target.\n * @return {Number} The number of days in the month.\n */\n\n\nfunction daysInMonth(month, year) {\n  return new Date(year, month, 0).getDate();\n}","map":{"version":3,"sources":["utilities/dateMath/DateMath.ts"],"names":[],"mappings":"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","sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/DateValues';\nimport TimeConstants from '../dateValues/TimeConstants';\nimport { assertNever } from '../../Utilities';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param {Date} date - The origin date\n * @param {number} days - The number of days to offset. 'days' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param {Date} date - The origin date\n * @param {number} weeks - The number of weeks to offset. 'weeks' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} months - The number of months to offset. 'months' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (result.getMonth() !== ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} years - The number of years to offset. 'years' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param {Date} date - The origin date\n * @return {Date} A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param {Date} date - The origin date\n * @return {Date} A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param {Date} date - The origin date\n * @return {Date} A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param {Date} date - The origin date\n * @return {Date} A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} month - The 0-based index of the month to set on the date.\n * @return {Date} A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @return {boolean} True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  }\n}\n\n/**\n * Compare the date parts of two dates\n * @param {Date} date1 - The first date to compare\n * @param {Date} date2 - The second date to compare\n * @returns {Number} A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param {Date} date - The input date\n * @param {DateRangeType} dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param {DayOfWeek} firstDayOfWeek - The first day of the week.\n * @param {DayOfWeek[]} workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @returns {Date[]} An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(date: Date, dateRangeType: DateRangeType, firstDayOfWeek: DayOfWeek, workWeekDays?: DayOfWeek[]): Date[] {\n  const datesArray = new Array<Date>();\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, 1);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      return assertNever(dateRangeType);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param {Date} date - The origin date\n * @param {Date[]} dateRange - An array of dates to do the lookup on\n * @returns {bool} True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param {navigatedDate} Date - A date to find the week number for.\n * @param {firstDayOfWeek} DayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param {firstWeekOfYear} FirstWeekOfYear - The first week of the year (1-2)\n * @return {weeksArray} The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param {Date} date - A date to find the week number for.\n * @param {DayOfWeek} firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param {firstWeekOfYear} firstWeekOfYear - The first week of the year (1-2)\n * @return {Number} The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param {Date} date - The date to find the beginning of the week date for.\n * @return {Date} A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param {Date} date - The origin date\n * @returns {Date} A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nfunction getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  /* tslint:disable:no-bitwise */\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n  /* tslint:enable:no-bitwise */\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param {date} Date - current selected date.\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param {numberOfFullDays} number - week settings.\n * @return {Number} The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param {date} Date - current selected date.\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\n * @return {Number} The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param {dateWeekDay} DayOfWeek - shifts number forward to 1 week in case passed as true\n * @return {DayOfWeek} The day of week adjusted to firstDayOfWeek. E.g. when FirstDyOfWeek is Monday (1), Sunday becomes = 7 (7 > 1).\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param {Date} date - A date to find the day number for.\n * @return {Number} The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param {number} month - The month number to target (months 1-12).\n * @param {number} year - The year to target.\n * @return {Number} The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}