{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nvar getClassNames = classNamesFunction({\n  disableCaching: true\n});\n\nvar IconBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(IconBase, _super);\n\n  function IconBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onImageLoadingStateChange = function (state) {\n      if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {\n        _this.props.imageProps.onLoadingStateChange(state);\n      }\n\n      if (state === ImageLoadState.error) {\n        _this.setState({\n          imageLoadError: true\n        });\n      }\n    };\n\n    _this.state = {\n      imageLoadError: false\n    };\n    return _this;\n  }\n\n  IconBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        styles = _a.styles,\n        iconName = _a.iconName,\n        imageErrorAs = _a.imageErrorAs,\n        theme = _a.theme;\n    var isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    var isImage = this.props.iconType === IconType.image || this.props.iconType === IconType.Image || !!this.props.imageProps;\n\n    var _b = getIconContent(iconName),\n        iconClassName = _b.iconClassName,\n        children = _b.children;\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      iconClassName: iconClassName,\n      isImage: isImage,\n      isPlaceholder: isPlaceholder\n    });\n    var RootType = isImage ? 'div' : 'i';\n    var nativeProps = getNativeProps(this.props, htmlElementProperties, ['aria-label']);\n    var imageLoadError = this.state.imageLoadError;\n\n    var imageProps = tslib_1.__assign({}, this.props.imageProps, {\n      onLoadingStateChange: this.onImageLoadingStateChange\n    });\n\n    var ImageType = imageLoadError && imageErrorAs || Image;\n    var ariaLabel = this.props.ariaLabel || this.props['aria-label'];\n    var containerProps = ariaLabel ? {\n      'aria-label': ariaLabel\n    } : {\n      role: 'presentation',\n      'aria-hidden': imageProps.alt || imageProps['aria-labelledby'] ? false : true\n    };\n    return React.createElement(RootType, tslib_1.__assign({\n      \"data-icon-name\": iconName\n    }, containerProps, nativeProps, {\n      className: classNames.root\n    }), isImage ? React.createElement(ImageType, tslib_1.__assign({}, imageProps)) : children);\n  };\n\n  return IconBase;\n}(React.Component);\n\nexport { IconBase };","map":{"version":3,"sources":["components/Icon/Icon.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { IIconProps, IconType, IIconStyleProps, IIconStyles } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState, IImageProps } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\n\nexport interface IIconState {\n  imageLoadError: boolean;\n}\n\nconst getClassNames = classNamesFunction<IIconStyleProps, IIconStyles>({\n  disableCaching: true\n});\n\nexport class IconBase extends React.Component<IIconProps, IIconState> {\n  constructor(props: IIconProps) {\n    super(props);\n    this.state = {\n      imageLoadError: false\n    };\n  }\n\n  public render() {\n    const { className, styles, iconName, imageErrorAs, theme } = this.props;\n    const isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    const isImage = this.props.iconType === IconType.image || this.props.iconType === IconType.Image || !!this.props.imageProps;\n    const { iconClassName, children } = getIconContent(iconName);\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      iconClassName,\n      isImage,\n      isPlaceholder\n    });\n\n    const RootType = isImage ? 'div' : 'i';\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, ['aria-label']);\n    const { imageLoadError } = this.state;\n    const imageProps: IImageProps = {\n      ...this.props.imageProps,\n      onLoadingStateChange: this.onImageLoadingStateChange\n    };\n    const ImageType = (imageLoadError && imageErrorAs) || Image;\n\n    const ariaLabel = this.props.ariaLabel || this.props['aria-label'];\n    const containerProps = ariaLabel\n      ? {\n          'aria-label': ariaLabel\n        }\n      : {\n          role: 'presentation',\n          'aria-hidden': imageProps.alt || imageProps['aria-labelledby'] ? false : true\n        };\n\n    return (\n      <RootType data-icon-name={iconName} {...containerProps} {...nativeProps} className={classNames.root}>\n        {isImage ? <ImageType {...imageProps} /> : children}\n      </RootType>\n    );\n  }\n\n  private onImageLoadingStateChange = (state: ImageLoadState): void => {\n    if (this.props.imageProps && this.props.imageProps.onLoadingStateChange) {\n      this.props.imageProps.onLoadingStateChange(state);\n    }\n    if (state === ImageLoadState.error) {\n      this.setState({ imageLoadError: true });\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}