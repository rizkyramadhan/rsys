{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, KeyCodes, css } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection'; // tslint:disable-next-line:no-any\n\nvar styles = stylesImport;\n\nvar BaseExtendedPicker =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BaseExtendedPicker, _super);\n\n  function BaseExtendedPicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n\n    _this.floatingPicker = React.createRef();\n    _this.selectedItemsList = React.createRef();\n    _this.root = React.createRef();\n    _this.input = React.createRef();\n\n    _this.onSelectionChange = function () {\n      _this.forceUpdate();\n    };\n\n    _this.onInputChange = function (value) {\n      _this.setState({\n        queryString: value\n      });\n\n      if (_this.floatingPicker.current) {\n        _this.floatingPicker.current.onQueryStringChanged(value);\n      }\n    };\n\n    _this.onInputFocus = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n\n      if (_this.props.inputProps && _this.props.inputProps.onFocus) {\n        _this.props.inputProps.onFocus(ev);\n      }\n    };\n\n    _this.onInputClick = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n\n      if (_this.floatingPicker.current && _this.inputElement) {\n        // Update the value if the input value is empty or it is different than the current inputText from the floatingPicker\n        var shoudUpdateValue = _this.inputElement.value === '' || _this.inputElement.value !== _this.floatingPicker.current.inputText;\n\n        _this.floatingPicker.current.showPicker(shoudUpdateValue);\n      }\n    }; // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n    // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n\n\n    _this.onBackspace = function (ev) {\n      if (ev.which !== KeyCodes.backspace) {\n        return;\n      }\n\n      if (_this.selectedItemsList.current && _this.items.length) {\n        if (_this.input.current && !_this.input.current.isValueSelected && _this.input.current.inputElement === document.activeElement && _this.input.current.cursorLocation === 0) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n\n          ev.preventDefault();\n\n          _this.selectedItemsList.current.removeItemAt(_this.items.length - 1);\n\n          _this._onSelectedItemsChanged();\n        } else if (_this.selectedItemsList.current.hasSelectedItems()) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n\n          ev.preventDefault();\n\n          _this.selectedItemsList.current.removeSelectedItems();\n\n          _this._onSelectedItemsChanged();\n        }\n      }\n    };\n\n    _this.onCopy = function (ev) {\n      if (_this.selectedItemsList.current) {\n        // Pass it down into the selected items list\n        _this.selectedItemsList.current.onCopy(ev);\n      }\n    };\n\n    _this.onPaste = function (ev) {\n      if (_this.props.onPaste) {\n        var inputText = ev.clipboardData.getData('Text');\n        ev.preventDefault();\n\n        _this.props.onPaste(inputText);\n      }\n    };\n\n    _this._onSuggestionSelected = function (item) {\n      var currentRenderedQueryString = _this.props.currentRenderedQueryString;\n      var queryString = _this.state.queryString;\n\n      if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n        var processedItem = _this.props.onItemSelected ? _this.props.onItemSelected(item) : item;\n\n        if (processedItem === null) {\n          return;\n        }\n\n        var processedItemObject = processedItem;\n        var processedItemPromiseLike = processedItem;\n        var newItem_1;\n\n        if (processedItemPromiseLike && processedItemPromiseLike.then) {\n          processedItemPromiseLike.then(function (resolvedProcessedItem) {\n            newItem_1 = resolvedProcessedItem;\n\n            _this._addProcessedItem(newItem_1);\n          });\n        } else {\n          newItem_1 = processedItemObject;\n\n          _this._addProcessedItem(newItem_1);\n        }\n      }\n    };\n\n    _this._onSelectedItemsChanged = function () {\n      _this.focus();\n    };\n\n    _this.selection = new Selection({\n      onSelectionChanged: function onSelectionChanged() {\n        return _this.onSelectionChange();\n      }\n    });\n    _this.state = {\n      queryString: '',\n      suggestionItems: _this.props.suggestionItems ? _this.props.suggestionItems : null,\n      selectedItems: _this.props.defaultSelectedItems ? _this.props.defaultSelectedItems : _this.props.selectedItems ? _this.props.selectedItems : null\n    };\n    _this.floatingPickerProps = _this.props.floatingPickerProps;\n    _this.selectedItemsListProps = _this.props.selectedItemsListProps;\n    return _this;\n  }\n\n  _Object$defineProperty(BaseExtendedPicker.prototype, \"items\", {\n    // tslint:disable-next-line:no-any\n    get: function get() {\n      return this.state.selectedItems ? this.state.selectedItems : this.selectedItemsList.current ? this.selectedItemsList.current.items : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseExtendedPicker.prototype.componentDidMount = function () {\n    this.forceUpdate();\n  }; // tslint:disable-next-line function-name\n\n\n  BaseExtendedPicker.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.floatingPickerProps) {\n      this.floatingPickerProps = newProps.floatingPickerProps;\n    }\n\n    if (newProps.selectedItemsListProps) {\n      this.selectedItemsListProps = newProps.selectedItemsListProps;\n    }\n\n    if (newProps.selectedItems) {\n      this.setState({\n        selectedItems: newProps.selectedItems\n      });\n    }\n  };\n\n  BaseExtendedPicker.prototype.focus = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n\n  BaseExtendedPicker.prototype.clearInput = function () {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  };\n\n  _Object$defineProperty(BaseExtendedPicker.prototype, \"inputElement\", {\n    get: function get() {\n      return this.input.current && this.input.current.inputElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  _Object$defineProperty(BaseExtendedPicker.prototype, \"highlightedItems\", {\n    get: function get() {\n      return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseExtendedPicker.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        inputProps = _a.inputProps,\n        disabled = _a.disabled,\n        focusZoneProps = _a.focusZoneProps;\n    var activeDescendant = this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1 ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex : undefined;\n    var isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: css('ms-BasePicker ms-BaseExtendedPicker', className ? className : ''),\n      onKeyDown: this.onBackspace,\n      onCopy: this.onCopy\n    }, React.createElement(FocusZone, tslib_1.__assign({\n      direction: FocusZoneDirection.bidirectional\n    }, focusZoneProps), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.multiple\n    }, React.createElement(\"div\", {\n      className: css('ms-BasePicker-text', styles.pickerText),\n      role: 'list'\n    }, this.props.headerComponent, this.renderSelectedItemsList(), this.canAddItems() && React.createElement(Autofill, tslib_1.__assign({}, inputProps, {\n      className: css('ms-BasePicker-input', styles.pickerInput),\n      ref: this.input,\n      onFocus: this.onInputFocus,\n      onClick: this.onInputClick,\n      onInputValueChange: this.onInputChange,\n      \"aria-activedescendant\": activeDescendant,\n      \"aria-owns\": isExpanded ? 'suggestion-list' : undefined,\n      \"aria-expanded\": isExpanded,\n      \"aria-haspopup\": \"true\",\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      role: \"combobox\",\n      disabled: disabled,\n      onPaste: this.onPaste\n    }))))), this.renderFloatingPicker());\n  };\n\n  BaseExtendedPicker.prototype.canAddItems = function () {\n    var itemLimit = this.props.itemLimit;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  };\n\n  BaseExtendedPicker.prototype.renderFloatingPicker = function () {\n    var FloatingPicker = this.props.onRenderFloatingPicker;\n    return React.createElement(FloatingPicker, tslib_1.__assign({\n      componentRef: this.floatingPicker,\n      onChange: this._onSuggestionSelected,\n      inputElement: this.input.current ? this.input.current.inputElement : undefined,\n      selectedItems: this.items,\n      suggestionItems: this.props.suggestionItems ? this.props.suggestionItems : undefined\n    }, this.floatingPickerProps));\n  };\n\n  BaseExtendedPicker.prototype.renderSelectedItemsList = function () {\n    var SelectedItems = this.props.onRenderSelectedItems;\n    return React.createElement(SelectedItems, tslib_1.__assign({\n      componentRef: this.selectedItemsList,\n      selection: this.selection,\n      selectedItems: this.props.selectedItems ? this.props.selectedItems : undefined,\n      onItemsDeleted: this.props.selectedItems ? this.props.onItemsRemoved : undefined\n    }, this.selectedItemsListProps));\n  };\n\n  BaseExtendedPicker.prototype._addProcessedItem = function (newItem) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  };\n\n  return BaseExtendedPicker;\n}(BaseComponent);\n\nexport { BaseExtendedPicker };","map":{"version":3,"sources":["components/ExtendedPicker/BaseExtendedPicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, KeyCodes, css } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport { IInputProps } from '../../Pickers';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { IBaseExtendedPickerProps, IBaseExtendedPicker } from './BaseExtendedPicker.types';\nimport { IBaseFloatingPickerProps, BaseFloatingPicker } from '../../FloatingPicker';\nimport { BaseSelectedItemsList, IBaseSelectedItemsListProps } from '../../SelectedItemsList';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n// tslint:disable-next-line:no-any\nconst styles: any = stylesImport;\n\nexport interface IBaseExtendedPickerState<T> {\n  queryString: string | null;\n  selectedItems: T[] | null;\n  suggestionItems: T[] | null;\n}\n\nexport class BaseExtendedPicker<T, P extends IBaseExtendedPickerProps<T>> extends BaseComponent<P, IBaseExtendedPickerState<T>>\n  implements IBaseExtendedPicker<T> {\n  public floatingPicker = React.createRef<BaseFloatingPicker<T, IBaseFloatingPickerProps<T>>>();\n  public selectedItemsList = React.createRef<BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>>>();\n\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<Autofill>();\n  protected selection: Selection;\n  protected floatingPickerProps: IBaseFloatingPickerProps<T>;\n  protected selectedItemsListProps: IBaseSelectedItemsListProps<T>;\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n\n    this.state = {\n      queryString: '',\n      suggestionItems: this.props.suggestionItems ? (this.props.suggestionItems as T[]) : null,\n      selectedItems: this.props.defaultSelectedItems\n        ? (this.props.defaultSelectedItems as T[])\n        : this.props.selectedItems\n        ? (this.props.selectedItems as T[])\n        : null\n    };\n\n    this.floatingPickerProps = this.props.floatingPickerProps;\n    this.selectedItemsListProps = this.props.selectedItemsListProps;\n  }\n\n  // tslint:disable-next-line:no-any\n  public get items(): any {\n    return this.state.selectedItems\n      ? this.state.selectedItems\n      : this.selectedItemsList.current\n      ? this.selectedItemsList.current.items\n      : null;\n  }\n\n  public componentDidMount(): void {\n    this.forceUpdate();\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: P): void {\n    if (newProps.floatingPickerProps) {\n      this.floatingPickerProps = newProps.floatingPickerProps;\n    }\n\n    if (newProps.selectedItemsListProps) {\n      this.selectedItemsListProps = newProps.selectedItemsListProps;\n    }\n\n    if (newProps.selectedItems) {\n      this.setState({ selectedItems: newProps.selectedItems });\n    }\n  }\n\n  public focus(): void {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public clearInput(): void {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this.input.current && this.input.current.inputElement;\n  }\n\n  public get highlightedItems(): T[] {\n    return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n  }\n\n  public render(): JSX.Element {\n    const { className, inputProps, disabled, focusZoneProps } = this.props;\n    const activeDescendant =\n      this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1\n        ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex\n        : undefined;\n    const isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n\n    return (\n      <div\n        ref={this.root}\n        className={css('ms-BasePicker ms-BaseExtendedPicker', className ? className : '')}\n        onKeyDown={this.onBackspace}\n        onCopy={this.onCopy}\n      >\n        <FocusZone direction={FocusZoneDirection.bidirectional} {...focusZoneProps}>\n          <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n            <div className={css('ms-BasePicker-text', styles.pickerText)} role={'list'}>\n              {this.props.headerComponent}\n              {this.renderSelectedItemsList()}\n              {this.canAddItems() && (\n                <Autofill\n                  {...inputProps as IInputProps}\n                  className={css('ms-BasePicker-input', styles.pickerInput)}\n                  ref={this.input}\n                  onFocus={this.onInputFocus}\n                  onClick={this.onInputClick}\n                  onInputValueChange={this.onInputChange}\n                  aria-activedescendant={activeDescendant}\n                  aria-owns={isExpanded ? 'suggestion-list' : undefined}\n                  aria-expanded={isExpanded}\n                  aria-haspopup=\"true\"\n                  autoCapitalize=\"off\"\n                  autoComplete=\"off\"\n                  role=\"combobox\"\n                  disabled={disabled}\n                  onPaste={this.onPaste}\n                />\n              )}\n            </div>\n          </SelectionZone>\n        </FocusZone>\n        {this.renderFloatingPicker()}\n      </div>\n    );\n  }\n\n  protected onSelectionChange = (): void => {\n    this.forceUpdate();\n  };\n\n  protected canAddItems(): boolean {\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  }\n\n  protected renderFloatingPicker(): JSX.Element {\n    const FloatingPicker: React.ComponentType<IBaseFloatingPickerProps<T>> = this.props.onRenderFloatingPicker;\n    return (\n      <FloatingPicker\n        componentRef={this.floatingPicker}\n        onChange={this._onSuggestionSelected}\n        inputElement={this.input.current ? this.input.current.inputElement : undefined}\n        selectedItems={this.items}\n        suggestionItems={this.props.suggestionItems ? this.props.suggestionItems : undefined}\n        {...this.floatingPickerProps}\n      />\n    );\n  }\n\n  protected renderSelectedItemsList(): JSX.Element {\n    const SelectedItems: React.ComponentType<IBaseSelectedItemsListProps<T>> = this.props.onRenderSelectedItems;\n    return (\n      <SelectedItems\n        componentRef={this.selectedItemsList}\n        selection={this.selection}\n        selectedItems={this.props.selectedItems ? this.props.selectedItems : undefined}\n        onItemsDeleted={this.props.selectedItems ? this.props.onItemsRemoved : undefined}\n        {...this.selectedItemsListProps}\n      />\n    );\n  }\n\n  protected onInputChange = (value: string): void => {\n    this.setState({ queryString: value });\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.onQueryStringChanged(value);\n    }\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.props.inputProps && this.props.inputProps.onFocus) {\n      this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onInputClick = (ev: React.MouseEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.floatingPicker.current && this.inputElement) {\n      // Update the value if the input value is empty or it is different than the current inputText from the floatingPicker\n      const shoudUpdateValue = this.inputElement.value === '' || this.inputElement.value !== this.floatingPicker.current.inputText;\n      this.floatingPicker.current.showPicker(shoudUpdateValue);\n    }\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which !== KeyCodes.backspace) {\n      return;\n    }\n\n    if (this.selectedItemsList.current && this.items.length) {\n      if (\n        this.input.current &&\n        !this.input.current.isValueSelected &&\n        this.input.current.inputElement === document.activeElement &&\n        (this.input.current as Autofill).cursorLocation === 0\n      ) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeItemAt(this.items.length - 1);\n        this._onSelectedItemsChanged();\n      } else if (this.selectedItemsList.current.hasSelectedItems()) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeSelectedItems();\n        this._onSelectedItemsChanged();\n      }\n    }\n  };\n\n  protected onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.selectedItemsList.current) {\n      // Pass it down into the selected items list\n      this.selectedItemsList.current.onCopy(ev);\n    }\n  };\n\n  protected onPaste = (ev: React.ClipboardEvent<Autofill | HTMLInputElement>): void => {\n    if (this.props.onPaste) {\n      const inputText = ev.clipboardData.getData('Text');\n      ev.preventDefault();\n      this.props.onPaste(inputText);\n    }\n  };\n\n  protected _onSuggestionSelected = (item: T): void => {\n    const currentRenderedQueryString = this.props.currentRenderedQueryString;\n    const queryString = this.state.queryString;\n    if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n      const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected ? (this.props.onItemSelected as any)(item) : item;\n\n      if (processedItem === null) {\n        return;\n      }\n\n      const processedItemObject: T = processedItem as T;\n      const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n      let newItem: T;\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n          newItem = resolvedProcessedItem;\n          this._addProcessedItem(newItem);\n        });\n      } else {\n        newItem = processedItemObject;\n        this._addProcessedItem(newItem);\n      }\n    }\n  };\n\n  protected _onSelectedItemsChanged = (): void => {\n    this.focus();\n  };\n\n  private _addProcessedItem(newItem: T) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}