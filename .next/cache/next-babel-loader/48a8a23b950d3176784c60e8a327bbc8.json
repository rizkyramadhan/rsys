{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar FocusZone_1 = require(\"../../FocusZone\");\n\nvar Link_1 = require(\"../../Link\");\n\nvar Icon_1 = require(\"../../Icon\");\n\nvar Button_1 = require(\"../../Button\");\n\nvar DirectionalHint_1 = require(\"../../common/DirectionalHint\");\n\nvar ResizeGroup_1 = require(\"../../ResizeGroup\");\n\nvar Tooltip_1 = require(\"../../Tooltip\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\nvar OVERFLOW_KEY = 'overflow';\n\nvar nullFunction = function () {\n  return null;\n};\n/**\n * {@docCategory Breadcrumb}\n */\n\n\nvar BreadcrumbBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BreadcrumbBase, _super);\n\n  function BreadcrumbBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n\n    _this._onReduceData = function (data) {\n      var renderedItems = data.renderedItems,\n          renderedOverflowItems = data.renderedOverflowItems;\n      var overflowIndex = data.props.overflowIndex;\n      var movedItem = renderedItems[overflowIndex];\n      renderedItems = renderedItems.slice();\n      renderedItems.splice(overflowIndex, 1);\n      renderedOverflowItems = renderedOverflowItems.concat([movedItem]);\n\n      if (movedItem !== undefined) {\n        return tslib_1.__assign({}, data, {\n          renderedItems: renderedItems,\n          renderedOverflowItems: renderedOverflowItems\n        });\n      }\n    };\n\n    _this._onRenderBreadcrumb = function (data) {\n      var _a = data.props,\n          ariaLabel = _a.ariaLabel,\n          _b = _a.dividerAs,\n          DividerType = _b === void 0 ? Icon_1.Icon : _b,\n          _c = _a.onRenderItem,\n          onRenderItem = _c === void 0 ? _this._onRenderItem : _c,\n          overflowAriaLabel = _a.overflowAriaLabel,\n          overflowIndex = _a.overflowIndex;\n      var renderedOverflowItems = data.renderedOverflowItems,\n          renderedItems = data.renderedItems;\n      var contextualItems = renderedOverflowItems.map(function (item, index) {\n        return {\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? _this._onBreadcrumbClicked.bind(_this, item) : null,\n          href: item.href\n        };\n      }); // Find index of last rendered item so the divider icon\n      // knows not to render on that item\n\n      var lastItemIndex = renderedItems.length - 1;\n      var hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n      var itemElements = renderedItems.map(function (item, index) {\n        return React.createElement(\"li\", {\n          className: _this._classNames.listItem,\n          key: item.key || String(index)\n        }, onRenderItem(item, _this._onRenderItem), (index !== lastItemIndex || hasOverflowItems && index === overflowIndex - 1) && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: Utilities_1.getRTL() ? 'ChevronLeft' : 'ChevronRight',\n          item: item\n        }));\n      });\n\n      if (hasOverflowItems) {\n        itemElements.splice(overflowIndex, 0, React.createElement(\"li\", {\n          className: _this._classNames.overflow,\n          key: OVERFLOW_KEY\n        }, React.createElement(Button_1.IconButton, {\n          className: _this._classNames.overflowButton,\n          iconProps: {\n            iconName: 'More'\n          },\n          role: \"button\",\n          \"aria-haspopup\": \"true\",\n          ariaLabel: overflowAriaLabel,\n          onRenderMenuIcon: nullFunction,\n          menuProps: {\n            items: contextualItems,\n            directionalHint: DirectionalHint_1.DirectionalHint.bottomLeftEdge\n          }\n        }), overflowIndex !== lastItemIndex + 1 && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: Utilities_1.getRTL() ? 'ChevronLeft' : 'ChevronRight',\n          item: renderedOverflowItems[renderedOverflowItems.length - 1]\n        })));\n      }\n\n      var nativeProps = Utilities_1.getNativeProps(_this.props, Utilities_1.htmlElementProperties, ['className']);\n      return React.createElement(\"div\", tslib_1.__assign({\n        className: _this._classNames.root,\n        role: \"navigation\",\n        \"aria-label\": ariaLabel\n      }, nativeProps), React.createElement(FocusZone_1.FocusZone, tslib_1.__assign({\n        componentRef: _this._focusZone,\n        direction: FocusZone_1.FocusZoneDirection.horizontal\n      }, _this.props.focusZoneProps), React.createElement(\"ol\", {\n        className: _this._classNames.list\n      }, itemElements)));\n    };\n\n    _this._onRenderItem = function (item) {\n      if (item.onClick || item.href) {\n        return React.createElement(Link_1.Link, {\n          as: 'a',\n          className: _this._classNames.itemLink,\n          href: item.href,\n          \"aria-current\": item.isCurrentItem ? 'page' : undefined,\n          onClick: _this._onBreadcrumbClicked.bind(_this, item)\n        }, React.createElement(Tooltip_1.TooltipHost, tslib_1.__assign({\n          content: item.text,\n          overflowMode: Tooltip_1.TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), item.text));\n      } else {\n        return React.createElement(\"span\", {\n          className: _this._classNames.item\n        }, React.createElement(Tooltip_1.TooltipHost, tslib_1.__assign({\n          content: item.text,\n          overflowMode: Tooltip_1.TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), item.text));\n      }\n    };\n\n    _this._onBreadcrumbClicked = function (item, ev) {\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n\n    _this._validateProps(props);\n\n    return _this;\n  }\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n\n\n  BreadcrumbBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n\n  BreadcrumbBase.prototype.render = function () {\n    this._validateProps(this.props);\n\n    var _a = this.props,\n        _b = _a.onReduceData,\n        onReduceData = _b === void 0 ? this._onReduceData : _b,\n        overflowIndex = _a.overflowIndex,\n        maxDisplayedItems = _a.maxDisplayedItems,\n        items = _a.items,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles;\n    var renderedItems = items.slice();\n    var renderedOverflowItems = renderedItems.splice(overflowIndex, renderedItems.length - maxDisplayedItems);\n    var breadcrumbData = {\n      props: this.props,\n      renderedItems: renderedItems,\n      renderedOverflowItems: renderedOverflowItems\n    };\n    this._classNames = getClassNames(styles, {\n      className: className,\n      theme: theme\n    });\n    return React.createElement(ResizeGroup_1.ResizeGroup, {\n      onRenderData: this._onRenderBreadcrumb,\n      onReduceData: onReduceData,\n      data: breadcrumbData\n    });\n  };\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n\n\n  BreadcrumbBase.prototype._validateProps = function (props) {\n    var maxDisplayedItems = props.maxDisplayedItems,\n        overflowIndex = props.overflowIndex,\n        items = props.items;\n\n    if (overflowIndex < 0 || maxDisplayedItems > 1 && overflowIndex > maxDisplayedItems - 1 || items.length > 0 && overflowIndex > items.length - 1) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  };\n\n  BreadcrumbBase.defaultProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n  return BreadcrumbBase;\n}(Utilities_1.BaseComponent);\n\nexports.BreadcrumbBase = BreadcrumbBase;","map":{"version":3,"sources":["components/Breadcrumb/Breadcrumb.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, getRTL, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { IBreadcrumbProps, IBreadcrumbItem, IDividerAsProps, IBreadcrumbData } from './Breadcrumb.types';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport { IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.types';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends BaseComponent<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const { onReduceData = this._onReduceData, overflowIndex, maxDisplayedItems, items, className, theme, styles } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!\n    });\n\n    return <ResizeGroup onRenderData={this._onRenderBreadcrumb} onReduceData={onReduceData} data={breadcrumbData} />;\n  }\n\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    if (movedItem !== undefined) {\n      return { ...data, renderedItems, renderedOverflowItems };\n    }\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ReactType<IDividerAsProps>,\n      onRenderItem = this._onRenderItem,\n      overflowAriaLabel,\n      overflowIndex\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map((item, index) => ({\n      name: item.text,\n      key: item.key,\n      onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n      href: item.href\n    }));\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => (\n      <li className={this._classNames.listItem} key={item.key || String(index)}>\n        {onRenderItem(item, this._onRenderItem)}\n        {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n          <DividerType className={this._classNames.chevron} iconName={getRTL() ? 'ChevronLeft' : 'ChevronRight'} item={item} />\n        )}\n      </li>\n    ));\n\n    if (hasOverflowItems) {\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <IconButton\n            className={this._classNames.overflowButton}\n            iconProps={{ iconName: 'More' }}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={nullFunction}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL() ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, ['className']);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone componentRef={this._focusZone} direction={FocusZoneDirection.horizontal} {...this.props.focusZoneProps}>\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item: IBreadcrumbItem) => {\n    if (item.onClick || item.href) {\n      return (\n        <Link\n          as={'a'}\n          className={this._classNames.itemLink}\n          href={item.href}\n          aria-current={item.isCurrentItem ? 'page' : undefined}\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n        >\n          <TooltipHost content={item.text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {item.text}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      return (\n        <span className={this._classNames.item}>\n          <TooltipHost content={item.text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {item.text}\n          </TooltipHost>\n        </span>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}