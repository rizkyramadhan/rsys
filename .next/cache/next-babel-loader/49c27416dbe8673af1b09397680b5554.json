{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { BaseComponent, customizable, nullRender } from '../../../Utilities';\nimport { getStyles } from './CommandBarButton.styles';\n/**\n * {@docCategory Button}\n */\n\nvar CommandBarButton =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(CommandBarButton, _super);\n\n  function CommandBarButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Tell BaseComponent to bypass resolution of componentRef.\n     */\n\n\n    _this._skipComponentRefResolution = true;\n    return _this;\n  }\n\n  CommandBarButton.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        theme = _a.theme;\n    return React.createElement(BaseButton, tslib_1.__assign({}, this.props, {\n      variantClassName: \"ms-Button--commandBar\",\n      styles: getStyles(theme, styles),\n      onRenderDescription: nullRender\n    }));\n  };\n\n  CommandBarButton = tslib_1.__decorate([customizable('CommandBarButton', ['theme', 'styles'], true)], CommandBarButton);\n  return CommandBarButton;\n}(BaseComponent);\n\nexport { CommandBarButton };","map":{"version":3,"sources":["components/Button/CommandBarButton/CommandBarButton.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,aAAT,EAAwB,YAAxB,EAAsC,UAAtC,QAAwD,oBAAxD;AAEA,SAAS,SAAT,QAA0B,2BAA1B;AAEA;;;;AAIA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,EAAA,MAAA;;AADtC,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AAEE;;;;;AAGU,IAAA,KAAA,CAAA,2BAAA,GAA8B,IAA9B;;AAcX;;AAZQ,EAAA,gBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QAAE,MAAA,GAAA,EAAA,CAAA,MAAF;AAAA,QAAU,KAAA,GAAA,EAAA,CAAA,KAAV;AAEN,WACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,OAAA,CAAA,QAAA,CAAA,EAAA,EACL,KAAK,KADA,EACK;AACd,MAAA,gBAAgB,EAAC,uBADH;AAEd,MAAA,MAAM,EAAE,SAAS,CAAC,KAAD,EAAS,MAAT,CAFH;AAGd,MAAA,mBAAmB,EAAE;AAHP,KADL,CAAX,CADF;AAQD,GAXM;;AANI,EAAA,gBAAgB,GAAA,OAAA,CAAA,UAAA,CAAA,CAD5B,YAAY,CAAC,kBAAD,EAAqB,CAAC,OAAD,EAAU,QAAV,CAArB,EAA0C,IAA1C,CACgB,CAAA,EAAhB,gBAAgB,CAAhB;AAkBb,SAAA,gBAAA;AAAC,CAlBD,CAAsC,aAAtC,CAAA;;SAAa,gB","sourcesContent":["import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { BaseComponent, customizable, nullRender } from '../../../Utilities';\nimport { IButtonProps } from '../Button.types';\nimport { getStyles } from './CommandBarButton.styles';\n\n/**\n * {@docCategory Button}\n */\n@customizable('CommandBarButton', ['theme', 'styles'], true)\nexport class CommandBarButton extends BaseComponent<IButtonProps, {}> {\n  /**\n   * Tell BaseComponent to bypass resolution of componentRef.\n   */\n  protected _skipComponentRefResolution = true;\n\n  public render(): JSX.Element {\n    const { styles, theme } = this.props;\n\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName=\"ms-Button--commandBar\"\n        styles={getStyles(theme!, styles)}\n        onRenderDescription={nullRender}\n      />\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}