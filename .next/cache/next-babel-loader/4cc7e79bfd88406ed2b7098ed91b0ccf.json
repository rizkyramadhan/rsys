{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar Label_1 = require(\"../../Label\");\n\nvar KeytipData_1 = require(\"../../KeytipData\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\n\nvar ToggleBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ToggleBase, _super);\n\n  function ToggleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toggleButton = React.createRef();\n\n    _this._onClick = function (ev) {\n      var _a = _this.props,\n          disabled = _a.disabled,\n          checkedProp = _a.checked,\n          onChange = _a.onChange,\n          onChanged = _a.onChanged,\n          onClick = _a.onClick;\n      var checked = _this.state.checked;\n\n      if (!disabled) {\n        // Only update the state if the user hasn't provided it.\n        if (checkedProp === undefined) {\n          _this.setState({\n            checked: !checked\n          });\n        }\n\n        if (onChange) {\n          onChange(ev, !checked);\n        }\n\n        if (onChanged) {\n          onChanged(!checked);\n        }\n\n        if (onClick) {\n          onClick(ev);\n        }\n      }\n    };\n\n    _this._warnMutuallyExclusive({\n      checked: 'defaultChecked'\n    });\n\n    _this._warnDeprecations({\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange'\n    });\n\n    _this.state = {\n      checked: !!(props.checked || props.defaultChecked)\n    };\n    _this._id = props.id || Utilities_1.getId('Toggle');\n    return _this;\n  }\n\n  ToggleBase.getDerivedStateFromProps = function (props, state) {\n    if (props.checked === undefined) {\n      return state;\n    }\n\n    return tslib_1.__assign({}, state, {\n      checked: !!props.checked\n    });\n  };\n\n  _Object$defineProperty(ToggleBase.prototype, \"checked\", {\n    /**\n     * Gets the current checked state of the toggle.\n     */\n    get: function () {\n      return this.state.checked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ToggleBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.as,\n        RootType = _b === void 0 ? 'div' : _b,\n        className = _a.className,\n        theme = _a.theme,\n        disabled = _a.disabled,\n        keytipProps = _a.keytipProps,\n        label = _a.label,\n        ariaLabel = _a.ariaLabel,\n        onAriaLabel = _a.onAriaLabel,\n        offAriaLabel = _a.offAriaLabel,\n        offText = _a.offText,\n        onText = _a.onText,\n        styles = _a.styles,\n        inlineLabel = _a.inlineLabel;\n    var checked = this.state.checked;\n    var stateText = checked ? onText : offText;\n    var badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    var toggleNativeProps = Utilities_1.getNativeProps(this.props, Utilities_1.inputProperties, ['defaultChecked']);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      checked: checked,\n      inlineLabel: inlineLabel,\n      onOffMissing: !onText && !offText\n    });\n    var labelId = this._id + \"-label\";\n    var stateTextId = this._id + \"-stateText\"; // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label\n    // 4. onText (if checked) or offText (if not checked)\n\n    var labelledById = undefined;\n\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      } else if (stateText) {\n        labelledById = stateTextId;\n      }\n    }\n\n    return React.createElement(RootType, {\n      className: classNames.root,\n      hidden: toggleNativeProps.hidden\n    }, label && React.createElement(Label_1.Label, {\n      htmlFor: this._id,\n      className: classNames.label,\n      id: labelId\n    }, label), React.createElement(\"div\", {\n      className: classNames.container\n    }, React.createElement(KeytipData_1.KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: toggleNativeProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"button\", tslib_1.__assign({}, toggleNativeProps, keytipAttributes, {\n        className: classNames.pill,\n        disabled: disabled,\n        id: _this._id,\n        type: \"button\",\n        role: \"switch\" // ARIA 1.1 definition; \"checkbox\" in ARIA 1.0\n        ,\n        ref: _this._toggleButton,\n        \"aria-disabled\": disabled,\n        \"aria-checked\": checked,\n        \"aria-label\": ariaLabel ? ariaLabel : badAriaLabel,\n        \"data-is-focusable\": true,\n        onChange: _this._noop,\n        onClick: _this._onClick,\n        \"aria-labelledby\": labelledById\n      }), React.createElement(\"div\", {\n        className: classNames.thumb\n      }));\n    }), stateText && React.createElement(Label_1.Label, {\n      htmlFor: this._id,\n      className: classNames.text,\n      id: stateTextId\n    }, stateText)));\n  };\n\n  ToggleBase.prototype.focus = function () {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  };\n\n  ToggleBase.prototype._noop = function () {\n    /* no-op */\n  };\n\n  return ToggleBase;\n}(Utilities_1.BaseComponent);\n\nexports.ToggleBase = ToggleBase;","map":{"version":3,"sources":["components/Toggle/Toggle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction, getId, inputProperties, getNativeProps } from '../../Utilities';\nimport { IToggleProps, IToggle, IToggleStyleProps, IToggleStyles } from './Toggle.types';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IToggleState {\n  checked: boolean;\n}\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nexport class ToggleBase extends BaseComponent<IToggleProps, IToggleState> implements IToggle {\n  private _id: string;\n  private _toggleButton = React.createRef<HTMLButtonElement>();\n\n  public static getDerivedStateFromProps(props: IToggleProps, state: IToggleState): IToggleState {\n    if (props.checked === undefined) {\n      return state;\n    }\n\n    return {\n      ...state,\n      checked: !!props.checked\n    };\n  }\n\n  constructor(props: IToggleProps) {\n    super(props);\n\n    this._warnMutuallyExclusive({\n      checked: 'defaultChecked'\n    });\n\n    this._warnDeprecations({\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange'\n    });\n\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked)\n    };\n    this._id = props.id || getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.checked;\n  }\n\n  public render(): JSX.Element {\n    const {\n      as: RootType = 'div',\n      className,\n      theme,\n      disabled,\n      keytipProps,\n      label,\n      ariaLabel,\n      onAriaLabel,\n      offAriaLabel,\n      offText,\n      onText,\n      styles,\n      inlineLabel\n    } = this.props;\n    const { checked } = this.state;\n    const stateText = checked ? onText : offText;\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText\n    });\n\n    const labelId = `${this._id}-label`;\n    const stateTextId = `${this._id}-stateText`;\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label\n    // 4. onText (if checked) or offText (if not checked)\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      } else if (stateText) {\n        labelledById = stateTextId;\n      }\n    }\n\n    return (\n      <RootType className={classNames.root} hidden={(toggleNativeProps as any).hidden}>\n        {label && (\n          <Label htmlFor={this._id} className={classNames.label} id={labelId}>\n            {label}\n          </Label>\n        )}\n\n        <div className={classNames.container}>\n          <KeytipData keytipProps={keytipProps} ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']} disabled={disabled}>\n            {(keytipAttributes: any): JSX.Element => (\n              <button\n                {...toggleNativeProps}\n                {...keytipAttributes}\n                className={classNames.pill}\n                disabled={disabled}\n                id={this._id}\n                type=\"button\"\n                role=\"switch\" // ARIA 1.1 definition; \"checkbox\" in ARIA 1.0\n                ref={this._toggleButton}\n                aria-disabled={disabled}\n                aria-checked={checked}\n                aria-label={ariaLabel ? ariaLabel : badAriaLabel}\n                data-is-focusable={true}\n                onChange={this._noop}\n                onClick={this._onClick}\n                aria-labelledby={labelledById}\n              >\n                <div className={classNames.thumb} />\n              </button>\n            )}\n          </KeytipData>\n          {stateText && (\n            <Label htmlFor={this._id} className={classNames.text} id={stateTextId}>\n              {stateText}\n            </Label>\n          )}\n        </div>\n      </RootType>\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\n    const { disabled, checked: checkedProp, onChange, onChanged, onClick } = this.props;\n    const { checked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checkedProp === undefined) {\n        this.setState({\n          checked: !checked\n        });\n      }\n\n      if (onChange) {\n        onChange(ev, !checked);\n      }\n\n      if (onChanged) {\n        onChanged(!checked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  };\n\n  private _noop(): void {\n    /* no-op */\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}