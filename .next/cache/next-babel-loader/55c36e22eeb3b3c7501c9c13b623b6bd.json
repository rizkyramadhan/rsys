{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../../Utilities\");\n\nvar consts_1 = require(\"../../../utilities/color/consts\");\n\nvar getFullColorString_1 = require(\"../../../utilities/color/getFullColorString\");\n\nvar updateSV_1 = require(\"../../../utilities/color/updateSV\");\n\nvar clamp_1 = require(\"../../../utilities/color/clamp\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\n/**\n * {@docCategory ColorPicker}\n */\n\nvar ColorRectangleBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColorRectangleBase, _super);\n\n  function ColorRectangleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n\n    _this._onMouseDown = function (ev) {\n      _this._events.on(window, 'mousemove', _this._onMouseMove, true);\n\n      _this._events.on(window, 'mouseup', _this._disableEvents, true);\n\n      _this._onMouseMove(ev);\n    };\n\n    _this._onMouseMove = function (ev) {\n      var _a = _this.props,\n          color = _a.color,\n          onChange = _a.onChange;\n\n      if (!_this._root.current) {\n        return;\n      } // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off the\n      // event handlers and exit. (this may only be relevant while debugging)\n      // tslint:disable-next-line:no-bitwise\n\n\n      if (!(ev.buttons & 1)) {\n        _this._disableEvents();\n\n        return;\n      }\n\n      var newColor = _getNewColor(ev, color, _this._root.current);\n\n      if (newColor) {\n        _this.setState({\n          color: newColor\n        });\n\n        if (onChange) {\n          onChange(ev, newColor);\n        }\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._disableEvents = function () {\n      _this._events.off();\n    };\n\n    Utilities_1.initializeComponentRef(_this);\n    _this._events = new Utilities_1.EventGroup(_this);\n    var color = _this.props.color;\n    _this.state = {\n      color: color\n    };\n    return _this;\n  }\n\n  _Object$defineProperty(ColorRectangleBase.prototype, \"color\", {\n    get: function () {\n      return this.state.color;\n    },\n    enumerable: true,\n    configurable: true\n  }); // tslint:disable-next-line function-name\n\n\n  ColorRectangleBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    var color = newProps.color;\n    this.setState({\n      color: color\n    });\n  };\n\n  ColorRectangleBase.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n  };\n\n  ColorRectangleBase.prototype.render = function () {\n    var _a = this.props,\n        minSize = _a.minSize,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles;\n    var color = this.state.color;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    return React.createElement(\"div\", {\n      ref: this._root,\n      className: classNames.root,\n      style: {\n        minWidth: minSize,\n        minHeight: minSize,\n        backgroundColor: getFullColorString_1.getFullColorString(color)\n      },\n      onMouseDown: this._onMouseDown\n    }, React.createElement(\"div\", {\n      className: classNames.light\n    }), React.createElement(\"div\", {\n      className: classNames.dark\n    }), React.createElement(\"div\", {\n      className: classNames.thumb,\n      style: {\n        left: color.s + '%',\n        top: consts_1.MAX_COLOR_VALUE - color.v + '%',\n        backgroundColor: color.str\n      }\n    }));\n  };\n\n  ColorRectangleBase.defaultProps = {\n    minSize: 220\n  };\n  return ColorRectangleBase;\n}(React.Component);\n\nexports.ColorRectangleBase = ColorRectangleBase;\n/**\n * Exported for testing only.\n * @internal\n */\n\nfunction _getNewColor(ev, prevColor, root) {\n  var rectSize = root.getBoundingClientRect();\n  var sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  var vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n  return updateSV_1.updateSV(prevColor, clamp_1.clamp(sPercentage * consts_1.MAX_COLOR_SATURATION, consts_1.MAX_COLOR_SATURATION), clamp_1.clamp(consts_1.MAX_COLOR_VALUE - vPercentage * consts_1.MAX_COLOR_VALUE, consts_1.MAX_COLOR_VALUE));\n}\n\nexports._getNewColor = _getNewColor;","map":{"version":3,"sources":["components/ColorPicker/ColorRectangle/ColorRectangle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, EventGroup, initializeComponentRef } from '../../../Utilities';\nimport { IColor } from '../../../utilities/color/interfaces';\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from '../../../utilities/color/consts';\nimport { getFullColorString } from '../../../utilities/color/getFullColorString';\nimport { updateSV } from '../../../utilities/color/updateSV';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { IColorRectangleProps, IColorRectangleStyleProps, IColorRectangleStyles, IColorRectangle } from './ColorRectangle.types';\n\nconst getClassNames = classNamesFunction<IColorRectangleStyleProps, IColorRectangleStyles>();\n\nexport interface IColorRectangleState {\n  color: IColor;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorRectangleBase extends React.Component<IColorRectangleProps, IColorRectangleState> implements IColorRectangle {\n  public static defaultProps = {\n    minSize: 220\n  };\n\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n\n  constructor(props: IColorRectangleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    const { color } = this.props;\n\n    this.state = {\n      color: color\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IColorRectangleProps): void {\n    const { color } = newProps;\n\n    this.setState({\n      color: color\n    });\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { minSize, theme, className, styles } = this.props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className\n    });\n\n    return (\n      <div\n        ref={this._root}\n        className={classNames.root}\n        style={{ minWidth: minSize, minHeight: minSize, backgroundColor: getFullColorString(color) }}\n        onMouseDown={this._onMouseDown}\n      >\n        <div className={classNames.light} />\n        <div className={classNames.dark} />\n        <div\n          className={classNames.thumb}\n          style={{ left: color!.s + '%', top: MAX_COLOR_VALUE - color!.v + '%', backgroundColor: color!.str }}\n        />\n      </div>\n    );\n  }\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._disableEvents, true);\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { color, onChange } = this.props;\n\n    if (!this._root.current) {\n      return;\n    }\n\n    // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off the\n    // event handlers and exit. (this may only be relevant while debugging)\n    // tslint:disable-next-line:no-bitwise\n    if (!(ev.buttons & 1)) {\n      this._disableEvents();\n      return;\n    }\n\n    const newColor = _getNewColor(ev, color, this._root.current);\n    if (newColor) {\n      this.setState({\n        color: newColor\n      });\n\n      if (onChange) {\n        onChange(ev, newColor);\n      }\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _disableEvents = (): void => {\n    this._events.off();\n  };\n}\n\n/**\n * Exported for testing only.\n * @internal\n */\nexport function _getNewColor(ev: React.MouseEvent<HTMLElement>, prevColor: IColor, root: HTMLElement): IColor | undefined {\n  const rectSize = root.getBoundingClientRect();\n\n  const sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  const vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n\n  return updateSV(\n    prevColor,\n    clamp(sPercentage * MAX_COLOR_SATURATION, MAX_COLOR_SATURATION),\n    clamp(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE, MAX_COLOR_VALUE)\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}