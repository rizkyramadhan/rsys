{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar DialogContent_types_1 = require(\"./DialogContent.types\");\n\nvar Modal_1 = require(\"../../Modal\");\n\nvar withResponsiveMode_1 = require(\"../../utilities/decorators/withResponsiveMode\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\n\nvar DialogContent_1 = require(\"./DialogContent\");\n\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false\n};\nvar DefaultDialogContentProps = {\n  type: DialogContent_types_1.DialogType.normal,\n  className: '',\n  topButtonsProps: []\n};\n\nvar DialogBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DialogBase, _super);\n\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getSubTextId = function () {\n      var _a = _this.props,\n          ariaDescribedById = _a.ariaDescribedById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          subText = _a.subText;\n      var id = ariaDescribedById || modalProps && modalProps.subtitleAriaId;\n\n      if (!id) {\n        id = (subText || dialogContentProps && dialogContentProps.subText) && _this._defaultSubTextId;\n      }\n\n      return id;\n    };\n\n    _this._getTitleTextId = function () {\n      var _a = _this.props,\n          ariaLabelledById = _a.ariaLabelledById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          title = _a.title;\n      var id = ariaLabelledById || modalProps && modalProps.titleAriaId;\n\n      if (!id) {\n        id = (title || dialogContentProps && dialogContentProps.title) && _this._defaultTitleTextId;\n      }\n\n      return id;\n    };\n\n    _this._id = Utilities_1.getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      Utilities_1.warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n\n    return _this;\n  }\n\n  DialogBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        containerClassName = _a.containerClassName,\n        contentClassName = _a.contentClassName,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n        firstFocusableSelector = _a.firstFocusableSelector,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        styles = _a.styles,\n        hidden = _a.hidden,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n        isBlocking = _a.isBlocking,\n        isClickableOutsideFocusTrap = _a.isClickableOutsideFocusTrap,\n        isDarkOverlay = _a.isDarkOverlay,\n        isOpen = _a.isOpen,\n        onDismiss = _a.onDismiss,\n        onDismissed = _a.onDismissed,\n        onLayerDidMount = _a.onLayerDidMount,\n        responsiveMode = _a.responsiveMode,\n        subText = _a.subText,\n        theme = _a.theme,\n        title = _a.title,\n        topButtonsProps = _a.topButtonsProps,\n        type = _a.type,\n        minWidth = _a.minWidth,\n        maxWidth = _a.maxWidth,\n        modalProps = _a.modalProps;\n\n    var mergedLayerProps = tslib_1.__assign({}, modalProps ? modalProps.layerProps : {\n      onLayerDidMount: onLayerDidMount\n    });\n\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    var dialogDraggableClassName;\n    var dragOptions; // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = tslib_1.__assign({}, modalProps.dragOptions, {\n        dragHandleSelector: \".\" + dialogDraggableClassName\n      });\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n\n    var mergedModalProps = tslib_1.__assign({}, DefaultModalProps, modalProps, {\n      layerProps: mergedLayerProps,\n      dragOptions: dragOptions\n    });\n\n    var dialogContentProps = tslib_1.__assign({}, DefaultDialogContentProps, this.props.dialogContentProps, {\n      draggableHeaderClassName: dialogDraggableClassName\n    });\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className || mergedModalProps.className,\n      containerClassName: containerClassName || mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal_1.Modal, tslib_1.__assign({\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      onDismissed: onDismissed,\n      responsiveMode: responsiveMode\n    }, mergedModalProps, {\n      isDarkOverlay: isDarkOverlay !== undefined ? isDarkOverlay : mergedModalProps.isDarkOverlay,\n      isBlocking: isBlocking !== undefined ? isBlocking : mergedModalProps.isBlocking,\n      isOpen: isOpen !== undefined ? isOpen : !hidden,\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss ? onDismiss : mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent_1.DialogContent, tslib_1.__assign({\n      titleId: this._defaultTitleTextId,\n      subTextId: this._defaultSubTextId,\n      title: title,\n      subText: subText,\n      showCloseButton: isBlocking !== undefined ? !isBlocking : !mergedModalProps.isBlocking,\n      topButtonsProps: topButtonsProps ? topButtonsProps : dialogContentProps.topButtonsProps,\n      type: type !== undefined ? type : dialogContentProps.type,\n      onDismiss: onDismiss ? onDismiss : dialogContentProps.onDismiss,\n      className: contentClassName || dialogContentProps.className\n    }, dialogContentProps), this.props.children));\n  };\n\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = tslib_1.__decorate([withResponsiveMode_1.withResponsiveMode], DialogBase);\n  return DialogBase;\n}(React.Component);\n\nexports.DialogBase = DialogBase;","map":{"version":3,"sources":["components/Dialog/Dialog.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\nimport { DialogType, IDialogContentProps } from './DialogContent.types';\nimport { Modal, IModalProps, IDragOptions } from '../../Modal';\nimport { ILayerProps } from '../../Layer';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n};\n\n@withResponsiveMode\nexport class DialogBase extends React.Component<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      styles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n      minWidth,\n      maxWidth,\n      modalProps\n    } = this.props;\n\n    const mergedLayerProps: ILayerProps = {\n      ...(modalProps ? modalProps.layerProps : { onLayerDidMount })\n    };\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    let dialogDraggableClassName: string | undefined;\n    let dragOptions: IDragOptions | undefined;\n\n    // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = {\n        ...modalProps.dragOptions,\n        dragHandleSelector: `.${dialogDraggableClassName}`\n      };\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n\n    const mergedModalProps = {\n      ...DefaultModalProps,\n      ...modalProps,\n      layerProps: mergedLayerProps,\n      dragOptions\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      ...DefaultDialogContentProps,\n      ...this.props.dialogContentProps,\n      draggableHeaderClassName: dialogDraggableClassName\n    };\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || mergedModalProps.className,\n      containerClassName: containerClassName || mergedModalProps.containerClassName,\n      hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n\n    return (\n      <Modal\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        firstFocusableSelector={firstFocusableSelector}\n        forceFocusInsideTrap={forceFocusInsideTrap}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        isClickableOutsideFocusTrap={isClickableOutsideFocusTrap}\n        onDismissed={onDismissed}\n        responsiveMode={responsiveMode}\n        {...mergedModalProps}\n        isDarkOverlay={isDarkOverlay !== undefined ? isDarkOverlay : mergedModalProps.isDarkOverlay}\n        isBlocking={isBlocking !== undefined ? isBlocking : mergedModalProps.isBlocking}\n        isOpen={isOpen !== undefined ? isOpen : !hidden}\n        className={classNames.root}\n        containerClassName={classNames.main}\n        onDismiss={onDismiss ? onDismiss : mergedModalProps.onDismiss}\n        subtitleAriaId={this._getSubTextId()}\n        titleAriaId={this._getTitleTextId()}\n      >\n        <DialogContent\n          titleId={this._defaultTitleTextId}\n          subTextId={this._defaultSubTextId}\n          title={title}\n          subText={subText}\n          showCloseButton={isBlocking !== undefined ? !isBlocking : !mergedModalProps.isBlocking}\n          topButtonsProps={topButtonsProps ? topButtonsProps : dialogContentProps!.topButtonsProps}\n          type={type !== undefined ? type : dialogContentProps!.type}\n          onDismiss={onDismiss ? onDismiss : dialogContentProps!.onDismiss}\n          className={contentClassName || dialogContentProps!.className}\n          {...dialogContentProps}\n        >\n          {this.props.children}\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = ariaDescribedById || (modalProps && modalProps.subtitleAriaId);\n\n    if (!id) {\n      id = (subText || (dialogContentProps && dialogContentProps.subText)) && this._defaultSubTextId;\n    }\n\n    return id;\n  };\n\n  private _getTitleTextId = (): string | undefined => {\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = ariaLabelledById || (modalProps && modalProps.titleAriaId);\n\n    if (!id) {\n      id = (title || (dialogContentProps && dialogContentProps.title)) && this._defaultTitleTextId;\n    }\n\n    return id;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}