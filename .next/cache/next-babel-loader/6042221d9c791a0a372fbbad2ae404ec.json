{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/** @jsx withSlots */\n\nimport { withSlots, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nexport var TextView = function TextView(props) {\n  if (!props.children) {\n    return null;\n  }\n\n  var block = props.block,\n      className = props.className,\n      _a = props.as,\n      RootType = _a === void 0 ? 'span' : _a,\n      variant = props.variant,\n      nowrap = props.nowrap,\n      rest = tslib_1.__rest(props, [\"block\", \"className\", \"as\", \"variant\", \"nowrap\"]);\n\n  var Slots = getSlots(props, {\n    root: RootType\n  });\n  return withSlots(Slots.root, tslib_1.__assign({}, getNativeProps(rest, htmlElementProperties)));\n};","map":{"version":3,"sources":["components/Text/Text.view.tsx"],"names":[],"mappings":";AAAA;;AACA,SAAS,SAAT,EAAoB,QAApB,QAAoC,kBAApC;AACA,SAAS,cAAT,EAAyB,qBAAzB,QAAsD,iBAAtD;AAGA,OAAO,IAAM,QAAQ,GAA2B,SAAnC,QAAmC,CAAA,KAAA,EAAK;AACnD,MAAI,CAAC,KAAK,CAAC,QAAX,EAAqB;AACnB,WAAO,IAAP;AACD;;AAEO,MAAA,KAAA,GAAA,KAAA,CAAA,KAAA;AAAA,MAAO,SAAA,GAAA,KAAA,CAAA,SAAP;AAAA,MAAkB,EAAA,GAAA,KAAA,CAAA,EAAlB;AAAA,MAAkB,QAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,EAAlB;AAAA,MAAyC,OAAA,GAAA,KAAA,CAAA,OAAzC;AAAA,MAAkD,MAAA,GAAA,KAAA,CAAA,MAAlD;AAAA,MAA0D,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,IAAA,EAAA,SAAA,EAAA,QAAA,CAAA,CAA1D;;AAER,MAAM,KAAK,GAAG,QAAQ,CAAyB,KAAzB,EAAgC;AACpD,IAAA,IAAI,EAAE;AAD8C,GAAhC,CAAtB;AAIA,SAAO,SAAA,CAAC,KAAK,CAAC,IAAP,EAAW,OAAA,CAAA,QAAA,CAAA,EAAA,EAAK,cAAc,CAAC,IAAD,EAAO,qBAAP,CAAnB,CAAX,CAAP;AACD,CAZM","sourcesContent":["/** @jsx withSlots */\nimport { withSlots, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  if (!props.children) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}