{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, css, nullRender } from '../../Utilities';\nimport { OverflowSet } from '../../OverflowSet';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { classNamesFunction } from '../../Utilities';\nimport { CommandBarButton } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nvar getClassNames = classNamesFunction();\n\nvar CommandBarBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(CommandBarBase, _super);\n\n  function CommandBarBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._overflowSet = React.createRef();\n    _this._resizeGroup = React.createRef();\n\n    _this._onRenderData = function (data) {\n      return React.createElement(FocusZone, {\n        className: css(_this._classNames.root),\n        direction: FocusZoneDirection.horizontal,\n        role: 'menubar',\n        \"aria-label\": _this.props.ariaLabel\n      }, React.createElement(OverflowSet, {\n        componentRef: _this._resolveRef('_overflowSet'),\n        className: css(_this._classNames.primarySet),\n        doNotContainWithinFocusZone: true,\n        role: 'presentation',\n        items: data.primaryItems,\n        overflowItems: data.overflowItems.length ? data.overflowItems : undefined,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: _this._onRenderOverflowButton\n      }), data.farItems && React.createElement(OverflowSet, {\n        className: css(_this._classNames.secondarySet),\n        doNotContainWithinFocusZone: true,\n        role: 'presentation',\n        items: data.farItems,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: nullRender\n      }));\n    };\n\n    _this._onRenderItem = function (item) {\n      if (item.onRender) {\n        // These are the top level items, there is no relevant menu dismissing function to\n        // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n        return item.onRender(item, function () {\n          return undefined;\n        });\n      }\n\n      var itemText = item.text || item.name;\n\n      var commandButtonProps = tslib_1.__assign({\n        allowDisabledFocus: true,\n        role: 'menuitem'\n      }, item, {\n        styles: tslib_1.__assign({\n          root: {\n            height: '100%'\n          },\n          label: {\n            whiteSpace: 'nowrap'\n          }\n        }, item.buttonStyles),\n        className: css('ms-CommandBarItem-link', item.className),\n        text: !item.iconOnly ? itemText : undefined,\n        menuProps: item.subMenuProps,\n        onClick: _this._onButtonClick(item)\n      });\n\n      if (item.iconOnly && itemText !== undefined) {\n        return React.createElement(TooltipHost, tslib_1.__assign({\n          content: itemText\n        }, item.tooltipHostProps), _this._commandButton(item, commandButtonProps));\n      }\n\n      return _this._commandButton(item, commandButtonProps);\n    };\n\n    _this._commandButton = function (item, props) {\n      if (_this.props.buttonAs) {\n        var Type = _this.props.buttonAs;\n        return React.createElement(Type, tslib_1.__assign({}, props, {\n          defaultRender: CommandBarButton\n        }));\n      }\n\n      if (item.commandBarButtonAs) {\n        var Type = item.commandBarButtonAs;\n        return React.createElement(Type, tslib_1.__assign({}, props));\n      }\n\n      return React.createElement(CommandBarButton, tslib_1.__assign({}, props, {\n        defaultRender: CommandBarButton\n      }));\n    };\n\n    _this._onRenderOverflowButton = function (overflowItems) {\n      var _a = _this.props,\n          _b = _a.overflowButtonAs,\n          OverflowButtonType = _b === void 0 ? CommandBarButton : _b,\n          _c = _a.overflowButtonProps // assure that props is not empty\n      ,\n          overflowButtonProps = _c === void 0 ? {} : _c // assure that props is not empty\n      ;\n      var combinedOverflowItems = (overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : []).concat(overflowItems);\n\n      var overflowProps = tslib_1.__assign({}, overflowButtonProps, {\n        styles: tslib_1.__assign({\n          menuIcon: {\n            fontSize: '17px'\n          }\n        }, overflowButtonProps.styles),\n        className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n        menuProps: tslib_1.__assign({}, overflowButtonProps.menuProps, {\n          items: combinedOverflowItems\n        }),\n        menuIconProps: tslib_1.__assign({\n          iconName: 'More'\n        }, overflowButtonProps.menuIconProps)\n      });\n\n      return React.createElement(OverflowButtonType, tslib_1.__assign({}, overflowProps));\n    };\n\n    _this._onReduceData = function (data) {\n      var _a = _this.props,\n          shiftOnReduce = _a.shiftOnReduce,\n          onDataReduced = _a.onDataReduced;\n      var primaryItems = data.primaryItems,\n          overflowItems = data.overflowItems,\n          cacheKey = data.cacheKey; // Use first item if shiftOnReduce, otherwise use last item\n\n      var movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n      if (movedItem !== undefined) {\n        movedItem.renderedInOverflow = true;\n        overflowItems = [movedItem].concat(overflowItems);\n        primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n\n        var newData = tslib_1.__assign({}, data, {\n          primaryItems: primaryItems,\n          overflowItems: overflowItems\n        });\n\n        cacheKey = _this._computeCacheKey(newData);\n\n        if (onDataReduced) {\n          onDataReduced(movedItem);\n        }\n\n        newData.cacheKey = cacheKey;\n        return newData;\n      }\n\n      return undefined;\n    };\n\n    _this._onGrowData = function (data) {\n      var _a = _this.props,\n          shiftOnReduce = _a.shiftOnReduce,\n          onDataGrown = _a.onDataGrown;\n      var minimumOverflowItems = data.minimumOverflowItems;\n      var primaryItems = data.primaryItems,\n          overflowItems = data.overflowItems,\n          cacheKey = data.cacheKey;\n      var movedItem = overflowItems[0]; // Make sure that moved item exists and is not one of the original overflow items\n\n      if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n        movedItem.renderedInOverflow = false;\n        overflowItems = overflowItems.slice(1); // if shiftOnReduce, movedItem goes first, otherwise, last.\n\n        primaryItems = shiftOnReduce ? [movedItem].concat(primaryItems) : primaryItems.concat([movedItem]);\n\n        var newData = tslib_1.__assign({}, data, {\n          primaryItems: primaryItems,\n          overflowItems: overflowItems\n        });\n\n        cacheKey = _this._computeCacheKey(newData);\n\n        if (onDataGrown) {\n          onDataGrown(movedItem);\n        }\n\n        newData.cacheKey = cacheKey;\n        return newData;\n      }\n\n      return undefined;\n    };\n\n    return _this;\n  }\n\n  CommandBarBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        items = _a.items,\n        overflowItems = _a.overflowItems,\n        farItems = _a.farItems,\n        styles = _a.styles,\n        theme = _a.theme,\n        dataDidRender = _a.dataDidRender,\n        _b = _a.onReduceData,\n        onReduceData = _b === void 0 ? this._onReduceData : _b,\n        _c = _a.onGrowData,\n        onGrowData = _c === void 0 ? this._onGrowData : _c;\n    var commandBarData = {\n      primaryItems: items.slice(),\n      overflowItems: overflowItems.slice(),\n      minimumOverflowItems: overflowItems.slice().length,\n      farItems: farItems,\n      cacheKey: ''\n    };\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    });\n    return React.createElement(ResizeGroup, {\n      componentRef: this._resizeGroup,\n      className: className,\n      data: commandBarData,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      onRenderData: this._onRenderData,\n      dataDidRender: dataDidRender\n    });\n  };\n\n  CommandBarBase.prototype.focus = function () {\n    var overflowSet = this._overflowSet.current;\n    overflowSet && overflowSet.focus();\n  };\n\n  CommandBarBase.prototype.remeasure = function () {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  };\n\n  CommandBarBase.prototype._onButtonClick = function (item) {\n    return function (ev) {\n      // inactive is deprecated. remove check in 7.0\n      if (item.inactive) {\n        return;\n      }\n\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  };\n\n  CommandBarBase.prototype._computeCacheKey = function (data) {\n    var primaryItems = data.primaryItems,\n        _a = data.farItems,\n        farItems = _a === void 0 ? [] : _a,\n        overflowItems = data.overflowItems;\n\n    var returnKey = function returnKey(acc, current) {\n      var _a = current.cacheKey,\n          cacheKey = _a === void 0 ? current.key : _a;\n      return acc + cacheKey;\n    };\n\n    var primaryKey = primaryItems.reduce(returnKey, '');\n    var farKey = farItems.reduce(returnKey, '');\n    var overflowKey = !!overflowItems.length ? 'overflow' : '';\n    return [primaryKey, farKey, overflowKey].join(' ');\n  };\n\n  CommandBarBase.defaultProps = {\n    items: [],\n    overflowItems: []\n  };\n  return CommandBarBase;\n}(BaseComponent);\n\nexport { CommandBarBase };","map":{"version":3,"sources":["components/CommandBar/CommandBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { BaseComponent, css, nullRender } from '../../Utilities';\nimport { ICommandBar, ICommandBarItemProps, ICommandBarProps, ICommandBarStyleProps, ICommandBarStyles } from './CommandBar.types';\nimport { IOverflowSet, OverflowSet } from '../../OverflowSet';\nimport { IResizeGroup, ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { classNamesFunction } from '../../Utilities';\nimport { CommandBarButton, IButtonProps } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\n\nconst getClassNames = classNamesFunction<ICommandBarStyleProps, ICommandBarStyles>();\n\nexport interface ICommandBarData {\n  /**\n   * Items being rendered in the primary region\n   */\n  primaryItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered in the overflow\n   */\n  overflowItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered on the far side\n   */\n  farItems: ICommandBarItemProps[] | undefined;\n  /**\n   * Length of original overflowItems to ensure that they are not moved into primary region on resize\n   */\n  minimumOverflowItems: number;\n  /**\n   * Unique string used to cache the width of the command bar\n   */\n  cacheKey: string;\n}\n\nexport class CommandBarBase extends BaseComponent<ICommandBarProps, {}> implements ICommandBar {\n  public static defaultProps: ICommandBarProps = {\n    items: [],\n    overflowItems: []\n  };\n\n  private _overflowSet = React.createRef<IOverflowSet>();\n  private _resizeGroup = React.createRef<IResizeGroup>();\n  private _classNames: { [key in keyof ICommandBarStyles]: string };\n\n  public render(): JSX.Element {\n    const {\n      className,\n      items,\n      overflowItems,\n      farItems,\n      styles,\n      theme,\n      dataDidRender,\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData\n    } = this.props;\n\n    const commandBarData: ICommandBarData = {\n      primaryItems: [...items],\n      overflowItems: [...overflowItems!],\n      minimumOverflowItems: [...overflowItems!].length, // for tracking\n      farItems,\n      cacheKey: ''\n    };\n\n    this._classNames = getClassNames(styles!, { theme: theme! });\n\n    return (\n      <ResizeGroup\n        componentRef={this._resizeGroup}\n        className={className}\n        data={commandBarData}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        onRenderData={this._onRenderData}\n        dataDidRender={dataDidRender}\n      />\n    );\n  }\n\n  public focus(): void {\n    const { current: overflowSet } = this._overflowSet;\n\n    overflowSet && overflowSet.focus();\n  }\n\n  public remeasure(): void {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  }\n\n  private _onRenderData = (data: ICommandBarData): JSX.Element => {\n    return (\n      <FocusZone\n        className={css(this._classNames.root)}\n        direction={FocusZoneDirection.horizontal}\n        role={'menubar'}\n        aria-label={this.props.ariaLabel}\n      >\n        {/*Primary Items*/}\n        <OverflowSet\n          componentRef={this._resolveRef('_overflowSet')}\n          className={css(this._classNames.primarySet)}\n          doNotContainWithinFocusZone={true}\n          role={'presentation'}\n          items={data.primaryItems}\n          overflowItems={data.overflowItems.length ? data.overflowItems : undefined}\n          onRenderItem={this._onRenderItem}\n          onRenderOverflowButton={this._onRenderOverflowButton}\n        />\n\n        {/*Secondary Items*/}\n        {data.farItems && (\n          <OverflowSet\n            className={css(this._classNames.secondarySet)}\n            doNotContainWithinFocusZone={true}\n            role={'presentation'}\n            items={data.farItems}\n            onRenderItem={this._onRenderItem}\n            onRenderOverflowButton={nullRender}\n          />\n        )}\n      </FocusZone>\n    );\n  };\n\n  private _onRenderItem = (item: ICommandBarItemProps): JSX.Element | React.ReactNode => {\n    if (item.onRender) {\n      // These are the top level items, there is no relevant menu dismissing function to\n      // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n      return item.onRender(item, () => undefined);\n    }\n\n    const itemText = item.text || item.name;\n    const commandButtonProps: ICommandBarItemProps = {\n      allowDisabledFocus: true,\n      role: 'menuitem',\n      ...item,\n      styles: { root: { height: '100%' }, label: { whiteSpace: 'nowrap' }, ...item.buttonStyles },\n      className: css('ms-CommandBarItem-link', item.className),\n      text: !item.iconOnly ? itemText : undefined,\n      menuProps: item.subMenuProps,\n      onClick: this._onButtonClick(item)\n    };\n\n    if (item.iconOnly && itemText !== undefined) {\n      return (\n        <TooltipHost content={itemText} {...item.tooltipHostProps}>\n          {this._commandButton(item, commandButtonProps)}\n        </TooltipHost>\n      );\n    }\n\n    return this._commandButton(item, commandButtonProps);\n  };\n\n  private _commandButton = (item: ICommandBarItemProps, props: ICommandBarItemProps): JSX.Element => {\n    if (this.props.buttonAs) {\n      const Type = this.props.buttonAs;\n      return <Type {...props as IButtonProps} defaultRender={CommandBarButton} />;\n    }\n    if (item.commandBarButtonAs) {\n      const Type = item.commandBarButtonAs;\n      return <Type {...props as ICommandBarItemProps} />;\n    }\n    return <CommandBarButton {...props as IButtonProps} defaultRender={CommandBarButton} />;\n  };\n\n  private _onButtonClick(item: ICommandBarItemProps): (ev: React.MouseEvent<HTMLButtonElement>) => void {\n    return ev => {\n      // inactive is deprecated. remove check in 7.0\n      if (item.inactive) {\n        return;\n      }\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  }\n\n  private _onRenderOverflowButton = (overflowItems: ICommandBarItemProps[]): JSX.Element => {\n    const {\n      overflowButtonAs: OverflowButtonType = CommandBarButton,\n      overflowButtonProps = {} // assure that props is not empty\n    } = this.props;\n\n    const combinedOverflowItems: ICommandBarItemProps[] = [\n      ...(overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : []),\n      ...overflowItems\n    ];\n\n    const overflowProps: IButtonProps = {\n      ...overflowButtonProps,\n      styles: { menuIcon: { fontSize: '17px' }, ...overflowButtonProps.styles },\n      className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n      menuProps: { ...overflowButtonProps.menuProps, items: combinedOverflowItems },\n      menuIconProps: { iconName: 'More', ...overflowButtonProps.menuIconProps }\n    };\n\n    return <OverflowButtonType {...overflowProps as IButtonProps} />;\n  };\n\n  private _computeCacheKey(data: ICommandBarData): string {\n    const { primaryItems, farItems = [], overflowItems } = data;\n    const returnKey = (acc: string, current: ICommandBarItemProps): string => {\n      const { cacheKey = current.key } = current;\n      return acc + cacheKey;\n    };\n\n    const primaryKey = primaryItems.reduce(returnKey, '');\n    const farKey = farItems.reduce(returnKey, '');\n    const overflowKey = !!overflowItems.length ? 'overflow' : '';\n\n    return [primaryKey, farKey, overflowKey].join(' ');\n  }\n\n  private _onReduceData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataReduced } = this.props;\n    let { primaryItems, overflowItems, cacheKey } = data;\n\n    // Use first item if shiftOnReduce, otherwise use last item\n    const movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n    if (movedItem !== undefined) {\n      movedItem.renderedInOverflow = true;\n\n      overflowItems = [movedItem, ...overflowItems];\n      primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey(newData);\n\n      if (onDataReduced) {\n        onDataReduced(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n\n  private _onGrowData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataGrown } = this.props;\n    const { minimumOverflowItems } = data;\n    let { primaryItems, overflowItems, cacheKey } = data;\n    const movedItem = overflowItems[0];\n\n    // Make sure that moved item exists and is not one of the original overflow items\n    if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n      movedItem.renderedInOverflow = false;\n\n      overflowItems = overflowItems.slice(1);\n      // if shiftOnReduce, movedItem goes first, otherwise, last.\n      primaryItems = shiftOnReduce ? [movedItem, ...primaryItems] : [...primaryItems, movedItem];\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey(newData);\n\n      if (onDataGrown) {\n        onDataGrown(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}