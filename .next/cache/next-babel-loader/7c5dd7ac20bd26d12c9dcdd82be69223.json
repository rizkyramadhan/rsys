{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nexport var getIconContent = memoizeFunction(function (iconName) {\n  var iconDefinition = getIcon(iconName) || {\n    subset: {\n      className: undefined\n    },\n    code: undefined\n  };\n  return {\n    children: iconDefinition.code,\n    iconClassName: iconDefinition.subset.className\n  };\n});\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\n\nexport var FontIcon = function FontIcon(props) {\n  var iconName = props.iconName,\n      className = props.className;\n\n  var _a = getIconContent(iconName),\n      iconClassName = _a.iconClassName,\n      children = _a.children;\n\n  var nativeProps = getNativeProps(props, htmlElementProperties);\n  var containerProps = props['aria-label'] ? {} : {\n    role: 'presentation',\n    'aria-hidden': true\n  };\n  return React.createElement(\"i\", tslib_1.__assign({\n    \"data-icon-name\": iconName\n  }, containerProps, nativeProps, {\n    className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)\n  }), children);\n};\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\n\nexport var getFontIcon = memoizeFunction(function (iconName, className, ariaLabel) {\n  return FontIcon({\n    iconName: iconName,\n    className: className,\n    'aria-label': ariaLabel\n  });\n});","map":{"version":3,"sources":["components/Icon/FontIcon.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAGA,SAAS,UAAT,EAAqB,OAArB,QAAoC,eAApC;AACA,SAAS,GAAT,EAAc,cAAd,EAA8B,qBAA9B,EAAqD,eAArD,QAA4E,iBAA5E;AACA,SAAS,OAAT,QAAwB,eAAxB;AAEA,OAAO,IAAM,cAAc,GAAG,eAAe,CAAC,UAAC,QAAD,EAAkB;AAC9D,MAAM,cAAc,GAAG,OAAO,CAAC,QAAD,CAAP,IAAqB;AAC1C,IAAA,MAAM,EAAE;AACN,MAAA,SAAS,EAAE;AADL,KADkC;AAI1C,IAAA,IAAI,EAAE;AAJoC,GAA5C;AAOA,SAAO;AACL,IAAA,QAAQ,EAAE,cAAc,CAAC,IADpB;AAEL,IAAA,aAAa,EAAE,cAAc,CAAC,MAAf,CAAsB;AAFhC,GAAP;AAID,CAZ4C,CAAtC;AAcP;;;;;;AAKA,OAAO,IAAM,QAAQ,GAA4C,SAApD,QAAoD,CAAA,KAAA,EAAK;AAC5D,MAAA,QAAA,GAAA,KAAA,CAAA,QAAA;AAAA,MAAU,SAAA,GAAA,KAAA,CAAA,SAAV;;AACF,MAAA,EAAA,GAAA,cAAA,CAAA,QAAA,CAAA;AAAA,MAAE,aAAA,GAAA,EAAA,CAAA,aAAF;AAAA,MAAiB,QAAA,GAAA,EAAA,CAAA,QAAjB;;AAEN,MAAM,WAAW,GAAG,cAAc,CAAoC,KAApC,EAA2C,qBAA3C,CAAlC;AACA,MAAM,cAAc,GAAG,KAAK,CAAC,YAAD,CAAL,GACnB,EADmB,GAEnB;AACE,IAAA,IAAI,EAAE,cADR;AAEE,mBAAe;AAFjB,GAFJ;AAOA,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,OAAA,CAAA,QAAA,CAAA;AAAA,sBACkB;AADlB,GAAA,EAEM,cAFN,EAGM,WAHN,EAGiB;AACf,IAAA,SAAS,EAAE,GAAG,CAAC,OAAD,EAAU,UAAU,CAAC,IAArB,EAA2B,aAA3B,EAA0C,CAAC,QAAD,IAAa,UAAU,CAAC,WAAlE,EAA+E,SAA/E;AADC,GAHjB,CAAA,EAMG,QANH,CADF;AAUD,CAtBM;AAwBP;;;;;;;;AAOA,OAAO,IAAM,WAAW,GAAG,eAAe,CAAC,UAAC,QAAD,EAAmB,SAAnB,EAAuC,SAAvC,EAAyD;AAClG,SAAO,QAAQ,CAAC;AAAE,IAAA,QAAQ,EAAA,QAAV;AAAY,IAAA,SAAS,EAAA,SAArB;AAAuB,kBAAc;AAArC,GAAD,CAAf;AACD,CAFyC,CAAnC","sourcesContent":["import * as React from 'react';\n\nimport { IFontIconProps } from './Icon.types';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\n\nexport const getIconContent = memoizeFunction((iconName?: string) => {\n  const iconDefinition = getIcon(iconName) || {\n    subset: {\n      className: undefined\n    },\n    code: undefined\n  };\n\n  return {\n    children: iconDefinition.code,\n    iconClassName: iconDefinition.subset.className\n  };\n});\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className } = props;\n  const { iconClassName, children } = getIconContent(iconName);\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const containerProps = props['aria-label']\n    ? {}\n    : {\n        role: 'presentation',\n        'aria-hidden': true\n      };\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n    >\n      {children}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}