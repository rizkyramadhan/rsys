{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar KeytipUtils_1 = require(\"../../utilities/keytips/KeytipUtils\");\n\nvar Callout_1 = require(\"../../Callout\");\n\nvar ContextualMenu_1 = require(\"../../ContextualMenu\");\n\nvar KeytipContent_1 = require(\"./KeytipContent\");\n\nvar Keytip_styles_1 = require(\"./Keytip.styles\");\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\n\n\nvar Keytip =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Keytip, _super);\n\n  function Keytip() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Keytip.prototype.render = function () {\n    var _a = this.props,\n        keySequences = _a.keySequences,\n        offset = _a.offset,\n        overflowSetSequence = _a.overflowSetSequence;\n    var calloutProps = this.props.calloutProps;\n    var keytipTarget; // Take into consideration the overflow sequence\n\n    if (overflowSetSequence) {\n      keytipTarget = KeytipUtils_1.ktpTargetFromSequences(KeytipUtils_1.mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = KeytipUtils_1.ktpTargetFromSequences(keySequences);\n    }\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = tslib_1.__assign({}, calloutProps, {\n        coverTarget: true,\n        directionalHint: ContextualMenu_1.DirectionalHint.topLeftEdge\n      });\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = tslib_1.__assign({}, calloutProps, {\n        directionalHint: ContextualMenu_1.DirectionalHint.bottomCenter\n      });\n    }\n\n    return React.createElement(Callout_1.Callout, tslib_1.__assign({}, calloutProps, {\n      isBeakVisible: false,\n      doNotLayer: true,\n      minPagePadding: 0,\n      styles: offset ? Keytip_styles_1.getCalloutOffsetStyles(offset) : Keytip_styles_1.getCalloutStyles,\n      preventDismissOnScroll: true,\n      target: keytipTarget\n    }), React.createElement(KeytipContent_1.KeytipContent, tslib_1.__assign({}, this.props)));\n  };\n\n  return Keytip;\n}(React.Component);\n\nexports.Keytip = Keytip;","map":{"version":3,"sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAEA;;;;;AAGA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,EAAA,MAAA;;AAA5B,WAAA,MAAA,GAAA;;AA6CC;;AA5CQ,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QAAE,YAAA,GAAA,EAAA,CAAA,YAAF;AAAA,QAAgB,MAAA,GAAA,EAAA,CAAA,MAAhB;AAAA,QAAwB,mBAAA,GAAA,EAAA,CAAA,mBAAxB;AACA,QAAA,YAAA,GAAA,KAAA,KAAA,CAAA,YAAA;AAEN,QAAI,YAAJ,CAJF,CAKE;;AACA,QAAI,mBAAJ,EAAyB;AACvB,MAAA,YAAY,GAAG,aAAA,CAAA,sBAAA,CAAuB,aAAA,CAAA,cAAA,CAAe,YAAf,EAA6B,mBAA7B,CAAvB,CAAf;AACD,KAFD,MAEO;AACL,MAAA,YAAY,GAAG,aAAA,CAAA,sBAAA,CAAuB,YAAvB,CAAf;AACD;;AAED,QAAI,MAAJ,EAAY;AACV;AACA;AACA,MAAA,YAAY,GAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACP,YADO,EACK;AACf,QAAA,WAAW,EAAE,IADE;AAEf,QAAA,eAAe,EAAE,gBAAA,CAAA,eAAA,CAAgB;AAFlB,OADL,CAAZ;AAKD;;AAED,QAAI,CAAC,YAAD,IAAiB,YAAY,CAAC,eAAb,KAAiC,SAAtD,EAAiE;AAC/D;AACA,MAAA,YAAY,GAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACP,YADO,EACK;AACf,QAAA,eAAe,EAAE,gBAAA,CAAA,eAAA,CAAgB;AADlB,OADL,CAAZ;AAID;;AAED,WACE,KAAA,CAAA,aAAA,CAAC,SAAA,CAAA,OAAD,EAAQ,OAAA,CAAA,QAAA,CAAA,EAAA,EACF,YADE,EACU;AAChB,MAAA,aAAa,EAAE,KADC;AAEhB,MAAA,UAAU,EAAE,IAFI;AAGhB,MAAA,cAAc,EAAE,CAHA;AAIhB,MAAA,MAAM,EAAE,MAAM,GAAG,eAAA,CAAA,sBAAA,CAAuB,MAAvB,CAAH,GAAoC,eAAA,CAAA,gBAJlC;AAKhB,MAAA,sBAAsB,EAAE,IALR;AAMhB,MAAA,MAAM,EAAE;AANQ,KADV,CAAR,EASE,KAAA,CAAA,aAAA,CAAC,eAAA,CAAA,aAAD,EAAc,OAAA,CAAA,QAAA,CAAA,EAAA,EAAK,KAAK,KAAV,CAAd,CATF,CADF;AAaD,GA3CM;;AA4CT,SAAA,MAAA;AAAC,CA7CD,CAA4B,KAAK,CAAC,SAAlC,CAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["import * as React from 'react';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { IKeytipProps } from './Keytip.types';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\n\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\nexport class Keytip extends React.Component<IKeytipProps, {}> {\n  public render(): JSX.Element {\n    const { keySequences, offset, overflowSetSequence } = this.props;\n    let { calloutProps } = this.props;\n\n    let keytipTarget: string;\n    // Take into consideration the overflow sequence\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = {\n        ...calloutProps,\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge\n      };\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = {\n        ...calloutProps,\n        directionalHint: DirectionalHint.bottomCenter\n      };\n    }\n\n    return (\n      <Callout\n        {...calloutProps}\n        isBeakVisible={false}\n        doNotLayer={true}\n        minPagePadding={0}\n        styles={offset ? getCalloutOffsetStyles(offset) : getCalloutStyles}\n        preventDismissOnScroll={true}\n        target={keytipTarget}\n      >\n        <KeytipContent {...this.props} />\n      </Callout>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}