{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar consts_1 = require(\"./consts\");\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\n\n\nfunction hsv2rgb(h, s, v) {\n  s = s / 100;\n  v = v / 100;\n  var rgb = [];\n  var c = v * s;\n  var hh = h / 60;\n  var x = c * (1 - Math.abs(hh % 2 - 1));\n  var m = v - c;\n\n  switch (Math.floor(hh)) {\n    case 0:\n      rgb = [c, x, 0];\n      break;\n\n    case 1:\n      rgb = [x, c, 0];\n      break;\n\n    case 2:\n      rgb = [0, c, x];\n      break;\n\n    case 3:\n      rgb = [0, x, c];\n      break;\n\n    case 4:\n      rgb = [x, 0, c];\n      break;\n\n    case 5:\n      rgb = [c, 0, x];\n      break;\n  }\n\n  return {\n    r: Math.round(consts_1.MAX_COLOR_RGB * (rgb[0] + m)),\n    g: Math.round(consts_1.MAX_COLOR_RGB * (rgb[1] + m)),\n    b: Math.round(consts_1.MAX_COLOR_RGB * (rgb[2] + m))\n  };\n}\n\nexports.hsv2rgb = hsv2rgb;","map":{"version":3,"sources":["utilities/color/hsv2rgb.ts"],"names":[],"mappings":";;;;;;;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;;AACA,SAAgB,OAAhB,CAAwB,CAAxB,EAAmC,CAAnC,EAA8C,CAA9C,EAAuD;AACrD,EAAA,CAAC,GAAG,CAAC,GAAG,GAAR;AACA,EAAA,CAAC,GAAG,CAAC,GAAG,GAAR;AAEA,MAAI,GAAG,GAAa,EAApB;AAEA,MAAM,CAAC,GAAG,CAAC,GAAG,CAAd;AACA,MAAM,EAAE,GAAG,CAAC,GAAG,EAAf;AACA,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,GAAL,CAAU,EAAE,GAAG,CAAN,GAAW,CAApB,CAAR,CAAX;AACA,MAAM,CAAC,GAAG,CAAC,GAAG,CAAd;;AAEA,UAAQ,IAAI,CAAC,KAAL,CAAW,EAAX,CAAR;AACE,SAAK,CAAL;AACE,MAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACE,MAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACE,MAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACE,MAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACE,MAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACE,MAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;AACA;AAvBJ;;AA0BA,SAAO;AACL,IAAA,CAAC,EAAE,IAAI,CAAC,KAAL,CAAW,QAAA,CAAA,aAAA,IAAiB,GAAG,CAAC,CAAD,CAAH,GAAS,CAA1B,CAAX,CADE;AAEL,IAAA,CAAC,EAAE,IAAI,CAAC,KAAL,CAAW,QAAA,CAAA,aAAA,IAAiB,GAAG,CAAC,CAAD,CAAH,GAAS,CAA1B,CAAX,CAFE;AAGL,IAAA,CAAC,EAAE,IAAI,CAAC,KAAL,CAAW,QAAA,CAAA,aAAA,IAAiB,GAAG,CAAC,CAAD,CAAH,GAAS,CAA1B,CAAX;AAHE,GAAP;AAKD;;AA1CD,OAAA,CAAA,OAAA,GAAA,OAAA","sourcesContent":["import { IRGB } from './interfaces';\nimport { MAX_COLOR_RGB } from './consts';\n\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\nexport function hsv2rgb(h: number, s: number, v: number): IRGB {\n  s = s / 100;\n  v = v / 100;\n\n  let rgb: number[] = [];\n\n  const c = v * s;\n  const hh = h / 60;\n  const x = c * (1 - Math.abs((hh % 2) - 1));\n  const m = v - c;\n\n  switch (Math.floor(hh)) {\n    case 0:\n      rgb = [c, x, 0];\n      break;\n\n    case 1:\n      rgb = [x, c, 0];\n      break;\n\n    case 2:\n      rgb = [0, c, x];\n      break;\n\n    case 3:\n      rgb = [0, x, c];\n      break;\n\n    case 4:\n      rgb = [x, 0, c];\n      break;\n\n    case 5:\n      rgb = [c, 0, x];\n      break;\n  }\n\n  return {\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m))\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}