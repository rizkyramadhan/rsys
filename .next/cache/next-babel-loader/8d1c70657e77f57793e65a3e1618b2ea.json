{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar KeytipTransitionModifier;\n\n(function (KeytipTransitionModifier) {\n  KeytipTransitionModifier[KeytipTransitionModifier[\"shift\"] = Utilities_1.KeyCodes.shift] = \"shift\";\n  KeytipTransitionModifier[KeytipTransitionModifier[\"ctrl\"] = Utilities_1.KeyCodes.ctrl] = \"ctrl\";\n  KeytipTransitionModifier[KeytipTransitionModifier[\"alt\"] = Utilities_1.KeyCodes.alt] = \"alt\";\n  KeytipTransitionModifier[KeytipTransitionModifier[\"meta\"] = Utilities_1.KeyCodes.leftWindow] = \"meta\";\n})(KeytipTransitionModifier = exports.KeytipTransitionModifier || (exports.KeytipTransitionModifier = {}));\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns {boolean} T/F if the transition keys are equal.\n */\n\n\nfunction transitionKeysAreEqual(key1, key2) {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  var mod1 = key1.modifierKeys;\n  var mod2 = key2.modifierKeys;\n\n  if (!mod1 && mod2 || mod1 && !mod2) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    } // Sort both arrays\n\n\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n\n    for (var i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexports.transitionKeysAreEqual = transitionKeysAreEqual;\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns {boolean} T/F if 'keys' contains 'key'.\n */\n\nfunction transitionKeysContain(keys, key) {\n  return !!Utilities_1.find(keys, function (transitionKey) {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}\n\nexports.transitionKeysContain = transitionKeysContain;","map":{"version":3,"sources":["utilities/keytips/IKeytipTransitionKey.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,IAAY,wBAAZ;;AAAA,CAAA,UAAY,wBAAZ,EAAoC;AAClC,EAAA,wBAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,GAAQ,WAAA,CAAA,QAAA,CAAS,KAAjB,CAAA,GAAsB,OAAtB;AACA,EAAA,wBAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,GAAO,WAAA,CAAA,QAAA,CAAS,IAAhB,CAAA,GAAoB,MAApB;AACA,EAAA,wBAAA,CAAA,wBAAA,CAAA,KAAA,CAAA,GAAM,WAAA,CAAA,QAAA,CAAS,GAAf,CAAA,GAAkB,KAAlB;AACA,EAAA,wBAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,GAAO,WAAA,CAAA,QAAA,CAAS,UAAhB,CAAA,GAA0B,MAA1B;AACD,CALD,EAAY,wBAAwB,GAAxB,OAAA,CAAA,wBAAA,KAAA,OAAA,CAAA,wBAAA,GAAwB,EAAxB,CAAZ;AAYA;;;;;;;;;AAOA,SAAgB,sBAAhB,CAAuC,IAAvC,EAAmE,IAAnE,EAA6F;AAC3F,MAAI,IAAI,CAAC,GAAL,KAAa,IAAI,CAAC,GAAtB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,MAAI,IAAI,GAAG,IAAI,CAAC,YAAhB;AACA,MAAI,IAAI,GAAG,IAAI,CAAC,YAAhB;;AAEA,MAAK,CAAC,IAAD,IAAS,IAAV,IAAoB,IAAI,IAAI,CAAC,IAAjC,EAAwC;AACtC;AACA,WAAO,KAAP;AACD;;AAED,MAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,QAAI,IAAI,CAAC,MAAL,KAAgB,IAAI,CAAC,MAAzB,EAAiC;AAC/B,aAAO,KAAP;AACD,KAHe,CAKhB;;;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,IAAL,EAAP;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,IAAL,EAAP;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,UAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAI,CAAC,CAAD,CAApB,EAAyB;AACvB,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD;;AA7BD,OAAA,CAAA,sBAAA,GAAA,sBAAA;AA+BA;;;;;;;;AAOA,SAAgB,qBAAhB,CAAsC,IAAtC,EAAoE,GAApE,EAA6F;AAC3F,SAAO,CAAC,CAAC,WAAA,CAAA,IAAA,CAAK,IAAL,EAAW,UAAC,aAAD,EAAoC;AACtD,WAAO,sBAAsB,CAAC,aAAD,EAAgB,GAAhB,CAA7B;AACD,GAFQ,CAAT;AAGD;;AAJD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["import { find, KeyCodes } from '../../Utilities';\n\nexport enum KeytipTransitionModifier {\n  shift = KeyCodes.shift,\n  ctrl = KeyCodes.ctrl,\n  alt = KeyCodes.alt,\n  meta = KeyCodes.leftWindow\n}\n\nexport interface IKeytipTransitionKey {\n  key: string;\n  modifierKeys?: KeytipTransitionModifier[];\n}\n\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns {boolean} T/F if the transition keys are equal.\n */\nexport function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  let mod1 = key1.modifierKeys;\n  let mod2 = key2.modifierKeys;\n\n  if ((!mod1 && mod2) || (mod1 && !mod2)) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    }\n\n    // Sort both arrays\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n    for (let i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns {boolean} T/F if 'keys' contains 'key'.\n */\nexport function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean {\n  return !!find(keys, (transitionKey: IKeytipTransitionKey) => {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}