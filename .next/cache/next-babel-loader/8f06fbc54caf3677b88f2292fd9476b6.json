{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, getId, toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\n\nvar GridBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GridBase, _super);\n\n  function GridBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._id = getId();\n    return _this;\n  }\n\n  GridBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        items = _a.items,\n        columnCount = _a.columnCount,\n        onRenderItem = _a.onRenderItem,\n        positionInSet = _a.positionInSet,\n        setSize = _a.setSize,\n        styles = _a.styles;\n    var htmlProps = getNativeProps(this.props, htmlElementProperties, ['onBlur, aria-posinset, aria-setsize']);\n    var classNames = getClassNames(styles, {\n      theme: this.props.theme\n    }); // Array to store the cells in the correct row index\n\n    var rowsOfItems = toMatrix(items, columnCount);\n    var content = React.createElement(\"table\", tslib_1.__assign({}, htmlProps, {\n      \"aria-posinset\": positionInSet,\n      \"aria-setsize\": setSize,\n      id: this._id,\n      role: 'grid',\n      className: classNames.root\n    }), React.createElement(\"tbody\", null, rowsOfItems.map(function (rows, rowIndex) {\n      return React.createElement(\"tr\", {\n        role: 'row',\n        key: _this._id + '-' + rowIndex + '-row'\n      }, rows.map(function (cell, cellIndex) {\n        return React.createElement(\"td\", {\n          role: 'presentation',\n          key: _this._id + '-' + cellIndex + '-cell',\n          className: classNames.tableCell\n        }, onRenderItem(cell, cellIndex));\n      }));\n    }))); // Create the table/grid\n\n    return this.props.doNotContainWithinFocusZone ? content : React.createElement(FocusZone, {\n      isCircularNavigation: this.props.shouldFocusCircularNavigate,\n      className: classNames.focusedContainer,\n      onBlur: this.props.onBlur\n    }, content);\n  };\n\n  return GridBase;\n}(BaseComponent);\n\nexport { GridBase };","map":{"version":3,"sources":["utilities/grid/Grid.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, getId, toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { IGrid, IGridProps, IGridStyleProps, IGridStyles } from './Grid.types';\n\nconst getClassNames = classNamesFunction<IGridStyleProps, IGridStyles>();\n\nexport class GridBase extends BaseComponent<IGridProps, {}> implements IGrid {\n  private _id: string;\n\n  constructor(props: IGridProps) {\n    super(props);\n    this._id = getId();\n  }\n\n  public render(): JSX.Element {\n    const { items, columnCount, onRenderItem, positionInSet, setSize, styles } = this.props;\n\n    const htmlProps = getNativeProps<React.HTMLAttributes<HTMLTableElement>>(this.props, htmlElementProperties, [\n      'onBlur, aria-posinset, aria-setsize'\n    ]);\n\n    const classNames = getClassNames(styles!, { theme: this.props.theme! });\n\n    // Array to store the cells in the correct row index\n    const rowsOfItems: any[][] = toMatrix(items, columnCount);\n\n    const content = (\n      <table {...htmlProps} aria-posinset={positionInSet} aria-setsize={setSize} id={this._id} role={'grid'} className={classNames.root}>\n        <tbody>\n          {rowsOfItems.map((rows: any[], rowIndex: number) => {\n            return (\n              <tr role={'row'} key={this._id + '-' + rowIndex + '-row'}>\n                {rows.map((cell: any, cellIndex: number) => {\n                  return (\n                    <td role={'presentation'} key={this._id + '-' + cellIndex + '-cell'} className={classNames.tableCell}>\n                      {onRenderItem(cell, cellIndex)}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n\n    // Create the table/grid\n    return this.props.doNotContainWithinFocusZone ? (\n      content\n    ) : (\n      <FocusZone\n        isCircularNavigation={this.props.shouldFocusCircularNavigate}\n        className={classNames.focusedContainer}\n        onBlur={this.props.onBlur}\n      >\n        {content}\n      </FocusZone>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}