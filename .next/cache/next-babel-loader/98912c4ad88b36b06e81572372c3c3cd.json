{"ast":null,"code":"var _layersByHostId = {};\n\nvar _defaultHostSelector;\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\n\n\nexport function registerLayer(hostId, layer) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(layer);\n}\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\n\nexport function unregisterLayer(hostId, layer) {\n  if (_layersByHostId[hostId]) {\n    var idx = _layersByHostId[hostId].indexOf(layer);\n\n    if (idx >= 0) {\n      _layersByHostId[hostId].splice(idx, 1);\n\n      if (_layersByHostId[hostId].length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n}\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\n\nexport function notifyHostChanged(id) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(function (layer) {\n      return layer.forceUpdate();\n    });\n  }\n}\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsey value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\n\nexport function setDefaultTarget(selector) {\n  _defaultHostSelector = selector;\n}\n/**\n * Get the default target selector when determining a host\n */\n\nexport function getDefaultTarget() {\n  return _defaultHostSelector;\n}","map":{"version":3,"sources":["components/Layer/Layer.notification.ts"],"names":[],"mappings":"AAEA,IAAM,eAAe,GAA4C,EAAjE;;AAEA,IAAI,oBAAJ;AAEA;;;;;;;AAKA,OAAM,SAAU,aAAV,CAAwB,MAAxB,EAAwC,KAAxC,EAA8D;AAClE,MAAI,CAAC,eAAe,CAAC,MAAD,CAApB,EAA8B;AAC5B,IAAA,eAAe,CAAC,MAAD,CAAf,GAA0B,EAA1B;AACD;;AAED,EAAA,eAAe,CAAC,MAAD,CAAf,CAAwB,IAAxB,CAA6B,KAA7B;AACD;AAED;;;;;;AAKA,OAAM,SAAU,eAAV,CAA0B,MAA1B,EAA0C,KAA1C,EAAgE;AACpE,MAAI,eAAe,CAAC,MAAD,CAAnB,EAA6B;AAC3B,QAAM,GAAG,GAAG,eAAe,CAAC,MAAD,CAAf,CAAwB,OAAxB,CAAgC,KAAhC,CAAZ;;AACA,QAAI,GAAG,IAAI,CAAX,EAAc;AACZ,MAAA,eAAe,CAAC,MAAD,CAAf,CAAwB,MAAxB,CAA+B,GAA/B,EAAoC,CAApC;;AACA,UAAI,eAAe,CAAC,MAAD,CAAf,CAAwB,MAAxB,KAAmC,CAAvC,EAA0C;AACxC,eAAO,eAAe,CAAC,MAAD,CAAtB;AACD;AACF;AACF;AACF;AAED;;;;;AAIA,OAAM,SAAU,iBAAV,CAA4B,EAA5B,EAAsC;AAC1C,MAAI,eAAe,CAAC,EAAD,CAAnB,EAAyB;AACvB,IAAA,eAAe,CAAC,EAAD,CAAf,CAAoB,OAApB,CAA4B,UAAA,KAAA,EAAK;AAAI,aAAA,KAAK,CAAL,WAAA,EAAA;AAAmB,KAAxD;AACD;AACF;AAED;;;;;;;;;AAQA,OAAM,SAAU,gBAAV,CAA2B,QAA3B,EAA4C;AAChD,EAAA,oBAAoB,GAAG,QAAvB;AACD;AAED;;;;AAGA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,SAAO,oBAAP;AACD","sourcesContent":["import * as React from 'react';\n\nconst _layersByHostId: { [hostId: string]: React.Component[] } = {};\n\nlet _defaultHostSelector: string | undefined;\n\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function registerLayer(hostId: string, layer: React.Component) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(layer);\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function unregisterLayer(hostId: string, layer: React.Component) {\n  if (_layersByHostId[hostId]) {\n    const idx = _layersByHostId[hostId].indexOf(layer);\n    if (idx >= 0) {\n      _layersByHostId[hostId].splice(idx, 1);\n      if (_layersByHostId[hostId].length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(layer => layer.forceUpdate());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsey value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}