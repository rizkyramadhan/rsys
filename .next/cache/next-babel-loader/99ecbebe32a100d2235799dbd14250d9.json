{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nvar getClassNames = classNamesFunction();\nvar DialogFooterType = React.createElement(DialogFooter, null).type;\n\nvar DialogContentBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DialogContentBase, _super);\n\n  function DialogContentBase(props) {\n    return _super.call(this, props) || this;\n  }\n\n  DialogContentBase.prototype.render = function () {\n    var _a = this.props,\n        showCloseButton = _a.showCloseButton,\n        className = _a.className,\n        closeButtonAriaLabel = _a.closeButtonAriaLabel,\n        onDismiss = _a.onDismiss,\n        subTextId = _a.subTextId,\n        subText = _a.subText,\n        titleId = _a.titleId,\n        title = _a.title,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        draggableHeaderClassName = _a.draggableHeaderClassName;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName: draggableHeaderClassName\n    });\n\n    var groupings = this._groupChildren();\n\n    var subTextContent;\n\n    if (subText) {\n      subTextContent = React.createElement(\"p\", {\n        className: classNames.subText,\n        id: subTextId\n      }, subText);\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames.content\n    }, React.createElement(\"div\", {\n      className: classNames.header\n    }, React.createElement(\"p\", {\n      className: classNames.title,\n      id: titleId,\n      role: \"heading\",\n      \"aria-level\": 2\n    }, title), React.createElement(\"div\", {\n      className: classNames.topButton\n    }, this.props.topButtonsProps.map(function (props, index) {\n      return React.createElement(IconButton, tslib_1.__assign({\n        key: props.uniqueId || index\n      }, props));\n    }), (type === DialogType.close || showCloseButton && type !== DialogType.largeHeader) && React.createElement(IconButton, {\n      className: classNames.button,\n      iconProps: {\n        iconName: 'Cancel'\n      },\n      ariaLabel: closeButtonAriaLabel,\n      onClick: onDismiss\n    }))), React.createElement(\"div\", {\n      className: classNames.inner\n    }, React.createElement(\"div\", {\n      className: classNames.innerContent\n    }, subTextContent, groupings.contents), groupings.footers));\n  }; // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n\n\n  DialogContentBase.prototype._groupChildren = function () {\n    var groupings = {\n      footers: [],\n      contents: []\n    };\n    React.Children.map(this.props.children, function (child) {\n      if (typeof child === 'object' && child !== null && child.type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n    return groupings;\n  };\n\n  DialogContentBase.defaultProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close'\n  };\n  DialogContentBase = tslib_1.__decorate([withResponsiveMode], DialogContentBase);\n  return DialogContentBase;\n}(BaseComponent);\n\nexport { DialogContentBase };","map":{"version":3,"sources":["components/Dialog/DialogContent.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\nimport { DialogType, IDialogContentProps, IDialogContentStyleProps, IDialogContentStyles } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { IDialogFooterProps } from './DialogFooter.types';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogContentStyleProps, IDialogContentStyles>();\n\nconst DialogFooterType = (<DialogFooter /> as React.ReactElement<IDialogFooterProps>).type;\n\n@withResponsiveMode\nexport class DialogContentBase extends BaseComponent<IDialogContentProps, {}> {\n  public static defaultProps: IDialogContentProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close'\n  };\n\n  constructor(props: IDialogContentProps) {\n    super(props);\n  }\n\n  public render(): JSX.Element {\n    const {\n      showCloseButton,\n      className,\n      closeButtonAriaLabel,\n      onDismiss,\n      subTextId,\n      subText,\n      titleId,\n      title,\n      type,\n      styles,\n      theme,\n      draggableHeaderClassName\n    } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName\n    });\n\n    const groupings = this._groupChildren();\n    let subTextContent;\n    if (subText) {\n      subTextContent = (\n        <p className={classNames.subText} id={subTextId}>\n          {subText}\n        </p>\n      );\n    }\n\n    return (\n      <div className={classNames.content}>\n        <div className={classNames.header}>\n          <p className={classNames.title} id={titleId} role=\"heading\" aria-level={2}>\n            {title}\n          </p>\n          <div className={classNames.topButton}>\n            {this.props.topButtonsProps!.map((props, index) => (\n              <IconButton key={props.uniqueId || index} {...props} />\n            ))}\n            {(type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) && (\n              <IconButton\n                className={classNames.button}\n                iconProps={{ iconName: 'Cancel' }}\n                ariaLabel={closeButtonAriaLabel}\n                onClick={onDismiss as any}\n              />\n            )}\n          </div>\n        </div>\n        <div className={classNames.inner}>\n          <div className={classNames.innerContent}>\n            {subTextContent}\n            {groupings.contents}\n          </div>\n          {groupings.footers}\n        </div>\n      </div>\n    );\n  }\n\n  // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n  private _groupChildren(): { footers: any[]; contents: any[] } {\n    const groupings: { footers: any[]; contents: any[] } = {\n      footers: [],\n      contents: []\n    };\n\n    React.Children.map(this.props.children, child => {\n      if (typeof child === 'object' && child !== null && (child as any).type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n\n    return groupings;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}