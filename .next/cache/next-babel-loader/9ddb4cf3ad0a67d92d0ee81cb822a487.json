{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar Icon_1 = require(\"../../Icon\");\n\nvar KeytipData_1 = require(\"../../KeytipData\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\n\nvar CheckboxBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(CheckboxBase, _super);\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n\n\n  function CheckboxBase(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this._checkBox = React.createRef();\n\n    _this._onFocus = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onFocus) {\n        inputProps.onFocus(ev);\n      }\n    };\n\n    _this._onBlur = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onBlur) {\n        inputProps.onBlur(ev);\n      }\n    };\n\n    _this._onChange = function (ev) {\n      var _a = _this.props,\n          disabled = _a.disabled,\n          onChange = _a.onChange;\n      var _b = _this.state,\n          isChecked = _b.isChecked,\n          isIndeterminate = _b.isIndeterminate;\n\n      if (!disabled) {\n        if (!isIndeterminate) {\n          if (onChange) {\n            onChange(ev, !isChecked);\n          }\n\n          if (_this.props.checked === undefined) {\n            _this.setState({\n              isChecked: !isChecked\n            });\n          }\n        } else {\n          if (onChange) {\n            onChange(ev, isChecked);\n          }\n\n          if (_this.props.indeterminate === undefined) {\n            _this.setState({\n              isIndeterminate: false\n            });\n          }\n        }\n      }\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label;\n      return label ? React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: _this._classNames.text\n      }, label) : null;\n    };\n\n    Utilities_1.initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Utilities_1.warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      });\n    }\n\n    _this._id = _this.props.id || Utilities_1.getId('checkbox-');\n    _this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate)\n    };\n    return _this;\n  }\n\n  CheckboxBase.getDerivedStateFromProps = function (props, state) {\n    if (!props.defaultIndeterminate && state.isIndeterminate) {\n      return {\n        isIndeterminate: !!props.indeterminate\n      };\n    }\n\n    if (props.checked !== undefined) {\n      return {\n        isChecked: !!props.checked\n      };\n    }\n\n    return null;\n  };\n  /**\n   * Render the Checkbox based on passed props\n   */\n\n\n  CheckboxBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        checked = _a.checked,\n        className = _a.className,\n        defaultChecked = _a.defaultChecked,\n        disabled = _a.disabled,\n        inputProps = _a.inputProps,\n        name = _a.name,\n        boxSide = _a.boxSide,\n        theme = _a.theme,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        styles = _a.styles,\n        _b = _a.onRenderLabel,\n        onRenderLabel = _b === void 0 ? this._onRenderLabel : _b,\n        checkmarkIconProps = _a.checkmarkIconProps,\n        ariaPositionInSet = _a.ariaPositionInSet,\n        ariaSetSize = _a.ariaSetSize,\n        keytipProps = _a.keytipProps,\n        title = _a.title,\n        label = _a.label,\n        indeterminate = _a.indeterminate;\n    var isChecked = checked === undefined ? this.state.isChecked : checked;\n    var isIndeterminate = !!(indeterminate === undefined ? this.state.isIndeterminate : indeterminate);\n    var isReversed = boxSide !== 'start' ? true : false;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: isReversed,\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\n    });\n    return React.createElement(KeytipData_1.KeytipData, {\n      keytipProps: keytipProps,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"div\", {\n        className: _this._classNames.root\n      }, React.createElement(\"input\", tslib_1.__assign({\n        type: \"checkbox\"\n      }, inputProps, {\n        \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target']\n      }, checked !== undefined && {\n        checked: checked\n      }, defaultChecked !== undefined && {\n        defaultChecked: defaultChecked\n      }, {\n        disabled: disabled,\n        className: _this._classNames.input,\n        ref: _this._checkBox,\n        name: name,\n        id: _this._id,\n        title: title,\n        onChange: _this._onChange,\n        onFocus: _this._onFocus,\n        onBlur: _this._onBlur,\n        \"aria-disabled\": disabled,\n        \"aria-label\": ariaLabel || label,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": Utilities_1.mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        \"aria-posinset\": ariaPositionInSet,\n        \"aria-setsize\": ariaSetSize,\n        \"aria-checked\": isIndeterminate ? 'mixed' : isChecked ? 'true' : 'false'\n      })), React.createElement(\"label\", {\n        className: _this._classNames.label,\n        htmlFor: _this._id\n      }, React.createElement(\"div\", {\n        className: _this._classNames.checkbox,\n        \"data-ktp-target\": keytipAttributes['data-ktp-target']\n      }, React.createElement(Icon_1.Icon, tslib_1.__assign({\n        iconName: \"CheckMark\"\n      }, checkmarkIconProps, {\n        className: _this._classNames.checkmark\n      }))), onRenderLabel(_this.props, _this._onRenderLabel)));\n    });\n  };\n\n  _Object$defineProperty(CheckboxBase.prototype, \"indeterminate\", {\n    get: function () {\n      return this.state.isIndeterminate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  _Object$defineProperty(CheckboxBase.prototype, \"checked\", {\n    get: function () {\n      return this.state.isChecked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CheckboxBase.prototype.focus = function () {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  };\n\n  CheckboxBase.defaultProps = {\n    boxSide: 'start'\n  };\n  return CheckboxBase;\n}(React.Component);\n\nexports.CheckboxBase = CheckboxBase;","map":{"version":3,"sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getId, classNamesFunction, mergeAriaAttributeValues, initializeComponentRef, warnMutuallyExclusive } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { ICheckbox, ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean | undefined;\n  isIndeterminate?: boolean;\n}\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start'\n  };\n\n  private _checkBox = React.createRef<HTMLInputElement>();\n  private _id: string;\n  private _classNames: { [key in keyof ICheckboxStyles]: string };\n\n  public static getDerivedStateFromProps(props: ICheckboxProps, state: ICheckboxState): ICheckboxState | null {\n    if (!props.defaultIndeterminate && state.isIndeterminate) {\n      return {\n        isIndeterminate: !!props.indeterminate\n      };\n    }\n    if (props.checked !== undefined) {\n      return {\n        isChecked: !!props.checked\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      });\n    }\n\n    this._id = this.props.id || getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate)\n    };\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      checked,\n      className,\n      defaultChecked,\n      disabled,\n      inputProps,\n      name,\n      boxSide,\n      theme,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      styles,\n      onRenderLabel = this._onRenderLabel,\n      checkmarkIconProps,\n      ariaPositionInSet,\n      ariaSetSize,\n      keytipProps,\n      title,\n      label,\n      indeterminate\n    } = this.props;\n\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\n    const isIndeterminate = !!(indeterminate === undefined ? this.state.isIndeterminate : indeterminate);\n    const isReversed = boxSide !== 'start' ? true : false;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: isReversed,\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\n    });\n\n    return (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element => (\n          <div className={this._classNames.root}>\n            <input\n              type=\"checkbox\"\n              {...inputProps}\n              data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n              {...checked !== undefined && { checked }}\n              {...defaultChecked !== undefined && { defaultChecked }}\n              disabled={disabled}\n              className={this._classNames.input}\n              ref={this._checkBox}\n              name={name}\n              id={this._id}\n              title={title}\n              onChange={this._onChange}\n              onFocus={this._onFocus}\n              onBlur={this._onBlur}\n              aria-disabled={disabled}\n              aria-label={ariaLabel || label}\n              aria-labelledby={ariaLabelledBy}\n              aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\n              aria-posinset={ariaPositionInSet}\n              aria-setsize={ariaSetSize}\n              aria-checked={isIndeterminate ? 'mixed' : isChecked ? 'true' : 'false'}\n            />\n            <label className={this._classNames.label} htmlFor={this._id}>\n              <div className={this._classNames.checkbox} data-ktp-target={keytipAttributes['data-ktp-target']}>\n                <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={this._classNames.checkmark} />\n              </div>\n              {onRenderLabel(this.props, this._onRenderLabel)}\n            </label>\n          </div>\n        )}\n      </KeytipData>\n    );\n  }\n\n  public get indeterminate(): boolean {\n    return this.state.isIndeterminate!;\n  }\n\n  public get checked(): boolean {\n    return this.state.isChecked!;\n  }\n\n  public focus(): void {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  };\n\n  private _onChange = (ev: React.FormEvent<HTMLElement>): void => {\n    const { disabled, onChange } = this.props;\n    const { isChecked, isIndeterminate } = this.state;\n\n    if (!disabled) {\n      if (!isIndeterminate) {\n        if (onChange) {\n          onChange(ev, !isChecked);\n        }\n        if (this.props.checked === undefined) {\n          this.setState({ isChecked: !isChecked });\n        }\n      } else {\n        if (onChange) {\n          onChange(ev, isChecked);\n        }\n        if (this.props.indeterminate === undefined) {\n          this.setState({ isIndeterminate: false });\n        }\n      }\n    }\n  };\n\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\n    const { label } = props;\n\n    return label ? (\n      <span aria-hidden=\"true\" className={this._classNames.text}>\n        {label}\n      </span>\n    ) : null;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}