{"ast":null,"code":"\"use strict\";\n\nvar _Array$isArray = require(\"@babel/runtime-corejs2/core-js/array/is-array\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar Callout_1 = require(\"../../Callout\");\n\nvar Checkbox_1 = require(\"../../Checkbox\");\n\nvar Button_1 = require(\"../../Button\");\n\nvar DirectionalHint_1 = require(\"../../common/DirectionalHint\");\n\nvar Dropdown_types_1 = require(\"./Dropdown.types\");\n\nvar DropdownSizePosCache_1 = require(\"./utilities/DropdownSizePosCache\");\n\nvar FocusZone_1 = require(\"../../FocusZone\");\n\nvar Icon_1 = require(\"../../Icon\");\n\nvar Label_1 = require(\"../../Label\");\n\nvar KeytipData_1 = require(\"../../KeytipData\");\n\nvar Panel_1 = require(\"../../Panel\");\n\nvar withResponsiveMode_1 = require(\"../../utilities/decorators/withResponsiveMode\");\n\nvar index_1 = require(\"../../utilities/selectableOption/index\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\n\nvar DropdownBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DropdownBase, _super);\n\n  function DropdownBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._host = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._dropDown = React.createRef();\n    _this._scrollIdleDelay = 250\n    /* ms */\n    ;\n    _this._sizePosCache = new DropdownSizePosCache_1.DropdownSizePosCache();\n    _this._requestAnimationFrame = Utilities_1.safeRequestAnimationFrame(_this);\n\n    _this._onChange = function (event, options, index, checked, multiSelect) {\n      var _a = _this.props,\n          onChange = _a.onChange,\n          onChanged = _a.onChanged;\n\n      if (onChange) {\n        // for single-select, option passed in will always be selected.\n        // for multi-select, flip the checked value\n        var changedOpt = multiSelect ? tslib_1.__assign({}, options[index], {\n          selected: !checked\n        }) : options[index];\n        onChange(tslib_1.__assign({}, event, {\n          target: _this._dropDown.current\n        }), changedOpt, index);\n      }\n\n      if (onChanged) {\n        // for single-select, option passed in will always be selected.\n        // for multi-select, flip the checked value\n        var changedOpt = multiSelect ? tslib_1.__assign({}, options[index], {\n          selected: !checked\n        }) : options[index];\n        onChanged(changedOpt, index);\n      }\n    };\n    /** Render text in dropdown input */\n\n\n    _this._onRenderTitle = function (items) {\n      var _a = _this.props.multiSelectDelimiter,\n          multiSelectDelimiter = _a === void 0 ? ', ' : _a;\n      var displayTxt = items.map(function (i) {\n        return i.text;\n      }).join(multiSelectDelimiter);\n      return React.createElement(\"span\", null, displayTxt);\n    };\n    /** Render placeholder text in dropdown input */\n\n\n    _this._onRenderPlaceholder = function (props) {\n      if (!_this._placeholder) {\n        return null;\n      }\n\n      return React.createElement(\"span\", null, _this._placeholder);\n    };\n    /** Render Callout or Panel container and pass in list */\n\n\n    _this._onRenderContainer = function (props) {\n      var calloutProps = props.calloutProps,\n          panelProps = props.panelProps;\n      var _a = _this.props,\n          responsiveMode = _a.responsiveMode,\n          dropdownWidth = _a.dropdownWidth;\n      var isSmall = responsiveMode <= withResponsiveMode_1.ResponsiveMode.medium;\n      var panelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.panel : undefined;\n      return isSmall ? React.createElement(Panel_1.Panel, tslib_1.__assign({\n        isOpen: true,\n        isLightDismiss: true,\n        onDismiss: _this._onDismiss,\n        hasCloseButton: false,\n        styles: panelStyles\n      }, panelProps), _this._renderFocusableList(props)) : React.createElement(Callout_1.Callout, tslib_1.__assign({\n        isBeakVisible: false,\n        gapSpace: 0,\n        doNotLayer: false,\n        directionalHintFixed: false,\n        directionalHint: DirectionalHint_1.DirectionalHint.bottomLeftEdge\n      }, calloutProps, {\n        className: _this._classNames.callout,\n        target: _this._dropDown.current,\n        onDismiss: _this._onDismiss,\n        onScroll: _this._onScroll,\n        onPositioned: _this._onPositioned,\n        calloutWidth: dropdownWidth || (_this._dropDown.current ? _this._dropDown.current.clientWidth : 0)\n      }), _this._renderFocusableList(props));\n    };\n    /** Render Caret Down Icon */\n\n\n    _this._onRenderCaretDown = function (props) {\n      return React.createElement(Icon_1.Icon, {\n        className: _this._classNames.caretDown,\n        iconName: \"ChevronDown\",\n        \"aria-hidden\": true\n      });\n    };\n    /** Render List of items */\n\n\n    _this._onRenderList = function (props) {\n      var _a = props.onRenderItem,\n          onRenderItem = _a === void 0 ? _this._onRenderItem : _a;\n      return React.createElement(React.Fragment, null, props.options.map(function (item, index) {\n        return onRenderItem(tslib_1.__assign({}, item, {\n          index: index\n        }), _this._onRenderItem);\n      }));\n    };\n\n    _this._onRenderItem = function (item) {\n      switch (item.itemType) {\n        case index_1.SelectableOptionMenuItemType.Divider:\n          return _this._renderSeparator(item);\n\n        case index_1.SelectableOptionMenuItemType.Header:\n          return _this._renderHeader(item);\n\n        default:\n          return _this._renderOption(item);\n      }\n    };\n\n    _this._renderOption = function (item) {\n      var _a = _this.props.onRenderOption,\n          onRenderOption = _a === void 0 ? _this._onRenderOption : _a;\n      var _b = _this.state.selectedIndices,\n          selectedIndices = _b === void 0 ? [] : _b;\n      var id = _this._id;\n      var isItemSelected = item.index !== undefined && selectedIndices ? selectedIndices.indexOf(item.index) > -1 : false; // select the right className based on the combination of selected/disabled\n\n      var itemClassName = item.hidden // predicate: item hidden\n      ? _this._classNames.dropdownItemHidden : isItemSelected && item.disabled === true // predicate: both selected and disabled\n      ? _this._classNames.dropdownItemSelectedAndDisabled : isItemSelected // predicate: selected only\n      ? _this._classNames.dropdownItemSelected : item.disabled === true // predicate: disabled only\n      ? _this._classNames.dropdownItemDisabled : _this._classNames.dropdownItem;\n      var _c = item.title,\n          title = _c === void 0 ? item.text : _c;\n      return !_this.props.multiSelect ? React.createElement(Button_1.CommandButton, {\n        id: id + '-list' + item.index,\n        key: item.key,\n        \"data-index\": item.index,\n        \"data-is-focusable\": !item.disabled,\n        disabled: item.disabled,\n        className: itemClassName,\n        onClick: _this._onItemClick(item),\n        onMouseEnter: _this._onItemMouseEnter.bind(_this, item),\n        onMouseLeave: _this._onMouseItemLeave.bind(_this, item),\n        onMouseMove: _this._onItemMouseMove.bind(_this, item),\n        role: \"option\",\n        \"aria-selected\": isItemSelected ? 'true' : 'false',\n        ariaLabel: item.ariaLabel,\n        title: title\n      }, onRenderOption(item, _this._onRenderOption)) : React.createElement(Checkbox_1.Checkbox, {\n        id: id + '-list' + item.index,\n        key: item.key,\n        \"data-index\": item.index,\n        \"data-is-focusable\": !item.disabled,\n        disabled: item.disabled,\n        onChange: _this._onItemClick(item),\n        inputProps: {\n          onMouseEnter: _this._onItemMouseEnter.bind(_this, item),\n          onMouseLeave: _this._onMouseItemLeave.bind(_this, item),\n          onMouseMove: _this._onItemMouseMove.bind(_this, item)\n        },\n        label: item.text,\n        title: item.title ? item.title : item.text,\n        onRenderLabel: _this._onRenderItemLabel.bind(_this, item),\n        className: itemClassName,\n        role: \"option\",\n        \"aria-selected\": isItemSelected ? 'true' : 'false',\n        checked: isItemSelected\n      });\n    };\n    /** Render content of item (i.e. text/icon inside of button) */\n\n\n    _this._onRenderOption = function (item) {\n      return React.createElement(\"span\", {\n        className: _this._classNames.dropdownOptionText\n      }, item.text);\n    };\n    /** Render custom label for drop down item */\n\n\n    _this._onRenderItemLabel = function (item) {\n      var _a = _this.props.onRenderOption,\n          onRenderOption = _a === void 0 ? _this._onRenderOption : _a;\n      return onRenderOption(item, _this._onRenderOption);\n    };\n\n    _this._onPositioned = function (positions) {\n      if (_this._focusZone.current) {\n        // Focusing an element can trigger a reflow. Making this wait until there is an animation\n        // frame can improve perf significantly.\n        _this._requestAnimationFrame(function () {\n          var selectedIndices = _this.state.selectedIndices;\n\n          if (_this._focusZone.current) {\n            if (selectedIndices && selectedIndices[0] && !_this.props.options[selectedIndices[0]].disabled) {\n              var element = Utilities_1.getDocument().querySelector(\"#\" + _this._id + \"-list\" + selectedIndices[0]);\n\n              _this._focusZone.current.focusElement(element);\n            } else {\n              _this._focusZone.current.focus();\n            }\n          }\n        });\n      }\n\n      if (!_this.state.calloutRenderEdge || _this.state.calloutRenderEdge !== positions.targetEdge) {\n        _this.setState({\n          calloutRenderEdge: positions.targetEdge\n        });\n      }\n    };\n\n    _this._onItemClick = function (item) {\n      return function (event) {\n        if (!item.disabled) {\n          _this.setSelectedIndex(event, item.index);\n\n          if (!_this.props.multiSelect) {\n            // only close the callout when it's in single-select mode\n            _this.setState({\n              isOpen: false\n            });\n          }\n        }\n      };\n    };\n    /**\n     * Scroll handler for the callout to make sure the mouse events\n     * for updating focus are not interacting during scroll\n     */\n\n\n    _this._onScroll = function () {\n      if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== undefined) {\n        clearTimeout(_this._scrollIdleTimeoutId);\n        _this._scrollIdleTimeoutId = undefined;\n      } else {\n        _this._isScrollIdle = false;\n      }\n\n      _this._scrollIdleTimeoutId = setTimeout(function () {\n        _this._isScrollIdle = true;\n      }, _this._scrollIdleDelay);\n    };\n\n    _this._onMouseItemLeave = function (item, ev) {\n      if (_this._shouldIgnoreMouseEvent()) {\n        return;\n      }\n      /**\n       * IE11 focus() method forces parents to scroll to top of element.\n       * Edge and IE expose a setActive() function for focusable divs that\n       * sets the page focus but does not scroll the parent element.\n       */\n\n\n      if (_this._host.current) {\n        if (_this._host.current.setActive) {\n          try {\n            _this._host.current.setActive();\n          } catch (e) {\n            /* no-op */\n          }\n        } else {\n          _this._host.current.focus();\n        }\n      }\n    };\n\n    _this._onDismiss = function () {\n      _this.setState({\n        isOpen: false\n      });\n\n      if (_this._dropDown.current) {\n        _this._dropDown.current.focus();\n      }\n    };\n\n    _this._onDropdownBlur = function (ev) {\n      // If Dropdown disabled do not proceed with this logic.\n      var disabled = _this._isDisabled();\n\n      if (disabled) {\n        return;\n      } // hasFocus tracks whether the root element has focus so always update the state.\n\n\n      _this.setState({\n        hasFocus: false\n      });\n\n      if (_this.state.isOpen) {\n        // Do not onBlur when the callout is opened\n        return;\n      }\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n    };\n\n    _this._onDropdownKeyDown = function (ev) {\n      // If Dropdown disabled do not process any keyboard events.\n      var disabled = _this._isDisabled();\n\n      if (disabled) {\n        return;\n      } // Take note if we are processing an alt (option) or meta (command) keydown.\n      // See comment in _shouldHandleKeyUp for reasoning.\n\n\n      _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n\n      var newIndex;\n      var selectedIndex = _this.state.selectedIndices.length ? _this.state.selectedIndices[0] : -1;\n      var containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n      var isOpen = _this.state.isOpen;\n\n      switch (ev.which) {\n        case Utilities_1.KeyCodes.enter:\n          _this.setState({\n            isOpen: !isOpen\n          });\n\n          break;\n\n        case Utilities_1.KeyCodes.escape:\n          if (!isOpen) {\n            return;\n          }\n\n          _this.setState({\n            isOpen: false\n          });\n\n          break;\n\n        case Utilities_1.KeyCodes.up:\n          if (containsExpandCollapseModifier) {\n            if (isOpen) {\n              _this.setState({\n                isOpen: false\n              });\n\n              break;\n            }\n\n            return;\n          }\n\n          if (_this.props.multiSelect) {\n            _this.setState({\n              isOpen: true\n            });\n          } else if (!_this._isDisabled()) {\n            newIndex = _this._moveIndex(ev, -1, selectedIndex - 1, selectedIndex);\n          }\n\n          break;\n\n        case Utilities_1.KeyCodes.down:\n          if (containsExpandCollapseModifier) {\n            ev.stopPropagation();\n            ev.preventDefault();\n          }\n\n          if (containsExpandCollapseModifier && !isOpen || _this.props.multiSelect) {\n            _this.setState({\n              isOpen: true\n            });\n          } else if (!_this._isDisabled()) {\n            newIndex = _this._moveIndex(ev, 1, selectedIndex + 1, selectedIndex);\n          }\n\n          break;\n\n        case Utilities_1.KeyCodes.home:\n          if (!_this.props.multiSelect) {\n            newIndex = _this._moveIndex(ev, 1, 0, selectedIndex);\n          }\n\n          break;\n\n        case Utilities_1.KeyCodes.end:\n          if (!_this.props.multiSelect) {\n            newIndex = _this._moveIndex(ev, -1, _this.props.options.length - 1, selectedIndex);\n          }\n\n          break;\n\n        case Utilities_1.KeyCodes.space:\n          // event handled in _onDropdownKeyUp\n          break;\n\n        default:\n          return;\n      }\n\n      if (newIndex !== selectedIndex) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    };\n\n    _this._onDropdownKeyUp = function (ev) {\n      // If Dropdown disabled do not process any keyboard events.\n      var disabled = _this._isDisabled();\n\n      if (disabled) {\n        return;\n      }\n\n      var shouldHandleKey = _this._shouldHandleKeyUp(ev);\n\n      var isOpen = _this.state.isOpen;\n\n      if (_this.props.onKeyUp) {\n        _this.props.onKeyUp(ev);\n\n        if (ev.preventDefault) {\n          return;\n        }\n      }\n\n      switch (ev.which) {\n        case Utilities_1.KeyCodes.space:\n          _this.setState({\n            isOpen: !isOpen\n          });\n\n          break;\n\n        default:\n          if (shouldHandleKey && isOpen) {\n            _this.setState({\n              isOpen: false\n            });\n          }\n\n          return;\n      }\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onZoneKeyDown = function (ev) {\n      var elementToFocus; // Take note if we are processing an alt (option) or meta (command) keydown.\n      // See comment in _shouldHandleKeyUp for reasoning.\n\n      _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);\n      var containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n\n      switch (ev.which) {\n        case Utilities_1.KeyCodes.up:\n          if (containsExpandCollapseModifier) {\n            _this.setState({\n              isOpen: false\n            });\n          } else {\n            if (_this._host.current) {\n              elementToFocus = Utilities_1.getLastFocusable(_this._host.current, _this._host.current.lastChild, true);\n            }\n          }\n\n          break;\n        // All directional keystrokes should be canceled when the zone is rendered.\n        // This avoids the body scroll from reacting and thus dismissing the dropdown.\n\n        case Utilities_1.KeyCodes.home:\n        case Utilities_1.KeyCodes.end:\n        case Utilities_1.KeyCodes.pageUp:\n        case Utilities_1.KeyCodes.pageDown:\n          break;\n\n        case Utilities_1.KeyCodes.down:\n          if (!containsExpandCollapseModifier && _this._host.current) {\n            elementToFocus = Utilities_1.getFirstFocusable(_this._host.current, _this._host.current.firstChild, true);\n          }\n\n          break;\n\n        case Utilities_1.KeyCodes.escape:\n          _this.setState({\n            isOpen: false\n          });\n\n          break;\n\n        case Utilities_1.KeyCodes.tab:\n          _this.setState({\n            isOpen: false\n          });\n\n          return;\n\n        default:\n          return;\n      }\n\n      if (elementToFocus) {\n        elementToFocus.focus();\n      }\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onZoneKeyUp = function (ev) {\n      var shouldHandleKey = _this._shouldHandleKeyUp(ev);\n\n      if (shouldHandleKey && _this.state.isOpen) {\n        _this.setState({\n          isOpen: false\n        });\n\n        ev.preventDefault();\n      }\n    };\n\n    _this._onDropdownClick = function (ev) {\n      if (_this.props.onClick) {\n        _this.props.onClick(ev);\n\n        if (ev.preventDefault) {\n          return;\n        }\n      }\n\n      var isOpen = _this.state.isOpen;\n\n      var disabled = _this._isDisabled();\n\n      if (!disabled) {\n        _this.setState({\n          isOpen: !isOpen\n        });\n      }\n    };\n\n    _this._onFocus = function (ev) {\n      var _a = _this.state,\n          isOpen = _a.isOpen,\n          selectedIndices = _a.selectedIndices,\n          hasFocus = _a.hasFocus;\n      var _b = _this.props,\n          multiSelect = _b.multiSelect,\n          openOnKeyboardFocus = _b.openOnKeyboardFocus;\n\n      var disabled = _this._isDisabled();\n\n      if (!disabled) {\n        if (!isOpen && selectedIndices.length === 0 && !multiSelect) {\n          // Per aria\n          _this._moveIndex(ev, 1, 0, -1);\n        }\n\n        if (_this.props.onFocus) {\n          _this.props.onFocus(ev);\n        }\n\n        var state = {\n          hasFocus: true\n        };\n\n        if (openOnKeyboardFocus && !hasFocus) {\n          state.isOpen = true;\n        }\n\n        _this.setState(state);\n      }\n    };\n    /**\n     * Because the isDisabled prop is deprecated, we have had to repeat this logic all over the place.\n     * This helper method avoids all the repetition.\n     */\n\n\n    _this._isDisabled = function () {\n      var disabled = _this.props.disabled;\n      var isDisabled = _this.props.isDisabled; // Remove this deprecation workaround at 1.0.0\n\n      if (isDisabled !== undefined) {\n        disabled = isDisabled;\n      }\n\n      return disabled;\n    };\n\n    _this._onRenderLabel = function (props) {\n      var id = _this._id;\n      var label = props.label,\n          required = props.required,\n          disabled = props.disabled;\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n      return label ? React.createElement(Label_1.Label, {\n        className: _this._classNames.label,\n        id: id + '-label',\n        htmlFor: id,\n        required: required,\n        styles: labelStyles,\n        disabled: disabled\n      }, label) : null;\n    };\n\n    Utilities_1.initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Utilities_1.warnDeprecations('Dropdown', props, {\n        isDisabled: 'disabled',\n        onChanged: 'onChange',\n        placeHolder: 'placeholder',\n        onRenderPlaceHolder: 'onRenderPlaceholder'\n      });\n      Utilities_1.warnMutuallyExclusive('Dropdown', props, {\n        defaultSelectedKey: 'selectedKey',\n        defaultSelectedKeys: 'selectedKeys',\n        selectedKeys: 'selectedKey',\n        multiSelect: 'defaultSelectedKey',\n        selectedKey: 'multiSelect'\n      });\n    }\n\n    _this._id = props.id || Utilities_1.getId('Dropdown');\n    _this._isScrollIdle = true;\n    var selectedIndices;\n\n    if (_this.props.multiSelect) {\n      var selectedKeys = props.defaultSelectedKeys !== undefined ? props.defaultSelectedKeys : props.selectedKeys;\n      selectedIndices = _this._getSelectedIndexes(props.options, selectedKeys);\n    } else {\n      var selectedKey = props.defaultSelectedKey !== undefined ? props.defaultSelectedKey : props.selectedKey;\n      selectedIndices = _this._getSelectedIndexes(props.options, selectedKey);\n\n      _this._sizePosCache.updateOptions(props.options);\n    }\n\n    _this.state = {\n      isOpen: false,\n      selectedIndices: selectedIndices,\n      hasFocus: false,\n      calloutRenderEdge: undefined\n    };\n    return _this;\n  }\n\n  _Object$defineProperty(DropdownBase.prototype, \"selectedOptions\", {\n    /**\n     * All selected options\n     */\n    get: function () {\n      var options = this.props.options;\n      var selectedIndices = this.state.selectedIndices;\n      return index_1.getAllSelectedOptions(options, selectedIndices);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DropdownBase.prototype.componentWillUnmount = function () {\n    clearTimeout(this._scrollIdleTimeoutId);\n  }; // tslint:disable-next-line function-name\n\n\n  DropdownBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    // In controlled component usage where selectedKey is provided, update the selectedIndex\n    // state if the key or options change.\n    var selectedKeyProp; // this does a shallow compare (assumes options are pure), for the purposes of determining whether\n    // defaultSelectedKey/defaultSelectedKeys are respected.\n\n    var didOptionsChange = newProps.options !== this.props.options;\n\n    if (newProps.multiSelect) {\n      if (didOptionsChange && newProps.defaultSelectedKeys !== undefined) {\n        selectedKeyProp = 'defaultSelectedKeys';\n      } else {\n        selectedKeyProp = 'selectedKeys';\n      }\n    } else {\n      if (didOptionsChange && newProps.defaultSelectedKey !== undefined) {\n        selectedKeyProp = 'defaultSelectedKey';\n      } else {\n        selectedKeyProp = 'selectedKey';\n      }\n    }\n\n    if (newProps[selectedKeyProp] !== undefined && (newProps[selectedKeyProp] !== this.props[selectedKeyProp] || didOptionsChange)) {\n      this.setState({\n        selectedIndices: this._getSelectedIndexes(newProps.options, newProps[selectedKeyProp])\n      });\n    }\n\n    if (newProps.options !== this.props.options && // preexisting code assumes purity of the options...\n    !newProps.multiSelect // only relevant in single selection\n    ) {\n        this._sizePosCache.updateOptions(newProps.options);\n      }\n  };\n\n  DropdownBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (prevState.isOpen === true && this.state.isOpen === false) {\n      this._gotMouseMove = false;\n\n      if (this._dropDown.current) {\n        this._dropDown.current.focus();\n      }\n\n      if (this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n    }\n  };\n\n  DropdownBase.prototype.render = function () {\n    var _this = this;\n\n    var id = this._id;\n    var props = this.props;\n    var className = props.className,\n        label = props.label,\n        options = props.options,\n        ariaLabel = props.ariaLabel,\n        required = props.required,\n        errorMessage = props.errorMessage,\n        multiSelect = props.multiSelect,\n        keytipProps = props.keytipProps,\n        propStyles = props.styles,\n        theme = props.theme,\n        panelProps = props.panelProps,\n        calloutProps = props.calloutProps,\n        _a = props.onRenderTitle,\n        onRenderTitle = _a === void 0 ? this._onRenderTitle : _a,\n        _b = props.onRenderContainer,\n        onRenderContainer = _b === void 0 ? this._onRenderContainer : _b,\n        _c = props.onRenderCaretDown,\n        onRenderCaretDown = _c === void 0 ? this._onRenderCaretDown : _c,\n        _d = props.onRenderLabel,\n        onRenderLabel = _d === void 0 ? this._onRenderLabel : _d;\n    var _e = this.state,\n        isOpen = _e.isOpen,\n        selectedIndices = _e.selectedIndices,\n        hasFocus = _e.hasFocus,\n        calloutRenderEdge = _e.calloutRenderEdge;\n    var onRenderPlaceholder = props.onRenderPlaceholder || props.onRenderPlaceHolder || this._onRenderPlaceholder;\n    var selectedOptions = index_1.getAllSelectedOptions(options, selectedIndices);\n    var divProps = Utilities_1.getNativeProps(props, Utilities_1.divProperties);\n\n    var disabled = this._isDisabled();\n\n    var optionId = id + '-option';\n    var ariaAttrs = multiSelect || disabled ? {\n      role: undefined,\n      ariaActiveDescendant: undefined,\n      childRole: undefined,\n      ariaSetSize: undefined,\n      ariaPosInSet: undefined,\n      ariaSelected: undefined\n    } : // single select\n    {\n      role: 'listbox',\n      ariaActiveDescendant: isOpen && selectedIndices.length === 1 && selectedIndices[0] >= 0 ? this._id + '-list' + selectedIndices[0] : optionId,\n      childRole: 'option',\n      ariaSetSize: this._sizePosCache.optionSetSize,\n      ariaPosInSet: this._sizePosCache.positionInSet(selectedIndices[0]),\n      ariaSelected: selectedIndices[0] === undefined ? undefined : true\n    };\n    this._classNames = getClassNames(propStyles, {\n      theme: theme,\n      className: className,\n      hasError: !!(errorMessage && errorMessage.length > 0),\n      hasLabel: !!label,\n      isOpen: isOpen,\n      required: required,\n      disabled: disabled,\n      isRenderingPlaceholder: !selectedOptions.length,\n      panelClassName: !!panelProps ? panelProps.className : undefined,\n      calloutClassName: !!calloutProps ? calloutProps.className : undefined,\n      calloutRenderEdge: calloutRenderEdge\n    });\n    return React.createElement(\"div\", {\n      className: this._classNames.root\n    }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(KeytipData_1.KeytipData, {\n      keytipProps: keytipProps,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"div\", tslib_1.__assign({}, keytipAttributes, {\n        \"data-is-focusable\": !disabled,\n        ref: _this._dropDown,\n        id: id,\n        tabIndex: disabled ? -1 : 0,\n        \"aria-expanded\": isOpen ? 'true' : 'false',\n        role: ariaAttrs.role,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": label && !ariaLabel ? id + '-label' : undefined,\n        \"aria-describedby\": Utilities_1.mergeAriaAttributeValues(optionId, keytipAttributes['aria-describedby']),\n        \"aria-activedescendant\": isOpen ? ariaAttrs.ariaActiveDescendant : undefined,\n        \"aria-required\": required,\n        \"aria-disabled\": disabled,\n        \"aria-owns\": isOpen ? id + '-list' : undefined\n      }, divProps, {\n        className: _this._classNames.dropdown,\n        onBlur: _this._onDropdownBlur,\n        onKeyDown: _this._onDropdownKeyDown,\n        onKeyUp: _this._onDropdownKeyUp,\n        onClick: _this._onDropdownClick,\n        onFocus: _this._onFocus\n      }), React.createElement(\"span\", {\n        id: optionId,\n        className: _this._classNames.title,\n        \"aria-atomic\": true,\n        role: ariaAttrs.childRole,\n        \"aria-live\": !hasFocus || disabled || multiSelect || isOpen ? 'off' : 'assertive',\n        \"aria-label\": selectedOptions.length ? selectedOptions[0].text : _this._placeholder,\n        \"aria-setsize\": ariaAttrs.ariaSetSize,\n        \"aria-posinset\": ariaAttrs.ariaPosInSet,\n        \"aria-selected\": ariaAttrs.ariaSelected\n      }, // If option is selected render title, otherwise render the placeholder text\n      selectedOptions.length ? onRenderTitle(selectedOptions, _this._onRenderTitle) : onRenderPlaceholder(props, _this._onRenderPlaceholder)), React.createElement(\"span\", {\n        className: _this._classNames.caretDownWrapper\n      }, onRenderCaretDown(props, _this._onRenderCaretDown)));\n    }), isOpen && onRenderContainer(props, this._onRenderContainer), errorMessage && errorMessage.length > 0 && React.createElement(\"div\", {\n      className: this._classNames.errorMessage\n    }, errorMessage));\n  };\n\n  DropdownBase.prototype.focus = function (shouldOpenOnFocus) {\n    if (this._dropDown.current && this._dropDown.current.tabIndex !== -1) {\n      this._dropDown.current.focus();\n\n      if (shouldOpenOnFocus) {\n        this.setState({\n          isOpen: true\n        });\n      }\n    }\n  };\n\n  DropdownBase.prototype.setSelectedIndex = function (event, index) {\n    var _this = this;\n\n    var _a = this.props,\n        options = _a.options,\n        selectedKey = _a.selectedKey,\n        selectedKeys = _a.selectedKeys,\n        multiSelect = _a.multiSelect,\n        notifyOnReselect = _a.notifyOnReselect;\n    var _b = this.state.selectedIndices,\n        selectedIndices = _b === void 0 ? [] : _b;\n    var checked = selectedIndices ? selectedIndices.indexOf(index) > -1 : false;\n    var newIndexes = [];\n    index = Math.max(0, Math.min(options.length - 1, index)); // If this is a controlled component then no state change should take place.\n\n    if (selectedKey !== undefined || selectedKeys !== undefined) {\n      this._onChange(event, options, index, checked, multiSelect);\n\n      return;\n    }\n\n    if (!multiSelect && !notifyOnReselect && index === selectedIndices[0]) {\n      return;\n    } else if (multiSelect) {\n      newIndexes = selectedIndices ? this._copyArray(selectedIndices) : [];\n\n      if (checked) {\n        var position = newIndexes.indexOf(index);\n\n        if (position > -1) {\n          // unchecked the current one\n          newIndexes.splice(position, 1);\n        }\n      } else {\n        // add the new selected index into the existing one\n        newIndexes.push(index);\n      }\n    } else {\n      // Set the selected option if this is an uncontrolled component\n      newIndexes = [index];\n    }\n\n    event.persist(); // Call onChange after state is updated\n\n    this.setState({\n      selectedIndices: newIndexes\n    }, function () {\n      _this._onChange(event, options, index, checked, multiSelect);\n    });\n  };\n\n  _Object$defineProperty(DropdownBase.prototype, \"_placeholder\", {\n    /** Get either props.placeholder (new name) or props.placeHolder (old name) */\n    get: function () {\n      return this.props.placeholder || this.props.placeHolder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DropdownBase.prototype._copyArray = function (array) {\n    var newArray = [];\n\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n      var element = array_1[_i];\n      newArray.push(element);\n    }\n\n    return newArray;\n  };\n  /**\n   * Finds the next valid Dropdown option and sets the selected index to it.\n   * @param stepValue - Value of how many items the function should traverse.  Should be -1 or 1.\n   * @param index - Index of where the search should start\n   * @param selectedIndex - The selectedIndex Dropdown's state\n   * @returns The next valid dropdown option's index\n   */\n\n\n  DropdownBase.prototype._moveIndex = function (event, stepValue, index, selectedIndex) {\n    var options = this.props.options; // Return selectedIndex if nothing has changed or options is empty\n\n    if (selectedIndex === index || options.length === 0) {\n      return selectedIndex;\n    } // Set starting index to 0 if index is < 0\n\n\n    if (index < 0) {\n      index = 0;\n    } // Set starting index to last option index if greater than options.length\n\n\n    if (index >= options.length) {\n      index = options.length - 1;\n    }\n\n    var stepCounter = 0; // If current index is a header or divider, or disabled, increment by step\n\n    while (options[index].itemType === Dropdown_types_1.DropdownMenuItemType.Header || options[index].itemType === Dropdown_types_1.DropdownMenuItemType.Divider || options[index].disabled) {\n      // If stepCounter exceeds length of options, then return selectedIndex (-1)\n      if (stepCounter >= options.length) {\n        return selectedIndex;\n      } // If index + stepValue is out of bounds, wrap around\n\n\n      if (index + stepValue < 0) {\n        index = options.length;\n      } else if (index + stepValue >= options.length) {\n        index = -1;\n      }\n\n      index = index + stepValue;\n      stepCounter++;\n    }\n\n    this.setSelectedIndex(event, index);\n    return index;\n  };\n  /** Wrap item list in a FocusZone */\n\n\n  DropdownBase.prototype._renderFocusableList = function (props) {\n    var _a = props.onRenderList,\n        onRenderList = _a === void 0 ? this._onRenderList : _a,\n        label = props.label,\n        ariaLabel = props.ariaLabel;\n    var id = this._id;\n    return React.createElement(\"div\", {\n      className: this._classNames.dropdownItemsWrapper,\n      onKeyDown: this._onZoneKeyDown,\n      onKeyUp: this._onZoneKeyUp,\n      ref: this._host,\n      tabIndex: 0\n    }, React.createElement(FocusZone_1.FocusZone, {\n      ref: this._focusZone,\n      direction: FocusZone_1.FocusZoneDirection.vertical,\n      id: id + '-list',\n      className: this._classNames.dropdownItems,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": label && !ariaLabel ? id + '-label' : undefined,\n      role: \"listbox\"\n    }, onRenderList(props, this._onRenderList)));\n  };\n\n  DropdownBase.prototype._renderSeparator = function (item) {\n    var index = item.index,\n        key = item.key;\n\n    if (index > 0) {\n      return React.createElement(\"div\", {\n        role: \"separator\",\n        key: key,\n        className: this._classNames.dropdownDivider\n      });\n    }\n\n    return null;\n  };\n\n  DropdownBase.prototype._renderHeader = function (item) {\n    var _a = this.props.onRenderOption,\n        onRenderOption = _a === void 0 ? this._onRenderOption : _a;\n    var key = item.key;\n    return React.createElement(\"div\", {\n      key: key,\n      className: this._classNames.dropdownItemHeader\n    }, onRenderOption(item, this._onRenderOption));\n  };\n\n  DropdownBase.prototype._onItemMouseEnter = function (item, ev) {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    var targetElement = ev.currentTarget;\n    targetElement.focus();\n  };\n\n  DropdownBase.prototype._onItemMouseMove = function (item, ev) {\n    var targetElement = ev.currentTarget;\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || document.activeElement === targetElement) {\n      return;\n    }\n\n    targetElement.focus();\n  };\n\n  DropdownBase.prototype._shouldIgnoreMouseEvent = function () {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  };\n  /** Get all selected indexes for multi-select mode */\n\n\n  DropdownBase.prototype._getSelectedIndexes = function (options, selectedKey) {\n    if (selectedKey === undefined) {\n      if (this.props.multiSelect) {\n        return this._getAllSelectedIndices(options);\n      }\n\n      var selectedIndex = this._getSelectedIndex(options, null);\n\n      return selectedIndex !== -1 ? [selectedIndex] : [];\n    } else if (!_Array$isArray(selectedKey)) {\n      var selectedIndex = this._getSelectedIndex(options, selectedKey);\n\n      return selectedIndex !== -1 ? [selectedIndex] : [];\n    }\n\n    var selectedIndices = [];\n\n    for (var _i = 0, selectedKey_1 = selectedKey; _i < selectedKey_1.length; _i++) {\n      var key = selectedKey_1[_i];\n\n      var selectedIndex = this._getSelectedIndex(options, key);\n\n      selectedIndex !== -1 && selectedIndices.push(selectedIndex);\n    }\n\n    return selectedIndices;\n  };\n\n  DropdownBase.prototype._getAllSelectedIndices = function (options) {\n    return options.map(function (option, index) {\n      return option.selected ? index : -1;\n    }).filter(function (index) {\n      return index !== -1;\n    });\n  };\n\n  DropdownBase.prototype._getSelectedIndex = function (options, selectedKey) {\n    return Utilities_1.findIndex(options, function (option) {\n      // tslint:disable-next-line:triple-equals\n      if (selectedKey != null) {\n        return option.key === selectedKey;\n      } else {\n        return !!option.isSelected || !!option.selected;\n      }\n    });\n  };\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n\n\n  DropdownBase.prototype._isAltOrMeta = function (ev) {\n    return ev.which === Utilities_1.KeyCodes.alt || ev.key === 'Meta';\n  };\n  /**\n   * We close the menu on key up only if ALL of the following are true:\n   * - Most recent key down was alt or meta (command)\n   * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n   *   expand/collapse the menu)\n   * - We're not on a Mac (or iOS)\n   *\n   * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n   * closing any open context menus. There is not a similar behavior on Macs.\n   */\n\n\n  DropdownBase.prototype._shouldHandleKeyUp = function (ev) {\n    var keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);\n\n    this._lastKeyDownWasAltOrMeta = false;\n    return !!keyPressIsAltOrMetaAlone && !(Utilities_1.isMac() || Utilities_1.isIOS());\n  };\n\n  DropdownBase.defaultProps = {\n    options: []\n  };\n  DropdownBase = tslib_1.__decorate([withResponsiveMode_1.withResponsiveMode], DropdownBase);\n  return DropdownBase;\n}(React.Component);\n\nexports.DropdownBase = DropdownBase;","map":{"version":3,"sources":["components/Dropdown/Dropdown.base.tsx"],"names":[],"mappings":"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","sourcesContent":["declare function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): number;\n\nimport * as React from 'react';\nimport {\n  IStyleFunctionOrObject,\n  KeyCodes,\n  classNamesFunction,\n  divProperties,\n  findIndex,\n  getDocument,\n  getFirstFocusable,\n  getId,\n  getLastFocusable,\n  getNativeProps,\n  initializeComponentRef,\n  isIOS,\n  isMac,\n  mergeAriaAttributeValues,\n  safeRequestAnimationFrame,\n  warnDeprecations,\n  warnMutuallyExclusive\n} from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Checkbox } from '../../Checkbox';\nimport { CommandButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { DropdownMenuItemType, IDropdownOption, IDropdownProps, IDropdownStyleProps, IDropdownStyles, IDropdown } from './Dropdown.types';\nimport { DropdownSizePosCache } from './utilities/DropdownSizePosCache';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { ICalloutPositionedInfo, RectangleEdge } from '../../utilities/positioning';\nimport { Icon } from '../../Icon';\nimport { ILabelStyleProps, ILabelStyles, Label } from '../../Label';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { IWithResponsiveModeState } from '../../utilities/decorators/withResponsiveMode';\nimport { KeytipData } from '../../KeytipData';\nimport { Panel, IPanelStyleProps, IPanelStyles } from '../../Panel';\nimport { ResponsiveMode, withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nimport { SelectableOptionMenuItemType, getAllSelectedOptions, ISelectableDroppableTextProps } from '../../utilities/selectableOption/index';\n\nconst getClassNames = classNamesFunction<IDropdownStyleProps, IDropdownStyles>();\n\n/** Internal only props interface to support mixing in responsive mode */\nexport interface IDropdownInternalProps extends IDropdownProps, IWithResponsiveModeState {}\n\nexport interface IDropdownState {\n  isOpen: boolean;\n  selectedIndices: number[];\n  /** Whether the root dropdown element has focus. */\n  hasFocus: boolean;\n  calloutRenderEdge?: RectangleEdge;\n}\n\n@withResponsiveMode\nexport class DropdownBase extends React.Component<IDropdownInternalProps, IDropdownState> implements IDropdown {\n  public static defaultProps = {\n    options: [] as any[]\n  };\n\n  private _host = React.createRef<HTMLDivElement>();\n  private _focusZone = React.createRef<FocusZone>();\n  private _dropDown = React.createRef<HTMLDivElement>();\n  private _id: string;\n  private _isScrollIdle: boolean;\n  private readonly _scrollIdleDelay: number = 250 /* ms */;\n  private _scrollIdleTimeoutId: number | undefined;\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  private _lastKeyDownWasAltOrMeta: boolean | undefined;\n  private _sizePosCache: DropdownSizePosCache = new DropdownSizePosCache();\n  private _classNames: IProcessedStyleSet<IDropdownStyles>;\n  private _requestAnimationFrame = safeRequestAnimationFrame(this);\n\n  /** Flag for when we get the first mouseMove */\n  private _gotMouseMove: boolean;\n\n  constructor(props: IDropdownProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dropdown', props, {\n        isDisabled: 'disabled',\n        onChanged: 'onChange',\n        placeHolder: 'placeholder',\n        onRenderPlaceHolder: 'onRenderPlaceholder'\n      });\n\n      warnMutuallyExclusive('Dropdown', props, {\n        defaultSelectedKey: 'selectedKey',\n        defaultSelectedKeys: 'selectedKeys',\n        selectedKeys: 'selectedKey',\n        multiSelect: 'defaultSelectedKey',\n        selectedKey: 'multiSelect'\n      });\n    }\n\n    this._id = props.id || getId('Dropdown');\n    this._isScrollIdle = true;\n\n    let selectedIndices: number[];\n\n    if (this.props.multiSelect) {\n      const selectedKeys = props.defaultSelectedKeys !== undefined ? props.defaultSelectedKeys : props.selectedKeys;\n      selectedIndices = this._getSelectedIndexes(props.options, selectedKeys);\n    } else {\n      const selectedKey = props.defaultSelectedKey !== undefined ? props.defaultSelectedKey : props.selectedKey;\n      selectedIndices = this._getSelectedIndexes(props.options, selectedKey!);\n      this._sizePosCache.updateOptions(props.options);\n    }\n\n    this.state = {\n      isOpen: false,\n      selectedIndices,\n      hasFocus: false,\n      calloutRenderEdge: undefined\n    };\n  }\n\n  /**\n   * All selected options\n   */\n  public get selectedOptions(): IDropdownOption[] {\n    const { options } = this.props;\n    const { selectedIndices } = this.state;\n\n    return getAllSelectedOptions(options, selectedIndices);\n  }\n\n  public componentWillUnmount() {\n    clearTimeout(this._scrollIdleTimeoutId);\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IDropdownProps): void {\n    // In controlled component usage where selectedKey is provided, update the selectedIndex\n    // state if the key or options change.\n    let selectedKeyProp: 'defaultSelectedKeys' | 'selectedKeys' | 'defaultSelectedKey' | 'selectedKey';\n\n    // this does a shallow compare (assumes options are pure), for the purposes of determining whether\n    // defaultSelectedKey/defaultSelectedKeys are respected.\n    const didOptionsChange = newProps.options !== this.props.options;\n\n    if (newProps.multiSelect) {\n      if (didOptionsChange && newProps.defaultSelectedKeys !== undefined) {\n        selectedKeyProp = 'defaultSelectedKeys';\n      } else {\n        selectedKeyProp = 'selectedKeys';\n      }\n    } else {\n      if (didOptionsChange && newProps.defaultSelectedKey !== undefined) {\n        selectedKeyProp = 'defaultSelectedKey';\n      } else {\n        selectedKeyProp = 'selectedKey';\n      }\n    }\n\n    if (newProps[selectedKeyProp] !== undefined && (newProps[selectedKeyProp] !== this.props[selectedKeyProp] || didOptionsChange)) {\n      this.setState({\n        selectedIndices: this._getSelectedIndexes(newProps.options, newProps[selectedKeyProp])\n      });\n    }\n\n    if (\n      newProps.options !== this.props.options && // preexisting code assumes purity of the options...\n      !newProps.multiSelect // only relevant in single selection\n    ) {\n      this._sizePosCache.updateOptions(newProps.options);\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDropdownProps, prevState: IDropdownState) {\n    if (prevState.isOpen === true && this.state.isOpen === false) {\n      this._gotMouseMove = false;\n\n      if (this._dropDown.current) {\n        this._dropDown.current.focus();\n      }\n\n      if (this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const id = this._id;\n\n    const props = this.props;\n    const {\n      className,\n      label,\n      options,\n      ariaLabel,\n      required,\n      errorMessage,\n      multiSelect,\n      keytipProps,\n      styles: propStyles,\n      theme,\n      panelProps,\n      calloutProps,\n      onRenderTitle = this._onRenderTitle,\n      onRenderContainer = this._onRenderContainer,\n      onRenderCaretDown = this._onRenderCaretDown,\n      onRenderLabel = this._onRenderLabel\n    } = props;\n    const { isOpen, selectedIndices, hasFocus, calloutRenderEdge } = this.state;\n    const onRenderPlaceholder = props.onRenderPlaceholder || props.onRenderPlaceHolder || this._onRenderPlaceholder;\n\n    const selectedOptions = getAllSelectedOptions(options, selectedIndices);\n    const divProps = getNativeProps(props, divProperties);\n\n    const disabled = this._isDisabled();\n\n    const optionId = id + '-option';\n    const ariaAttrs =\n      multiSelect || disabled\n        ? {\n            role: undefined,\n            ariaActiveDescendant: undefined,\n            childRole: undefined,\n            ariaSetSize: undefined,\n            ariaPosInSet: undefined,\n            ariaSelected: undefined\n          }\n        : // single select\n          {\n            role: 'listbox',\n            ariaActiveDescendant:\n              isOpen && selectedIndices.length === 1 && selectedIndices[0] >= 0 ? this._id + '-list' + selectedIndices[0] : optionId,\n            childRole: 'option',\n            ariaSetSize: this._sizePosCache.optionSetSize,\n            ariaPosInSet: this._sizePosCache.positionInSet(selectedIndices[0]),\n            ariaSelected: selectedIndices[0] === undefined ? undefined : true\n          };\n\n    this._classNames = getClassNames(propStyles, {\n      theme,\n      className,\n      hasError: !!(errorMessage && errorMessage.length > 0),\n      hasLabel: !!label,\n      isOpen,\n      required,\n      disabled,\n      isRenderingPlaceholder: !selectedOptions.length,\n      panelClassName: !!panelProps ? panelProps.className : undefined,\n      calloutClassName: !!calloutProps ? calloutProps.className : undefined,\n      calloutRenderEdge: calloutRenderEdge\n    });\n\n    return (\n      <div className={this._classNames.root}>\n        {onRenderLabel(this.props, this._onRenderLabel)}\n        <KeytipData keytipProps={keytipProps} disabled={disabled}>\n          {(keytipAttributes: any): JSX.Element => (\n            <div\n              {...keytipAttributes}\n              data-is-focusable={!disabled}\n              ref={this._dropDown}\n              id={id}\n              tabIndex={disabled ? -1 : 0}\n              aria-expanded={isOpen ? 'true' : 'false'}\n              role={ariaAttrs.role}\n              aria-label={ariaLabel}\n              aria-labelledby={label && !ariaLabel ? id + '-label' : undefined}\n              aria-describedby={mergeAriaAttributeValues(optionId, keytipAttributes['aria-describedby'])}\n              aria-activedescendant={isOpen ? ariaAttrs.ariaActiveDescendant : undefined}\n              aria-required={required}\n              aria-disabled={disabled}\n              aria-owns={isOpen ? id + '-list' : undefined}\n              {...divProps}\n              className={this._classNames.dropdown}\n              onBlur={this._onDropdownBlur}\n              onKeyDown={this._onDropdownKeyDown}\n              onKeyUp={this._onDropdownKeyUp}\n              onClick={this._onDropdownClick}\n              onFocus={this._onFocus}\n            >\n              <span\n                id={optionId}\n                className={this._classNames.title}\n                aria-atomic={true}\n                role={ariaAttrs.childRole}\n                aria-live={!hasFocus || disabled || multiSelect || isOpen ? 'off' : 'assertive'}\n                aria-label={selectedOptions.length ? selectedOptions[0].text : this._placeholder}\n                aria-setsize={ariaAttrs.ariaSetSize}\n                aria-posinset={ariaAttrs.ariaPosInSet}\n                aria-selected={ariaAttrs.ariaSelected}\n              >\n                {// If option is selected render title, otherwise render the placeholder text\n                selectedOptions.length\n                  ? onRenderTitle(selectedOptions, this._onRenderTitle)\n                  : onRenderPlaceholder(props, this._onRenderPlaceholder)}\n              </span>\n              <span className={this._classNames.caretDownWrapper}>{onRenderCaretDown(props, this._onRenderCaretDown)}</span>\n            </div>\n          )}\n        </KeytipData>\n        {isOpen && onRenderContainer(props, this._onRenderContainer)}\n        {errorMessage && errorMessage.length > 0 && <div className={this._classNames.errorMessage}>{errorMessage}</div>}\n      </div>\n    );\n  }\n\n  public focus(shouldOpenOnFocus?: boolean): void {\n    if (this._dropDown.current && this._dropDown.current.tabIndex !== -1) {\n      this._dropDown.current.focus();\n\n      if (shouldOpenOnFocus) {\n        this.setState({\n          isOpen: true\n        });\n      }\n    }\n  }\n\n  public setSelectedIndex(event: React.FormEvent<HTMLDivElement>, index: number): void {\n    const { options, selectedKey, selectedKeys, multiSelect, notifyOnReselect } = this.props;\n    const { selectedIndices = [] } = this.state;\n    const checked: boolean = selectedIndices ? selectedIndices.indexOf(index) > -1 : false;\n    let newIndexes: number[] = [];\n\n    index = Math.max(0, Math.min(options.length - 1, index));\n\n    // If this is a controlled component then no state change should take place.\n    if (selectedKey !== undefined || selectedKeys !== undefined) {\n      this._onChange(event, options, index, checked, multiSelect);\n      return;\n    }\n\n    if (!multiSelect && !notifyOnReselect && index === selectedIndices[0]) {\n      return;\n    } else if (multiSelect) {\n      newIndexes = selectedIndices ? this._copyArray(selectedIndices) : [];\n      if (checked) {\n        const position = newIndexes.indexOf(index);\n        if (position > -1) {\n          // unchecked the current one\n          newIndexes.splice(position, 1);\n        }\n      } else {\n        // add the new selected index into the existing one\n        newIndexes.push(index);\n      }\n    } else {\n      // Set the selected option if this is an uncontrolled component\n      newIndexes = [index];\n    }\n\n    event.persist();\n    // Call onChange after state is updated\n    this.setState(\n      {\n        selectedIndices: newIndexes\n      },\n      () => {\n        this._onChange(event, options, index, checked, multiSelect);\n      }\n    );\n  }\n\n  private _onChange = (\n    event: React.FormEvent<HTMLDivElement>,\n    options: IDropdownOption[],\n    index: number,\n    checked?: boolean,\n    multiSelect?: boolean\n  ) => {\n    const { onChange, onChanged } = this.props;\n    if (onChange) {\n      // for single-select, option passed in will always be selected.\n      // for multi-select, flip the checked value\n      const changedOpt = multiSelect ? { ...options[index], selected: !checked } : options[index];\n\n      onChange({ ...event, target: this._dropDown.current as EventTarget }, changedOpt, index);\n    }\n\n    if (onChanged) {\n      // for single-select, option passed in will always be selected.\n      // for multi-select, flip the checked value\n      const changedOpt = multiSelect ? { ...options[index], selected: !checked } : options[index];\n      onChanged(changedOpt, index);\n    }\n  };\n\n  /** Get either props.placeholder (new name) or props.placeHolder (old name) */\n  private get _placeholder(): string | undefined {\n    return this.props.placeholder || this.props.placeHolder;\n  }\n\n  private _copyArray(array: any[]): any[] {\n    const newArray = [];\n    for (const element of array) {\n      newArray.push(element);\n    }\n    return newArray;\n  }\n\n  /**\n   * Finds the next valid Dropdown option and sets the selected index to it.\n   * @param stepValue - Value of how many items the function should traverse.  Should be -1 or 1.\n   * @param index - Index of where the search should start\n   * @param selectedIndex - The selectedIndex Dropdown's state\n   * @returns The next valid dropdown option's index\n   */\n  private _moveIndex(event: React.FormEvent<HTMLDivElement>, stepValue: number, index: number, selectedIndex: number): number {\n    const { options } = this.props;\n    // Return selectedIndex if nothing has changed or options is empty\n    if (selectedIndex === index || options.length === 0) {\n      return selectedIndex;\n    }\n\n    // Set starting index to 0 if index is < 0\n    if (index < 0) {\n      index = 0;\n    }\n    // Set starting index to last option index if greater than options.length\n    if (index >= options.length) {\n      index = options.length - 1;\n    }\n    let stepCounter = 0;\n    // If current index is a header or divider, or disabled, increment by step\n    while (\n      options[index].itemType === DropdownMenuItemType.Header ||\n      options[index].itemType === DropdownMenuItemType.Divider ||\n      options[index].disabled\n    ) {\n      // If stepCounter exceeds length of options, then return selectedIndex (-1)\n      if (stepCounter >= options.length) {\n        return selectedIndex;\n      }\n      // If index + stepValue is out of bounds, wrap around\n      if (index + stepValue < 0) {\n        index = options.length;\n      } else if (index + stepValue >= options.length) {\n        index = -1;\n      }\n\n      index = index + stepValue;\n      stepCounter++;\n    }\n\n    this.setSelectedIndex(event, index);\n    return index;\n  }\n\n  /** Render text in dropdown input */\n  private _onRenderTitle = (items: IDropdownOption[]): JSX.Element => {\n    const { multiSelectDelimiter = ', ' } = this.props;\n\n    const displayTxt = items.map(i => i.text).join(multiSelectDelimiter);\n    return <span>{displayTxt}</span>;\n  };\n\n  /** Render placeholder text in dropdown input */\n  private _onRenderPlaceholder = (props: IDropdownProps): JSX.Element | null => {\n    if (!this._placeholder) {\n      return null;\n    }\n    return <span>{this._placeholder}</span>;\n  };\n\n  /** Render Callout or Panel container and pass in list */\n  private _onRenderContainer = (props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element => {\n    const { calloutProps, panelProps } = props;\n    const { responsiveMode, dropdownWidth } = this.props;\n\n    const isSmall = responsiveMode! <= ResponsiveMode.medium;\n\n    const panelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.panel as IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>)\n      : undefined;\n\n    return isSmall ? (\n      <Panel isOpen={true} isLightDismiss={true} onDismiss={this._onDismiss} hasCloseButton={false} styles={panelStyles} {...panelProps}>\n        {this._renderFocusableList(props)}\n      </Panel>\n    ) : (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={0}\n        doNotLayer={false}\n        directionalHintFixed={false}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        {...calloutProps}\n        className={this._classNames.callout}\n        target={this._dropDown.current}\n        onDismiss={this._onDismiss}\n        onScroll={this._onScroll}\n        onPositioned={this._onPositioned}\n        calloutWidth={dropdownWidth || (this._dropDown.current ? this._dropDown.current.clientWidth : 0)}\n      >\n        {this._renderFocusableList(props)}\n      </Callout>\n    );\n  };\n\n  /** Render Caret Down Icon */\n  private _onRenderCaretDown = (props: IDropdownProps): JSX.Element => {\n    return <Icon className={this._classNames.caretDown} iconName=\"ChevronDown\" aria-hidden={true} />;\n  };\n\n  /** Wrap item list in a FocusZone */\n  private _renderFocusableList(props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element {\n    const { onRenderList = this._onRenderList, label, ariaLabel } = props;\n    const id = this._id;\n\n    return (\n      <div\n        className={this._classNames.dropdownItemsWrapper}\n        onKeyDown={this._onZoneKeyDown}\n        onKeyUp={this._onZoneKeyUp}\n        ref={this._host}\n        tabIndex={0}\n      >\n        <FocusZone\n          ref={this._focusZone}\n          direction={FocusZoneDirection.vertical}\n          id={id + '-list'}\n          className={this._classNames.dropdownItems}\n          aria-label={ariaLabel}\n          aria-labelledby={label && !ariaLabel ? id + '-label' : undefined}\n          role=\"listbox\"\n        >\n          {onRenderList(props, this._onRenderList)}\n        </FocusZone>\n      </div>\n    );\n  }\n\n  /** Render List of items */\n  private _onRenderList = (props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element => {\n    const { onRenderItem = this._onRenderItem } = props;\n\n    return <>{props.options.map((item: any, index: number) => onRenderItem({ ...item, index }, this._onRenderItem))}</>;\n  };\n\n  private _onRenderItem = (item: IDropdownOption): JSX.Element | null => {\n    switch (item.itemType) {\n      case SelectableOptionMenuItemType.Divider:\n        return this._renderSeparator(item);\n      case SelectableOptionMenuItemType.Header:\n        return this._renderHeader(item);\n      default:\n        return this._renderOption(item);\n    }\n  };\n\n  private _renderSeparator(item: IDropdownOption): JSX.Element | null {\n    const { index, key } = item;\n    if (index! > 0) {\n      return <div role=\"separator\" key={key} className={this._classNames.dropdownDivider} />;\n    }\n    return null;\n  }\n\n  private _renderHeader(item: IDropdownOption): JSX.Element {\n    const { onRenderOption = this._onRenderOption } = this.props;\n    const { key } = item;\n    return (\n      <div key={key} className={this._classNames.dropdownItemHeader}>\n        {onRenderOption(item, this._onRenderOption)}\n      </div>\n    );\n  }\n\n  private _renderOption = (item: IDropdownOption): JSX.Element => {\n    const { onRenderOption = this._onRenderOption } = this.props;\n    const { selectedIndices = [] } = this.state;\n    const id = this._id;\n    const isItemSelected = item.index !== undefined && selectedIndices ? selectedIndices.indexOf(item.index) > -1 : false;\n\n    // select the right className based on the combination of selected/disabled\n    const itemClassName = item.hidden // predicate: item hidden\n      ? this._classNames.dropdownItemHidden\n      : isItemSelected && item.disabled === true // predicate: both selected and disabled\n      ? this._classNames.dropdownItemSelectedAndDisabled\n      : isItemSelected // predicate: selected only\n      ? this._classNames.dropdownItemSelected\n      : item.disabled === true // predicate: disabled only\n      ? this._classNames.dropdownItemDisabled\n      : this._classNames.dropdownItem;\n\n    const { title = item.text } = item;\n\n    return !this.props.multiSelect ? (\n      <CommandButton\n        id={id + '-list' + item.index}\n        key={item.key}\n        data-index={item.index}\n        data-is-focusable={!item.disabled}\n        disabled={item.disabled}\n        className={itemClassName}\n        onClick={this._onItemClick(item)}\n        onMouseEnter={this._onItemMouseEnter.bind(this, item)}\n        onMouseLeave={this._onMouseItemLeave.bind(this, item)}\n        onMouseMove={this._onItemMouseMove.bind(this, item)}\n        role=\"option\"\n        aria-selected={isItemSelected ? 'true' : 'false'}\n        ariaLabel={item.ariaLabel}\n        title={title}\n      >\n        {onRenderOption(item, this._onRenderOption)}\n      </CommandButton>\n    ) : (\n      <Checkbox\n        id={id + '-list' + item.index}\n        key={item.key}\n        data-index={item.index}\n        data-is-focusable={!item.disabled}\n        disabled={item.disabled}\n        onChange={this._onItemClick(item)}\n        inputProps={{\n          onMouseEnter: this._onItemMouseEnter.bind(this, item),\n          onMouseLeave: this._onMouseItemLeave.bind(this, item),\n          onMouseMove: this._onItemMouseMove.bind(this, item)\n        }}\n        label={item.text}\n        title={item.title ? item.title : item.text}\n        onRenderLabel={this._onRenderItemLabel.bind(this, item)}\n        className={itemClassName}\n        role=\"option\"\n        aria-selected={isItemSelected ? 'true' : 'false'}\n        checked={isItemSelected}\n      />\n    );\n  };\n\n  /** Render content of item (i.e. text/icon inside of button) */\n  private _onRenderOption = (item: IDropdownOption): JSX.Element => {\n    return <span className={this._classNames.dropdownOptionText}>{item.text}</span>;\n  };\n\n  /** Render custom label for drop down item */\n  private _onRenderItemLabel = (item: IDropdownOption): JSX.Element | null => {\n    const { onRenderOption = this._onRenderOption } = this.props;\n    return onRenderOption(item, this._onRenderOption);\n  };\n\n  private _onPositioned = (positions?: ICalloutPositionedInfo): void => {\n    if (this._focusZone.current) {\n      // Focusing an element can trigger a reflow. Making this wait until there is an animation\n      // frame can improve perf significantly.\n      this._requestAnimationFrame(() => {\n        const selectedIndices = this.state.selectedIndices;\n        if (this._focusZone.current) {\n          if (selectedIndices && selectedIndices[0] && !this.props.options[selectedIndices[0]].disabled) {\n            const element: HTMLElement = getDocument()!.querySelector(`#${this._id}-list${selectedIndices[0]}`) as HTMLElement;\n            this._focusZone.current.focusElement(element);\n          } else {\n            this._focusZone.current.focus();\n          }\n        }\n      });\n    }\n\n    if (!this.state.calloutRenderEdge || this.state.calloutRenderEdge !== positions!.targetEdge) {\n      this.setState({\n        calloutRenderEdge: positions!.targetEdge\n      });\n    }\n  };\n\n  private _onItemClick = (item: IDropdownOption): ((event: React.MouseEvent<HTMLDivElement>) => void) => {\n    return (event: React.MouseEvent<HTMLDivElement>): void => {\n      if (!item.disabled) {\n        this.setSelectedIndex(event, item.index!);\n        if (!this.props.multiSelect) {\n          // only close the callout when it's in single-select mode\n          this.setState({\n            isOpen: false\n          });\n        }\n      }\n    };\n  };\n\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  private _onScroll = (): void => {\n    if (!this._isScrollIdle && this._scrollIdleTimeoutId !== undefined) {\n      clearTimeout(this._scrollIdleTimeoutId);\n      this._scrollIdleTimeoutId = undefined;\n    } else {\n      this._isScrollIdle = false;\n    }\n\n    this._scrollIdleTimeoutId = setTimeout(() => {\n      this._isScrollIdle = true;\n    }, this._scrollIdleDelay);\n  };\n\n  private _onItemMouseEnter(item: any, ev: React.MouseEvent<HTMLElement>): void {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    const targetElement = ev.currentTarget as HTMLElement;\n    targetElement.focus();\n  }\n\n  private _onItemMouseMove(item: any, ev: React.MouseEvent<HTMLElement>): void {\n    const targetElement = ev.currentTarget as HTMLElement;\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || document.activeElement === targetElement) {\n      return;\n    }\n\n    targetElement.focus();\n  }\n\n  private _onMouseItemLeave = (item: any, ev: React.MouseEvent<HTMLElement>): void => {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    /**\n     * IE11 focus() method forces parents to scroll to top of element.\n     * Edge and IE expose a setActive() function for focusable divs that\n     * sets the page focus but does not scroll the parent element.\n     */\n    if (this._host.current) {\n      if ((this._host.current as any).setActive) {\n        try {\n          (this._host.current as any).setActive();\n        } catch (e) {\n          /* no-op */\n        }\n      } else {\n        this._host.current.focus();\n      }\n    }\n  };\n\n  private _shouldIgnoreMouseEvent(): boolean {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  }\n\n  private _onDismiss = (): void => {\n    this.setState({ isOpen: false });\n\n    if (this._dropDown.current) {\n      this._dropDown.current.focus();\n    }\n  };\n\n  /** Get all selected indexes for multi-select mode */\n  private _getSelectedIndexes(options: IDropdownOption[], selectedKey: string | number | string[] | number[] | null | undefined): number[] {\n    if (selectedKey === undefined) {\n      if (this.props.multiSelect) {\n        return this._getAllSelectedIndices(options);\n      }\n      const selectedIndex = this._getSelectedIndex(options, null);\n      return selectedIndex !== -1 ? [selectedIndex] : [];\n    } else if (!Array.isArray(selectedKey)) {\n      const selectedIndex = this._getSelectedIndex(options, selectedKey);\n      return selectedIndex !== -1 ? [selectedIndex] : [];\n    }\n\n    const selectedIndices: number[] = [];\n    for (const key of selectedKey) {\n      const selectedIndex = this._getSelectedIndex(options, key);\n      selectedIndex !== -1 && selectedIndices.push(selectedIndex);\n    }\n    return selectedIndices;\n  }\n\n  private _getAllSelectedIndices(options: IDropdownOption[]): number[] {\n    return options.map((option: IDropdownOption, index: number) => (option.selected ? index : -1)).filter(index => index !== -1);\n  }\n\n  private _getSelectedIndex(options: IDropdownOption[], selectedKey: string | number | null): number {\n    return findIndex(options, option => {\n      // tslint:disable-next-line:triple-equals\n      if (selectedKey != null) {\n        return option.key === selectedKey;\n      } else {\n        return !!option.isSelected || !!option.selected;\n      }\n    });\n  }\n\n  private _onDropdownBlur = (ev: React.FocusEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not proceed with this logic.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    // hasFocus tracks whether the root element has focus so always update the state.\n    this.setState({ hasFocus: false });\n\n    if (this.state.isOpen) {\n      // Do not onBlur when the callout is opened\n      return;\n    }\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n  };\n\n  private _onDropdownKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not process any keyboard events.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _shouldHandleKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n      if (ev.defaultPrevented) {\n        return;\n      }\n    }\n\n    let newIndex: number | undefined;\n    const selectedIndex = this.state.selectedIndices.length ? this.state.selectedIndices[0] : -1;\n    const containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n    const isOpen = this.state.isOpen;\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        this.setState({\n          isOpen: !isOpen\n        });\n        break;\n\n      case KeyCodes.escape:\n        if (!isOpen) {\n          return;\n        }\n\n        this.setState({\n          isOpen: false\n        });\n        break;\n\n      case KeyCodes.up:\n        if (containsExpandCollapseModifier) {\n          if (isOpen) {\n            this.setState({ isOpen: false });\n            break;\n          }\n\n          return;\n        }\n        if (this.props.multiSelect) {\n          this.setState({ isOpen: true });\n        } else if (!this._isDisabled()) {\n          newIndex = this._moveIndex(ev, -1, selectedIndex - 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.down:\n        if (containsExpandCollapseModifier) {\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n        if ((containsExpandCollapseModifier && !isOpen) || this.props.multiSelect) {\n          this.setState({ isOpen: true });\n        } else if (!this._isDisabled()) {\n          newIndex = this._moveIndex(ev, 1, selectedIndex + 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.home:\n        if (!this.props.multiSelect) {\n          newIndex = this._moveIndex(ev, 1, 0, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.end:\n        if (!this.props.multiSelect) {\n          newIndex = this._moveIndex(ev, -1, this.props.options.length - 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.space:\n        // event handled in _onDropdownKeyUp\n        break;\n\n      default:\n        return;\n    }\n\n    if (newIndex !== selectedIndex) {\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  };\n\n  private _onDropdownKeyUp = (ev: React.KeyboardEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not process any keyboard events.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    const shouldHandleKey = this._shouldHandleKeyUp(ev);\n    const isOpen = this.state.isOpen;\n\n    if (this.props.onKeyUp) {\n      this.props.onKeyUp(ev);\n      if (ev.preventDefault) {\n        return;\n      }\n    }\n    switch (ev.which) {\n      case KeyCodes.space:\n        this.setState({\n          isOpen: !isOpen\n        });\n        break;\n\n      default:\n        if (shouldHandleKey && isOpen) {\n          this.setState({ isOpen: false });\n        }\n        return;\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n  private _isAltOrMeta(ev: React.KeyboardEvent<HTMLElement>): boolean {\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  }\n\n  /**\n   * We close the menu on key up only if ALL of the following are true:\n   * - Most recent key down was alt or meta (command)\n   * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n   *   expand/collapse the menu)\n   * - We're not on a Mac (or iOS)\n   *\n   * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n   * closing any open context menus. There is not a similar behavior on Macs.\n   */\n  private _shouldHandleKeyUp(ev: React.KeyboardEvent<HTMLElement>): boolean {\n    const keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);\n    this._lastKeyDownWasAltOrMeta = false;\n    return !!keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n  }\n\n  private _onZoneKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    let elementToFocus;\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _shouldHandleKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n    const containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n\n    switch (ev.which) {\n      case KeyCodes.up:\n        if (containsExpandCollapseModifier) {\n          this.setState({ isOpen: false });\n        } else {\n          if (this._host.current) {\n            elementToFocus = getLastFocusable(this._host.current, this._host.current.lastChild as HTMLElement, true);\n          }\n        }\n        break;\n\n      // All directional keystrokes should be canceled when the zone is rendered.\n      // This avoids the body scroll from reacting and thus dismissing the dropdown.\n      case KeyCodes.home:\n      case KeyCodes.end:\n      case KeyCodes.pageUp:\n      case KeyCodes.pageDown:\n        break;\n\n      case KeyCodes.down:\n        if (!containsExpandCollapseModifier && this._host.current) {\n          elementToFocus = getFirstFocusable(this._host.current, this._host.current.firstChild as HTMLElement, true);\n        }\n        break;\n\n      case KeyCodes.escape:\n        this.setState({ isOpen: false });\n        break;\n\n      case KeyCodes.tab:\n        this.setState({ isOpen: false });\n        return;\n\n      default:\n        return;\n    }\n\n    if (elementToFocus) {\n      elementToFocus.focus();\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onZoneKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const shouldHandleKey = this._shouldHandleKeyUp(ev);\n\n    if (shouldHandleKey && this.state.isOpen) {\n      this.setState({ isOpen: false });\n      ev.preventDefault();\n    }\n  };\n\n  private _onDropdownClick = (ev: React.MouseEvent<HTMLDivElement>): void => {\n    if (this.props.onClick) {\n      this.props.onClick(ev);\n      if (ev.preventDefault) {\n        return;\n      }\n    }\n\n    const { isOpen } = this.state;\n    const disabled = this._isDisabled();\n\n    if (!disabled) {\n      this.setState({\n        isOpen: !isOpen\n      });\n    }\n  };\n\n  private _onFocus = (ev: React.FocusEvent<HTMLDivElement>): void => {\n    const { isOpen, selectedIndices, hasFocus } = this.state;\n    const { multiSelect, openOnKeyboardFocus } = this.props;\n\n    const disabled = this._isDisabled();\n\n    if (!disabled) {\n      if (!isOpen && selectedIndices.length === 0 && !multiSelect) {\n        // Per aria\n        this._moveIndex(ev, 1, 0, -1);\n      }\n      if (this.props.onFocus) {\n        this.props.onFocus(ev);\n      }\n      const state: Pick<IDropdownState, 'hasFocus'> | Pick<IDropdownState, 'hasFocus' | 'isOpen'> = { hasFocus: true };\n      if (openOnKeyboardFocus && !hasFocus) {\n        (state as Pick<IDropdownState, 'hasFocus' | 'isOpen'>).isOpen = true;\n      }\n      this.setState(state);\n    }\n  };\n\n  /**\n   * Because the isDisabled prop is deprecated, we have had to repeat this logic all over the place.\n   * This helper method avoids all the repetition.\n   */\n  private _isDisabled: () => boolean | undefined = () => {\n    let { disabled } = this.props;\n    const { isDisabled } = this.props;\n\n    // Remove this deprecation workaround at 1.0.0\n    if (isDisabled !== undefined) {\n      disabled = isDisabled;\n    }\n\n    return disabled;\n  };\n\n  private _onRenderLabel = (props: IDropdownProps): JSX.Element | null => {\n    const id = this._id;\n    const { label, required, disabled } = props;\n\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    return label ? (\n      <Label\n        className={this._classNames.label}\n        id={id + '-label'}\n        htmlFor={id}\n        required={required}\n        styles={labelStyles}\n        disabled={disabled}\n      >\n        {label}\n      </Label>\n    ) : null;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}