{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar KeytipData_1 = require(\"../../KeytipData\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\n\nvar LinkBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(LinkBase, _super);\n\n  function LinkBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._link = React.createRef();\n\n    _this._onClick = function (ev) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          disabled = _a.disabled;\n\n      if (disabled) {\n        ev.preventDefault();\n      } else if (onClick) {\n        onClick(ev);\n      }\n    };\n\n    return _this;\n  }\n\n  LinkBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        children = _a.children,\n        className = _a.className,\n        href = _a.href,\n        theme = _a.theme,\n        styles = _a.styles,\n        keytipProps = _a.keytipProps;\n    var classNames = getClassNames(styles, {\n      className: className,\n      isButton: !href,\n      isDisabled: disabled,\n      theme: theme\n    });\n\n    var RootType = this._getRootType(this.props);\n\n    return React.createElement(KeytipData_1.KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: this.props['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(RootType, tslib_1.__assign({}, keytipAttributes, _this._adjustPropsForRootType(RootType, _this.props), {\n        className: classNames.root,\n        onClick: _this._onClick,\n        ref: _this._link,\n        \"aria-disabled\": disabled\n      }), children);\n    });\n  };\n\n  LinkBase.prototype.focus = function () {\n    var current = this._link.current;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  };\n\n  LinkBase.prototype._adjustPropsForRootType = function (RootType, props) {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    var children = props.children,\n        as = props.as,\n        disabled = props.disabled,\n        target = props.target,\n        href = props.href,\n        theme = props.theme,\n        getStyles = props.getStyles,\n        styles = props.styles,\n        componentRef = props.componentRef,\n        restProps = tslib_1.__rest(props, [\"children\", \"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\"]); // RootType will be a string if we're dealing with an html component\n\n\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return tslib_1.__assign({\n          target: target,\n          href: disabled ? undefined : href\n        }, restProps);\n      } // Add the type='button' prop for button elements\n\n\n      if (RootType === 'button') {\n        return tslib_1.__assign({\n          type: 'button',\n          disabled: disabled\n        }, restProps);\n      } // Remove the target and href props for all other non anchor elements\n\n\n      return tslib_1.__assign({}, restProps, {\n        disabled: disabled\n      });\n    } // Retain all props except 'as' for ReactComponents\n\n\n    return tslib_1.__assign({\n      target: target,\n      href: href,\n      disabled: disabled\n    }, restProps);\n  };\n\n  LinkBase.prototype._getRootType = function (props) {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  };\n\n  return LinkBase;\n}(Utilities_1.BaseComponent);\n\nexports.LinkBase = LinkBase;","map":{"version":3,"sources":["components/Link/Link.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { KeytipData } from '../../KeytipData';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\nexport class LinkBase extends BaseComponent<ILinkProps, any> implements ILink {\n  private _link = React.createRef<HTMLAnchorElement | HTMLButtonElement | null>();\n\n  public render(): JSX.Element {\n    const { disabled, children, className, href, theme, styles, keytipProps } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      className,\n      isButton: !href,\n      isDisabled: disabled,\n      theme: theme!\n    });\n\n    const RootType = this._getRootType(this.props);\n\n    return (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={(this.props as { 'aria-describedby': string })['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => (\n          <RootType\n            {...keytipAttributes}\n            {...this._adjustPropsForRootType(RootType, this.props)}\n            className={classNames.root}\n            onClick={this._onClick}\n            ref={this._link}\n            aria-disabled={disabled}\n          >\n            {children}\n          </RootType>\n        )}\n      </KeytipData>\n    );\n  }\n\n  public focus() {\n    const { current } = this._link;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { onClick, disabled } = this.props;\n\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  private _adjustPropsForRootType(\n    RootType: string | React.ComponentClass | React.StatelessComponent,\n    props: ILinkProps & { getStyles?: any }\n  ): Partial<ILinkProps> {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    const { children, as, disabled, target, href, theme, getStyles, styles, componentRef, ...restProps } = props;\n\n    // RootType will be a string if we're dealing with an html component\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return {\n          target,\n          href: disabled ? undefined : href,\n          ...restProps\n        };\n      }\n\n      // Add the type='button' prop for button elements\n      if (RootType === 'button') {\n        return {\n          type: 'button',\n          disabled,\n          ...restProps\n        };\n      }\n\n      // Remove the target and href props for all other non anchor elements\n      return { ...restProps, disabled };\n    }\n\n    // Retain all props except 'as' for ReactComponents\n    return { target, href, disabled, ...restProps };\n  }\n\n  private _getRootType(props: ILinkProps): string | React.ComponentClass | React.StatelessComponent {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}