{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar Styling_1 = require(\"../../Styling\");\n\nvar positioning_1 = require(\"../../utilities/positioning\");\n\nexports.getClassNames = Utilities_1.memoizeFunction(function (styles, disabled, isFocused, keyboardSpinDirection, labelPosition, className) {\n  if (labelPosition === void 0) {\n    labelPosition = positioning_1.Position.start;\n  }\n\n  if (className === void 0) {\n    className = undefined;\n  }\n\n  return {\n    root: Styling_1.mergeStyles(styles.root, className),\n    labelWrapper: Styling_1.mergeStyles(styles.labelWrapper, _getStyleForLabelBasedOnPosition(labelPosition, styles)),\n    icon: Styling_1.mergeStyles(styles.icon, disabled && styles.iconDisabled),\n    label: Styling_1.mergeStyles(styles.label),\n    spinButtonWrapper: Styling_1.mergeStyles(styles.spinButtonWrapper, _getStyleForRootBasedOnPosition(labelPosition, styles), !disabled && [{\n      selectors: {\n        ':hover': styles.spinButtonWrapperHovered\n      }\n    }, isFocused && {\n      // This is to increase the specificity of the focus styles\n      // and make it equal to that of the hover styles.\n      selectors: {\n        '&&': styles.spinButtonWrapperFocused\n      }\n    }], disabled && styles.spinButtonWrapperDisabled),\n    input: Styling_1.mergeStyles('ms-spinButton-input', styles.input, !disabled && {\n      selectors: {\n        '::selection': styles.inputTextSelected\n      }\n    }, disabled && styles.inputDisabled),\n    arrowBox: Styling_1.mergeStyles(styles.arrowButtonsContainer, disabled && styles.arrowButtonsContainerDisabled)\n  };\n});\n/**\n * Returns the Style corresponding to the label position\n */\n\nfunction _getStyleForLabelBasedOnPosition(labelPosition, styles) {\n  switch (labelPosition) {\n    case positioning_1.Position.start:\n      return styles.labelWrapperStart;\n\n    case positioning_1.Position.end:\n      return styles.labelWrapperEnd;\n\n    case positioning_1.Position.top:\n      return styles.labelWrapperTop;\n\n    case positioning_1.Position.bottom:\n      return styles.labelWrapperBottom;\n  }\n}\n/**\n * Returns the Style corresponding to the label position\n */\n\n\nfunction _getStyleForRootBasedOnPosition(labelPosition, styles) {\n  switch (labelPosition) {\n    case positioning_1.Position.top:\n    case positioning_1.Position.bottom:\n      return styles.spinButtonWrapperTopBottom;\n\n    default:\n      return {};\n  }\n}","map":{"version":3,"sources":["components/SpinButton/SpinButton.classNames.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAGA,IAAA,aAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAYa,OAAA,CAAA,aAAA,GAAgB,WAAA,CAAA,eAAA,CAC3B,UACE,MADF,EAEE,QAFF,EAGE,SAHF,EAIE,qBAJF,EAKE,aALF,EAME,SANF,EAM2C;AADzC,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAA0B,aAAA,CAAA,QAAA,CAAS,KAAnC;AAAwC;;AACxC,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,SAAA;AAAyC;;AAEzC,SAAO;AACL,IAAA,IAAI,EAAE,SAAA,CAAA,WAAA,CAAY,MAAM,CAAC,IAAnB,EAAyB,SAAzB,CADD;AAEL,IAAA,YAAY,EAAE,SAAA,CAAA,WAAA,CAAY,MAAM,CAAC,YAAnB,EAAiC,gCAAgC,CAAC,aAAD,EAAgB,MAAhB,CAAjE,CAFT;AAGL,IAAA,IAAI,EAAE,SAAA,CAAA,WAAA,CAAY,MAAM,CAAC,IAAnB,EAAyB,QAAQ,IAAI,MAAM,CAAC,YAA5C,CAHD;AAIL,IAAA,KAAK,EAAE,SAAA,CAAA,WAAA,CAAY,MAAM,CAAC,KAAnB,CAJF;AAKL,IAAA,iBAAiB,EAAE,SAAA,CAAA,WAAA,CACjB,MAAM,CAAC,iBADU,EAEjB,+BAA+B,CAAC,aAAD,EAAgB,MAAhB,CAFd,EAGjB,CAAC,QAAD,IAAa,CACX;AACE,MAAA,SAAS,EAAE;AACT,kBAAU,MAAM,CAAC;AADR;AADb,KADW,EAMX,SAAS,IAAI;AACX;AACA;AACA,MAAA,SAAS,EAAE;AACT,cAAM,MAAM,CAAC;AADJ;AAHA,KANF,CAHI,EAiBjB,QAAQ,IAAI,MAAM,CAAC,yBAjBF,CALd;AAwBL,IAAA,KAAK,EAAE,SAAA,CAAA,WAAA,CACL,qBADK,EAEL,MAAM,CAAC,KAFF,EAGL,CAAC,QAAD,IAAa;AACX,MAAA,SAAS,EAAE;AACT,uBAAe,MAAM,CAAC;AADb;AADA,KAHR,EAQL,QAAQ,IAAI,MAAM,CAAC,aARd,CAxBF;AAkCL,IAAA,QAAQ,EAAE,SAAA,CAAA,WAAA,CAAY,MAAM,CAAC,qBAAnB,EAA0C,QAAQ,IAAI,MAAM,CAAC,6BAA7D;AAlCL,GAAP;AAoCD,CA7C0B,CAAhB;AAgDb;;;;AAGA,SAAS,gCAAT,CAA0C,aAA1C,EAAmE,MAAnE,EAA4F;AAC1F,UAAQ,aAAR;AACE,SAAK,aAAA,CAAA,QAAA,CAAS,KAAd;AACE,aAAO,MAAM,CAAC,iBAAd;;AACF,SAAK,aAAA,CAAA,QAAA,CAAS,GAAd;AACE,aAAO,MAAM,CAAC,eAAd;;AACF,SAAK,aAAA,CAAA,QAAA,CAAS,GAAd;AACE,aAAO,MAAM,CAAC,eAAd;;AACF,SAAK,aAAA,CAAA,QAAA,CAAS,MAAd;AACE,aAAO,MAAM,CAAC,kBAAd;AARJ;AAUD;AAED;;;;;AAGA,SAAS,+BAAT,CAAyC,aAAzC,EAAkE,MAAlE,EAA2F;AACzF,UAAQ,aAAR;AACE,SAAK,aAAA,CAAA,QAAA,CAAS,GAAd;AACA,SAAK,aAAA,CAAA,QAAA,CAAS,MAAd;AACE,aAAO,MAAM,CAAC,0BAAd;;AACF;AACE,aAAO,EAAP;AALJ;AAOD","sourcesContent":["import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles, IStyle } from '../../Styling';\nimport { ISpinButtonStyles } from './SpinButton.types';\nimport { KeyboardSpinDirection } from './SpinButton';\nimport { Position } from '../../utilities/positioning';\n\nexport interface ISpinButtonClassNames {\n  root: string;\n  labelWrapper: string;\n  icon: string;\n  label: string;\n  spinButtonWrapper: string;\n  input: string;\n  arrowBox: string;\n}\n\nexport const getClassNames = memoizeFunction(\n  (\n    styles: ISpinButtonStyles,\n    disabled: boolean,\n    isFocused: boolean,\n    keyboardSpinDirection: KeyboardSpinDirection,\n    labelPosition: Position = Position.start,\n    className: string | undefined = undefined\n  ): ISpinButtonClassNames => {\n    return {\n      root: mergeStyles(styles.root, className),\n      labelWrapper: mergeStyles(styles.labelWrapper, _getStyleForLabelBasedOnPosition(labelPosition, styles)),\n      icon: mergeStyles(styles.icon, disabled && styles.iconDisabled),\n      label: mergeStyles(styles.label),\n      spinButtonWrapper: mergeStyles(\n        styles.spinButtonWrapper,\n        _getStyleForRootBasedOnPosition(labelPosition, styles),\n        !disabled && [\n          {\n            selectors: {\n              ':hover': styles.spinButtonWrapperHovered\n            }\n          },\n          isFocused && {\n            // This is to increase the specificity of the focus styles\n            // and make it equal to that of the hover styles.\n            selectors: {\n              '&&': styles.spinButtonWrapperFocused\n            }\n          }\n        ],\n        disabled && styles.spinButtonWrapperDisabled\n      ),\n      input: mergeStyles(\n        'ms-spinButton-input',\n        styles.input,\n        !disabled && {\n          selectors: {\n            '::selection': styles.inputTextSelected\n          }\n        },\n        disabled && styles.inputDisabled\n      ),\n      arrowBox: mergeStyles(styles.arrowButtonsContainer, disabled && styles.arrowButtonsContainerDisabled)\n    };\n  }\n);\n\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForLabelBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\n  switch (labelPosition) {\n    case Position.start:\n      return styles.labelWrapperStart;\n    case Position.end:\n      return styles.labelWrapperEnd;\n    case Position.top:\n      return styles.labelWrapperTop;\n    case Position.bottom:\n      return styles.labelWrapperBottom;\n  }\n}\n\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForRootBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\n  switch (labelPosition) {\n    case Position.top:\n    case Position.bottom:\n      return styles.spinButtonWrapperTopBottom;\n    default:\n      return {};\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}