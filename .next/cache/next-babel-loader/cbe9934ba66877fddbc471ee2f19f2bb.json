{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar cssColor_1 = require(\"./cssColor\");\n\nvar getColorFromRGBA_1 = require(\"./getColorFromRGBA\");\n/**\n * Converts a CSS color string to a color object.\n * Note that hex colors *must* be prefixed with # to be considered valid.\n *\n * `inputColor` will be used unmodified as the `str` property of the returned object.\n * Alpha defaults to 100 if not specified in `inputColor`.\n * Returns undefined if the color string is invalid/not recognized.\n */\n\n\nfunction getColorFromString(inputColor) {\n  var color = cssColor_1.cssColor(inputColor);\n\n  if (!color) {\n    return;\n  }\n\n  return tslib_1.__assign({}, getColorFromRGBA_1.getColorFromRGBA(color), {\n    str: inputColor\n  });\n}\n\nexports.getColorFromString = getColorFromString;","map":{"version":3,"sources":["utilities/color/getColorFromString.ts"],"names":[],"mappings":";;;;;;;;;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAEA;;;;;;;;;;AAQA,SAAgB,kBAAhB,CAAmC,UAAnC,EAAqD;AACnD,MAAM,KAAK,GAAG,UAAA,CAAA,QAAA,CAAS,UAAT,CAAd;;AAEA,MAAI,CAAC,KAAL,EAAY;AACV;AACD;;AAED,SAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACK,kBAAA,CAAA,gBAAA,CAAiB,KAAjB,CADL,EAC6B;AAC3B,IAAA,GAAG,EAAE;AADsB,GAD7B,CAAA;AAID;;AAXD,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["import { IColor } from './interfaces';\nimport { cssColor } from './cssColor';\nimport { getColorFromRGBA } from './getColorFromRGBA';\n\n/**\n * Converts a CSS color string to a color object.\n * Note that hex colors *must* be prefixed with # to be considered valid.\n *\n * `inputColor` will be used unmodified as the `str` property of the returned object.\n * Alpha defaults to 100 if not specified in `inputColor`.\n * Returns undefined if the color string is invalid/not recognized.\n */\nexport function getColorFromString(inputColor: string): IColor | undefined {\n  const color = cssColor(inputColor);\n\n  if (!color) {\n    return;\n  }\n\n  return {\n    ...getColorFromRGBA(color!),\n    str: inputColor\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}