{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar BaseDecorator_1 = require(\"./BaseDecorator\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar ResponsiveMode;\n\n(function (ResponsiveMode) {\n  ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n  ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n  ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n  ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n  ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n  ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n})(ResponsiveMode = exports.ResponsiveMode || (exports.ResponsiveMode = {}));\n\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\nvar _defaultMode;\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\n\n\nfunction setResponsiveMode(responsiveMode) {\n  _defaultMode = responsiveMode;\n}\n\nexports.setResponsiveMode = setResponsiveMode;\n\nfunction withResponsiveMode(ComposedComponent) {\n  var resultClass =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(WithResponsiveMode, _super);\n\n    function WithResponsiveMode(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n      _this.state = {\n        responsiveMode: _this._getResponsiveMode()\n      };\n      return _this;\n    }\n\n    WithResponsiveMode.prototype.componentDidMount = function () {\n      var _this = this;\n\n      this._events.on(window, 'resize', function () {\n        var responsiveMode = _this._getResponsiveMode();\n\n        if (responsiveMode !== _this.state.responsiveMode) {\n          _this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      });\n    };\n\n    WithResponsiveMode.prototype.componentWillUnmount = function () {\n      this._events.dispose();\n    };\n\n    WithResponsiveMode.prototype.render = function () {\n      var responsiveMode = this.state.responsiveMode;\n      return React.createElement(ComposedComponent, tslib_1.__assign({\n        ref: this._updateComposedComponentRef,\n        responsiveMode: responsiveMode\n      }, this.props));\n    };\n\n    WithResponsiveMode.prototype._getResponsiveMode = function () {\n      var responsiveMode = ResponsiveMode.small;\n      var win = Utilities_1.getWindow();\n\n      if (typeof win !== 'undefined') {\n        try {\n          while (win.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n            responsiveMode++;\n          }\n        } catch (e) {\n          // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n          responsiveMode = ResponsiveMode.large;\n        }\n      } else {\n        if (_defaultMode !== undefined) {\n          responsiveMode = _defaultMode;\n        } else {\n          throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' + 'Call setResponsiveMode to define what the responsive mode is.');\n        }\n      }\n\n      return responsiveMode;\n    };\n\n    return WithResponsiveMode;\n  }(BaseDecorator_1.BaseDecorator);\n\n  return Utilities_1.hoistStatics(ComposedComponent, resultClass);\n}\n\nexports.withResponsiveMode = withResponsiveMode;","map":{"version":3,"sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics } from '../../Utilities';\n\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  small = 0,\n  medium = 1,\n  large = 2,\n  xLarge = 3,\n  xxLarge = 4,\n  xxxLarge = 5\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>\n): any {\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    constructor(props: TProps) {\n      super(props);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: this._getResponsiveMode()\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(window, 'resize', () => {\n        const responsiveMode = this._getResponsiveMode();\n\n        if (responsiveMode !== this.state.responsiveMode) {\n          this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      });\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element {\n      const { responsiveMode } = this.state;\n\n      return <ComposedComponent ref={this._updateComposedComponentRef} responsiveMode={responsiveMode} {...this.props as any} />;\n    }\n\n    private _getResponsiveMode(): ResponsiveMode {\n      let responsiveMode = ResponsiveMode.small;\n      const win = getWindow();\n\n      if (typeof win !== 'undefined') {\n        try {\n          while (win.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n            responsiveMode++;\n          }\n        } catch (e) {\n          // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n          responsiveMode = ResponsiveMode.large;\n        }\n      } else {\n        if (_defaultMode !== undefined) {\n          responsiveMode = _defaultMode;\n        } else {\n          throw new Error(\n            'Content was rendered in a server environment without providing a default responsive mode. ' +\n              'Call setResponsiveMode to define what the responsive mode is.'\n          );\n        }\n      }\n\n      return responsiveMode;\n    }\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}