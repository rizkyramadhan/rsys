{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../../Utilities\");\n\nvar Button_1 = require(\"../../../Button\");\n\nvar Spinner_1 = require(\"../../../Spinner\");\n\nvar Suggestions_types_1 = require(\"./Suggestions.types\");\n\nvar SuggestionsItem_1 = require(\"./SuggestionsItem\");\n\nvar SuggestionsItem_styles_1 = require(\"./SuggestionsItem.styles\");\n\nvar stylesImport = require(\"./Suggestions.scss\");\n\nvar legacyStyles = stylesImport;\nvar getClassNames = Utilities_1.classNamesFunction();\nvar StyledSuggestionsItem = Utilities_1.styled(SuggestionsItem_1.SuggestionsItem, SuggestionsItem_styles_1.getStyles, undefined, {\n  scope: 'SuggestionItem'\n});\n/**\n * {@docCategory Pickers}\n */\n\nvar Suggestions =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Suggestions, _super);\n\n  function Suggestions(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n\n    _this._forceResolveButton = React.createRef();\n    _this._searchForMoreButton = React.createRef();\n    _this._selectedElement = React.createRef();\n    /**\n     * Returns true if the event was handled, false otherwise\n     */\n\n    _this.tryHandleKeyDown = function (keyCode, currentSuggestionIndex) {\n      var isEventHandled = false;\n      var newSelectedActionType = null;\n      var currentSelectedAction = _this.state.selectedActionType;\n      var suggestionLength = _this.props.suggestions.length;\n\n      if (keyCode === Utilities_1.KeyCodes.down) {\n        switch (currentSelectedAction) {\n          case Suggestions_types_1.SuggestionActionType.forceResolve:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.none;\n            } else if (_this._searchForMoreButton.current) {\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.searchMore;\n            } else {\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.forceResolve;\n            }\n\n            break;\n\n          case Suggestions_types_1.SuggestionActionType.searchMore:\n            if (_this._forceResolveButton.current) {\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.forceResolve;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.none;\n            } else {\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.searchMore;\n            }\n\n            break;\n\n          case Suggestions_types_1.SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._forceResolveButton.current) {\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.forceResolve;\n            }\n\n            break;\n        }\n      } else if (keyCode === Utilities_1.KeyCodes.up) {\n        switch (currentSelectedAction) {\n          case Suggestions_types_1.SuggestionActionType.forceResolve:\n            if (_this._searchForMoreButton.current) {\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.searchMore;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.none;\n            }\n\n            break;\n\n          case Suggestions_types_1.SuggestionActionType.searchMore:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.none;\n            } else if (_this._forceResolveButton.current) {\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.forceResolve;\n            }\n\n            break;\n\n          case Suggestions_types_1.SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._searchForMoreButton.current) {\n              newSelectedActionType = Suggestions_types_1.SuggestionActionType.searchMore;\n            }\n\n            break;\n        }\n      }\n\n      if (newSelectedActionType !== null) {\n        _this.setState({\n          selectedActionType: newSelectedActionType\n        });\n\n        isEventHandled = true;\n      }\n\n      return isEventHandled;\n    };\n\n    _this._getMoreResults = function () {\n      if (_this.props.onGetMoreResults) {\n        _this.props.onGetMoreResults();\n      }\n    };\n\n    _this._forceResolve = function () {\n      if (_this.props.createGenericItem) {\n        _this.props.createGenericItem();\n      }\n    };\n\n    _this._shouldShowForceResolve = function () {\n      return _this.props.showForceResolve ? _this.props.showForceResolve() : false;\n    };\n\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n\n    _this._refocusOnSuggestions = function (keyCode) {\n      if (typeof _this.props.refocusSuggestions === 'function') {\n        _this.props.refocusSuggestions(keyCode);\n      }\n    };\n\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n\n    _this.state = {\n      selectedActionType: Suggestions_types_1.SuggestionActionType.none\n    };\n    return _this;\n  }\n\n  Suggestions.prototype.componentDidMount = function () {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  };\n\n  Suggestions.prototype.componentDidUpdate = function () {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  };\n\n  Suggestions.prototype.render = function () {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c = this.props,\n        forceResolveText = _c.forceResolveText,\n        mostRecentlyUsedHeaderText = _c.mostRecentlyUsedHeaderText,\n        searchForMoreText = _c.searchForMoreText,\n        className = _c.className,\n        moreSuggestionsAvailable = _c.moreSuggestionsAvailable,\n        noResultsFoundText = _c.noResultsFoundText,\n        suggestions = _c.suggestions,\n        isLoading = _c.isLoading,\n        isSearching = _c.isSearching,\n        loadingText = _c.loadingText,\n        onRenderNoResultFound = _c.onRenderNoResultFound,\n        searchingText = _c.searchingText,\n        isMostRecentlyUsedVisible = _c.isMostRecentlyUsedVisible,\n        resultsMaximumNumber = _c.resultsMaximumNumber,\n        resultsFooterFull = _c.resultsFooterFull,\n        resultsFooter = _c.resultsFooter,\n        _d = _c.isResultsFooterVisible,\n        isResultsFooterVisible = _d === void 0 ? true : _d,\n        suggestionsAvailableAlertText = _c.suggestionsAvailableAlertText,\n        suggestionsHeaderText = _c.suggestionsHeaderText,\n        suggestionsClassName = _c.suggestionsClassName,\n        theme = _c.theme,\n        styles = _c.styles; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    this._classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggestionsClassName: suggestionsClassName,\n      forceResolveButtonSelected: this.state.selectedActionType === Suggestions_types_1.SuggestionActionType.forceResolve,\n      searchForMoreButtonSelected: this.state.selectedActionType === Suggestions_types_1.SuggestionActionType.searchMore\n    }) : {\n      root: Utilities_1.css('ms-Suggestions', className, legacyStyles.root),\n      title: Utilities_1.css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n      searchForMoreButton: Utilities_1.css('ms-SearchMore-button', legacyStyles.actionButton, (_a = {}, _a['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === Suggestions_types_1.SuggestionActionType.searchMore, _a)),\n      forceResolveButton: Utilities_1.css('ms-forceResolve-button', legacyStyles.actionButton, (_b = {}, _b['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === Suggestions_types_1.SuggestionActionType.forceResolve, _b)),\n      suggestionsAvailable: Utilities_1.css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n      suggestionsContainer: Utilities_1.css('ms-Suggestions-container', legacyStyles.suggestionsContainer, suggestionsClassName),\n      noSuggestions: Utilities_1.css('ms-Suggestions-none', legacyStyles.suggestionsNone)\n    };\n    var spinnerStyles = this._classNames.subComponentStyles ? this._classNames.subComponentStyles.spinner : undefined; // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n\n    var spinnerClassNameOrStyles = styles ? {\n      styles: spinnerStyles\n    } : {\n      className: Utilities_1.css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner)\n    };\n\n    var noResults = function () {\n      return noResultsFoundText ? React.createElement(\"div\", {\n        role: \"alert\",\n        className: _this._classNames.noSuggestions\n      }, noResultsFoundText) : null;\n    }; // MostRecently Used text should supercede the header text if it's there and available.\n\n\n    var headerText = suggestionsHeaderText;\n\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    var footerTitle = undefined;\n\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= resultsMaximumNumber ? resultsFooterFull : resultsFooter;\n    }\n\n    var hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    return React.createElement(\"div\", {\n      className: this._classNames.root\n    }, headerText ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, headerText) : null, forceResolveText && this._shouldShowForceResolve() && React.createElement(Button_1.CommandButton, {\n      componentRef: this._forceResolveButton,\n      className: this._classNames.forceResolveButton,\n      onClick: this._forceResolve\n    }, forceResolveText), isLoading && React.createElement(Spinner_1.Spinner, tslib_1.__assign({}, spinnerClassNameOrStyles, {\n      label: loadingText\n    })), hasNoSuggestions ? onRenderNoResultFound ? onRenderNoResultFound(undefined, noResults) : noResults() : this._renderSuggestions(), searchForMoreText && moreSuggestionsAvailable && React.createElement(Button_1.CommandButton, {\n      componentRef: this._searchForMoreButton,\n      className: this._classNames.searchForMoreButton,\n      iconProps: {\n        iconName: 'Search'\n      },\n      onClick: this._getMoreResults\n    }, searchForMoreText), isSearching ? React.createElement(Spinner_1.Spinner, tslib_1.__assign({}, spinnerClassNameOrStyles, {\n      label: searchingText\n    })) : null, footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, footerTitle(this.props)) : null, React.createElement(\"span\", {\n      role: \"alert\",\n      \"aria-live\": \"polite\",\n      className: this._classNames.suggestionsAvailable\n    }, !isLoading && !isSearching && suggestions && suggestions.length > 0 && suggestionsAvailableAlertText ? suggestionsAvailableAlertText : null));\n  };\n\n  Suggestions.prototype.hasSuggestedAction = function () {\n    return this._searchForMoreButton.current !== undefined || this._forceResolveButton.current !== undefined;\n  };\n\n  Suggestions.prototype.hasSuggestedActionSelected = function () {\n    return this.state.selectedActionType !== Suggestions_types_1.SuggestionActionType.none;\n  };\n\n  Suggestions.prototype.executeSelectedAction = function () {\n    switch (this.state.selectedActionType) {\n      case Suggestions_types_1.SuggestionActionType.forceResolve:\n        this._forceResolve();\n\n        break;\n\n      case Suggestions_types_1.SuggestionActionType.searchMore:\n        this._getMoreResults();\n\n        break;\n    }\n  };\n\n  Suggestions.prototype.focusAboveSuggestions = function () {\n    if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: Suggestions_types_1.SuggestionActionType.forceResolve\n      });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: Suggestions_types_1.SuggestionActionType.searchMore\n      });\n    }\n  };\n\n  Suggestions.prototype.focusBelowSuggestions = function () {\n    if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: Suggestions_types_1.SuggestionActionType.searchMore\n      });\n    } else if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: Suggestions_types_1.SuggestionActionType.forceResolve\n      });\n    }\n  };\n\n  Suggestions.prototype.focusSearchForMoreButton = function () {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  }; // TODO get the element to scroll into view properly regardless of direction.\n\n\n  Suggestions.prototype.scrollSelected = function () {\n    if (this._selectedElement.current && this._selectedElement.current.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  };\n\n  Suggestions.prototype._renderSuggestions = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onRenderSuggestion = _a.onRenderSuggestion,\n        removeSuggestionAriaLabel = _a.removeSuggestionAriaLabel,\n        suggestionsItemClassName = _a.suggestionsItemClassName,\n        resultsMaximumNumber = _a.resultsMaximumNumber,\n        showRemoveButtons = _a.showRemoveButtons,\n        suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel,\n        suggestionsListId = _a.suggestionsListId;\n    var suggestions = this.props.suggestions;\n    var StyledTypedSuggestionsItem = StyledSuggestionsItem;\n    var selectedIndex = -1;\n    suggestions.some(function (element, index) {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions = selectedIndex >= resultsMaximumNumber ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1) : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.suggestionsContainer,\n      id: suggestionsListId,\n      role: \"listbox\",\n      \"aria-label\": suggestionsContainerAriaLabel\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected ? _this._selectedElement : undefined,\n        // tslint:disable-next-line:no-string-literal\n        key: suggestion.item['key'] ? suggestion.item['key'] : index,\n        id: 'sug-' + index,\n        \"aria-selected\": suggestion.selected,\n        role: \"option\",\n        \"aria-label\": suggestion.ariaLabel\n      }, React.createElement(StyledTypedSuggestionsItem, {\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        removeButtonAriaLabel: removeSuggestionAriaLabel,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index)\n      }));\n    }));\n  };\n\n  return Suggestions;\n}(Utilities_1.BaseComponent);\n\nexports.Suggestions = Suggestions;","map":{"version":3,"sources":["components/pickers/Suggestions/Suggestions.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { BaseComponent, KeyCodes, classNamesFunction, IStyleFunctionOrObject, css, styled } from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { CommandButton, IButton } from '../../../Button';\nimport { Spinner, ISpinnerStyleProps, ISpinnerStyles } from '../../../Spinner';\nimport { ISuggestionsProps, SuggestionActionType, ISuggestionsStyleProps, ISuggestionsStyles } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nimport * as stylesImport from './Suggestions.scss';\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsStyleProps, ISuggestionsStyles>();\n\nexport interface ISuggestionsState {\n  selectedActionType: SuggestionActionType;\n}\n\nconst StyledSuggestionsItem = styled<ISuggestionItemProps<any>, ISuggestionsItemStyleProps, ISuggestionsItemStyles>(\n  SuggestionsItem,\n  suggestionsItemStyles,\n  undefined,\n  { scope: 'SuggestionItem' }\n);\n\n/**\n * {@docCategory Pickers}\n */\nexport class Suggestions<T> extends BaseComponent<ISuggestionsProps<T>, ISuggestionsState> {\n  protected _forceResolveButton = React.createRef<IButton>();\n  protected _searchForMoreButton = React.createRef<IButton>();\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  private activeSelectedElement: HTMLDivElement | null;\n  private _classNames: Partial<IProcessedStyleSet<ISuggestionsStyles>>;\n\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\n    super(suggestionsProps);\n    this.state = {\n      selectedActionType: SuggestionActionType.none\n    };\n  }\n\n  public componentDidMount(): void {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  }\n\n  public componentDidUpdate(): void {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      forceResolveText,\n      mostRecentlyUsedHeaderText,\n      searchForMoreText,\n      className,\n      moreSuggestionsAvailable,\n      noResultsFoundText,\n      suggestions,\n      isLoading,\n      isSearching,\n      loadingText,\n      onRenderNoResultFound,\n      searchingText,\n      isMostRecentlyUsedVisible,\n      resultsMaximumNumber,\n      resultsFooterFull,\n      resultsFooter,\n      isResultsFooterVisible = true,\n      suggestionsAvailableAlertText,\n      suggestionsHeaderText,\n      suggestionsClassName,\n      theme,\n      styles\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    this._classNames = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggestionsClassName,\n          forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n          searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore\n        })\n      : {\n          root: css('ms-Suggestions', className, legacyStyles.root),\n          title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n          searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]: this.state.selectedActionType === SuggestionActionType.searchMore\n          }),\n          forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]: this.state.selectedActionType === SuggestionActionType.forceResolve\n          }),\n          suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n          suggestionsContainer: css('ms-Suggestions-container', legacyStyles.suggestionsContainer, suggestionsClassName),\n          noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone)\n        };\n\n    const spinnerStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.spinner as IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>)\n      : undefined;\n\n    // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n    const spinnerClassNameOrStyles = styles\n      ? { styles: spinnerStyles }\n      : { className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner) };\n\n    const noResults = () => {\n      return noResultsFoundText ? (\n        <div role=\"alert\" className={this._classNames.noSuggestions}>\n          {noResultsFoundText}\n        </div>\n      ) : null;\n    };\n\n    // MostRecently Used text should supercede the header text if it's there and available.\n    let headerText: string | undefined = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    let footerTitle: ((props: ISuggestionsProps<T>) => JSX.Element) | undefined = undefined;\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= (resultsMaximumNumber as number) ? resultsFooterFull : resultsFooter;\n    }\n\n    const hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n\n    return (\n      <div className={this._classNames.root}>\n        {headerText ? <div className={this._classNames.title}>{headerText}</div> : null}\n        {forceResolveText && this._shouldShowForceResolve() && (\n          <CommandButton\n            componentRef={this._forceResolveButton}\n            className={this._classNames.forceResolveButton}\n            onClick={this._forceResolve}\n          >\n            {forceResolveText}\n          </CommandButton>\n        )}\n        {isLoading && <Spinner {...spinnerClassNameOrStyles} label={loadingText} />}\n        {hasNoSuggestions ? (onRenderNoResultFound ? onRenderNoResultFound(undefined, noResults) : noResults()) : this._renderSuggestions()}\n        {searchForMoreText && moreSuggestionsAvailable && (\n          <CommandButton\n            componentRef={this._searchForMoreButton}\n            className={this._classNames.searchForMoreButton}\n            iconProps={{ iconName: 'Search' }}\n            onClick={this._getMoreResults}\n          >\n            {searchForMoreText}\n          </CommandButton>\n        )}\n        {isSearching ? <Spinner {...spinnerClassNameOrStyles} label={searchingText} /> : null}\n        {footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? (\n          <div className={this._classNames.title}>{footerTitle(this.props)}</div>\n        ) : null}\n        {\n          <span role=\"alert\" aria-live=\"polite\" className={this._classNames.suggestionsAvailable}>\n            {!isLoading && !isSearching && suggestions && suggestions.length > 0 && suggestionsAvailableAlertText\n              ? suggestionsAvailableAlertText\n              : null}\n          </span>\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Returns true if the event was handled, false otherwise\n   */\n  public tryHandleKeyDown = (keyCode: number, currentSuggestionIndex: number): boolean => {\n    let isEventHandled = false;\n    let newSelectedActionType = null;\n    const currentSelectedAction = this.state.selectedActionType;\n    const suggestionLength = this.props.suggestions.length;\n    if (keyCode === KeyCodes.down) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n      }\n    } else if (keyCode === KeyCodes.up) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n      }\n    }\n\n    if (newSelectedActionType !== null) {\n      this.setState({ selectedActionType: newSelectedActionType });\n      isEventHandled = true;\n    }\n\n    return isEventHandled;\n  };\n\n  public hasSuggestedAction(): boolean {\n    return this._searchForMoreButton.current !== undefined || this._forceResolveButton.current !== undefined;\n  }\n\n  public hasSuggestedActionSelected(): boolean {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  }\n\n  public executeSelectedAction(): void {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n        break;\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n        break;\n    }\n  }\n\n  public focusAboveSuggestions(): void {\n    if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    }\n  }\n\n  public focusBelowSuggestions(): void {\n    if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    } else if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    }\n  }\n\n  public focusSearchForMoreButton(): void {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  }\n\n  // TODO get the element to scroll into view properly regardless of direction.\n  public scrollSelected(): void {\n    if (this._selectedElement.current && this._selectedElement.current.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  }\n\n  private _renderSuggestions(): JSX.Element | null {\n    const {\n      onRenderSuggestion,\n      removeSuggestionAriaLabel,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      suggestionsContainerAriaLabel,\n      suggestionsListId\n    } = this.props;\n\n    let { suggestions } = this.props;\n\n    const StyledTypedSuggestionsItem: React.StatelessComponent<ISuggestionItemProps<T>> = StyledSuggestionsItem;\n\n    let selectedIndex = -1;\n    suggestions.some((element, index) => {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions =\n        selectedIndex >= resultsMaximumNumber\n          ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1)\n          : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.suggestionsContainer}\n        id={suggestionsListId}\n        role=\"listbox\"\n        aria-label={suggestionsContainerAriaLabel}\n      >\n        {suggestions.map((suggestion, index) => (\n          <div\n            ref={suggestion.selected ? this._selectedElement : undefined}\n            // tslint:disable-next-line:no-string-literal\n            key={(suggestion.item as any)['key'] ? (suggestion.item as any)['key'] : index}\n            id={'sug-' + index}\n            aria-selected={suggestion.selected}\n            role=\"option\"\n            aria-label={suggestion.ariaLabel}\n          >\n            <StyledTypedSuggestionsItem\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              removeButtonAriaLabel={removeSuggestionAriaLabel}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  private _getMoreResults = (): void => {\n    if (this.props.onGetMoreResults) {\n      this.props.onGetMoreResults();\n    }\n  };\n\n  private _forceResolve = (): void => {\n    if (this.props.createGenericItem) {\n      this.props.createGenericItem();\n    }\n  };\n\n  private _shouldShowForceResolve = (): boolean => {\n    return this.props.showForceResolve ? this.props.showForceResolve() : false;\n  };\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _refocusOnSuggestions = (keyCode: number): void => {\n    if (typeof this.props.refocusSuggestions === 'function') {\n      this.props.refocusSuggestions(keyCode);\n    }\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}