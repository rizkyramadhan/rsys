{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar consts_1 = require(\"./consts\");\n\nvar hsv2rgb_1 = require(\"./hsv2rgb\");\n\nvar hsv2hex_1 = require(\"./hsv2hex\");\n\nvar _rgbaOrHexString_1 = require(\"./_rgbaOrHexString\");\n/**\n * Converts an HSV color (and optional alpha value) to a color object.\n * If `a` is not given, a default of 100 is used.\n * Hex in the returned value will *not* be prefixed with #.\n * If `a` is unspecified or 100, the result's `str` property will contain a hex value\n * (*not* prefixed with #)\n */\n\n\nfunction getColorFromHSV(hsv, a) {\n  var h = hsv.h,\n      s = hsv.s,\n      v = hsv.v;\n  a = typeof a === 'number' ? a : consts_1.MAX_COLOR_ALPHA;\n\n  var _a = hsv2rgb_1.hsv2rgb(h, s, v),\n      r = _a.r,\n      g = _a.g,\n      b = _a.b;\n\n  var hex = hsv2hex_1.hsv2hex(h, s, v);\n\n  var str = _rgbaOrHexString_1._rgbaOrHexString(r, g, b, a, hex);\n\n  return {\n    a: a,\n    b: b,\n    g: g,\n    h: h,\n    hex: hex,\n    r: r,\n    s: s,\n    str: str,\n    v: v\n  };\n}\n\nexports.getColorFromHSV = getColorFromHSV;","map":{"version":3,"sources":["utilities/color/getColorFromHSV.ts"],"names":[],"mappings":";;;;;;;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAEA;;;;;;;;;AAOA,SAAgB,eAAhB,CAAgC,GAAhC,EAA2C,CAA3C,EAAqD;AAC3C,MAAA,CAAA,GAAA,GAAA,CAAA,CAAA;AAAA,MAAG,CAAA,GAAA,GAAA,CAAA,CAAH;AAAA,MAAM,CAAA,GAAA,GAAA,CAAA,CAAN;AACR,EAAA,CAAC,GAAG,OAAO,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,QAAA,CAAA,eAAhC;;AAEM,MAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAAA,MAAE,CAAA,GAAA,EAAA,CAAA,CAAF;AAAA,MAAK,CAAA,GAAA,EAAA,CAAA,CAAL;AAAA,MAAQ,CAAA,GAAA,EAAA,CAAA,CAAR;;AACN,MAAM,GAAG,GAAG,SAAA,CAAA,OAAA,CAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAZ;;AACA,MAAM,GAAG,GAAG,kBAAA,CAAA,gBAAA,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,GAA7B,CAAZ;;AAEA,SAAO;AAAE,IAAA,CAAC,EAAA,CAAH;AAAK,IAAA,CAAC,EAAA,CAAN;AAAQ,IAAA,CAAC,EAAA,CAAT;AAAW,IAAA,CAAC,EAAA,CAAZ;AAAc,IAAA,GAAG,EAAA,GAAjB;AAAmB,IAAA,CAAC,EAAA,CAApB;AAAsB,IAAA,CAAC,EAAA,CAAvB;AAAyB,IAAA,GAAG,EAAA,GAA5B;AAA8B,IAAA,CAAC,EAAA;AAA/B,GAAP;AACD;;AATD,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import { IHSV, IColor } from './interfaces';\nimport { MAX_COLOR_ALPHA } from './consts';\nimport { hsv2rgb } from './hsv2rgb';\nimport { hsv2hex } from './hsv2hex';\nimport { _rgbaOrHexString } from './_rgbaOrHexString';\n\n/**\n * Converts an HSV color (and optional alpha value) to a color object.\n * If `a` is not given, a default of 100 is used.\n * Hex in the returned value will *not* be prefixed with #.\n * If `a` is unspecified or 100, the result's `str` property will contain a hex value\n * (*not* prefixed with #)\n */\nexport function getColorFromHSV(hsv: IHSV, a?: number): IColor {\n  const { h, s, v } = hsv;\n  a = typeof a === 'number' ? a : MAX_COLOR_ALPHA;\n\n  const { r, g, b } = hsv2rgb(h, s, v);\n  const hex = hsv2hex(h, s, v);\n  const str = _rgbaOrHexString(r, g, b, a, hex);\n\n  return { a, b, g, h, hex, r, s, str, v };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}