{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar KeytipManager_1 = require(\"../../utilities/keytips/KeytipManager\");\n\nvar KeytipUtils_1 = require(\"../../utilities/keytips/KeytipUtils\");\n/**\n * A small element to help the target component correctly read out its aria-describedby for its Keytip\n * {@docCategory Keytips}\n */\n\n\nvar KeytipData =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(KeytipData, _super);\n\n  function KeytipData() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._keytipManager = KeytipManager_1.KeytipManager.getInstance();\n    return _this;\n  }\n\n  KeytipData.prototype.componentDidMount = function () {\n    // Register Keytip in KeytipManager\n    if (this.props.keytipProps) {\n      this._uniqueId = this._keytipManager.register(this._getKtpProps());\n    }\n  };\n\n  KeytipData.prototype.componentWillUnmount = function () {\n    // Unregister Keytip in KeytipManager\n    this.props.keytipProps && this._keytipManager.unregister(this._getKtpProps(), this._uniqueId);\n  };\n\n  KeytipData.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.keytipProps !== this.props.keytipProps || prevProps.disabled !== this.props.disabled) {\n      // If keytipProps or disabled has changed update Keytip in KeytipManager\n      this.props.keytipProps && this._keytipManager.update(this._getKtpProps(), this._uniqueId);\n    }\n  };\n\n  KeytipData.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        keytipProps = _a.keytipProps,\n        ariaDescribedBy = _a.ariaDescribedBy;\n    var nativeKeytipProps = {};\n\n    if (keytipProps) {\n      nativeKeytipProps = this._getKtpAttrs(keytipProps, ariaDescribedBy);\n    }\n\n    return children(nativeKeytipProps);\n  };\n\n  KeytipData.prototype._getKtpProps = function () {\n    return tslib_1.__assign({\n      disabled: this.props.disabled\n    }, this.props.keytipProps);\n  };\n  /**\n   * Gets the aria- and data- attributes to attach to the component\n   * @param keytipProps - props for Keytip\n   * @param describedByPrepend - ariaDescribedBy value to prepend\n   */\n\n\n  KeytipData.prototype._getKtpAttrs = function (keytipProps, describedByPrepend) {\n    if (keytipProps) {\n      // Add the parent overflow sequence if necessary\n      var newKeytipProps = this._keytipManager.addParentOverflow(keytipProps); // Construct aria-describedby and data-ktp-id attributes and return\n\n\n      var ariaDescribedBy = KeytipUtils_1.getAriaDescribedBy(newKeytipProps.keySequences);\n      var keySequences = newKeytipProps.keySequences.slice();\n\n      if (newKeytipProps.overflowSetSequence) {\n        keySequences = KeytipUtils_1.mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n      }\n\n      var ktpId = KeytipUtils_1.sequencesToID(keySequences);\n      return {\n        'aria-describedby': Utilities_1.mergeAriaAttributeValues(describedByPrepend, ariaDescribedBy),\n        'data-ktp-target': ktpId,\n        'data-ktp-execute-target': ktpId\n      };\n    }\n\n    return undefined;\n  };\n\n  return KeytipData;\n}(React.Component);\n\nexports.KeytipData = KeytipData;","map":{"version":3,"sources":["components/KeytipData/KeytipData.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IRenderComponent, mergeAriaAttributeValues } from '../../Utilities';\nimport { IKeytipDataProps } from './KeytipData.types';\nimport { IKeytipProps } from '../../Keytip';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/KeytipUtils';\n\n/**\n * A small element to help the target component correctly read out its aria-describedby for its Keytip\n * {@docCategory Keytips}\n */\nexport class KeytipData extends React.Component<IKeytipDataProps & IRenderComponent<{}>, {}> {\n  private _uniqueId: string;\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\n\n  public componentDidMount() {\n    // Register Keytip in KeytipManager\n    if (this.props.keytipProps) {\n      this._uniqueId = this._keytipManager.register(this._getKtpProps());\n    }\n  }\n\n  public componentWillUnmount() {\n    // Unregister Keytip in KeytipManager\n    this.props.keytipProps && this._keytipManager.unregister(this._getKtpProps(), this._uniqueId);\n  }\n\n  public componentDidUpdate(prevProps: IKeytipDataProps & IRenderComponent<{}>) {\n    if (prevProps.keytipProps !== this.props.keytipProps || prevProps.disabled !== this.props.disabled) {\n      // If keytipProps or disabled has changed update Keytip in KeytipManager\n      this.props.keytipProps && this._keytipManager.update(this._getKtpProps(), this._uniqueId);\n    }\n  }\n\n  public render(): JSX.Element {\n    const { children, keytipProps, ariaDescribedBy } = this.props;\n    let nativeKeytipProps: any = {};\n    if (keytipProps) {\n      nativeKeytipProps = this._getKtpAttrs(keytipProps, ariaDescribedBy);\n    }\n    return children(nativeKeytipProps);\n  }\n\n  private _getKtpProps(): IKeytipProps {\n    return {\n      disabled: this.props.disabled,\n      ...this.props.keytipProps!\n    };\n  }\n\n  /**\n   * Gets the aria- and data- attributes to attach to the component\n   * @param keytipProps - props for Keytip\n   * @param describedByPrepend - ariaDescribedBy value to prepend\n   */\n  private _getKtpAttrs(keytipProps: IKeytipProps, describedByPrepend?: string): any {\n    if (keytipProps) {\n      // Add the parent overflow sequence if necessary\n      const newKeytipProps = this._keytipManager.addParentOverflow(keytipProps);\n\n      // Construct aria-describedby and data-ktp-id attributes and return\n      const ariaDescribedBy = getAriaDescribedBy(newKeytipProps.keySequences);\n      let keySequences = [...newKeytipProps.keySequences];\n      if (newKeytipProps.overflowSetSequence) {\n        keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n      }\n      const ktpId = sequencesToID(keySequences);\n\n      return {\n        'aria-describedby': mergeAriaAttributeValues(describedByPrepend, ariaDescribedBy),\n        'data-ktp-target': ktpId,\n        'data-ktp-execute-target': ktpId\n      };\n    }\n    return undefined;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}