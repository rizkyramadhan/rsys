{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../../Utilities\");\n\nvar Shimmer_types_1 = require(\"../Shimmer.types\");\n\nvar ShimmerLine_1 = require(\"../ShimmerLine/ShimmerLine\");\n\nvar ShimmerGap_1 = require(\"../ShimmerGap/ShimmerGap\");\n\nvar ShimmerCircle_1 = require(\"../ShimmerCircle/ShimmerCircle\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nexports.ShimmerElementsGroupBase = function (props) {\n  var styles = props.styles,\n      _a = props.width,\n      width = _a === void 0 ? 'auto' : _a,\n      shimmerElements = props.shimmerElements,\n      _b = props.rowHeight,\n      rowHeight = _b === void 0 ? findMaxElementHeight(shimmerElements || []) : _b,\n      _c = props.flexWrap,\n      flexWrap = _c === void 0 ? false : _c,\n      theme = props.theme,\n      backgroundColor = props.backgroundColor;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    flexWrap: flexWrap\n  });\n  return React.createElement(\"div\", {\n    style: {\n      width: width\n    },\n    className: classNames.root\n  }, getRenderedElements(shimmerElements, backgroundColor, rowHeight));\n};\n\nfunction getRenderedElements(shimmerElements, backgroundColor, rowHeight) {\n  var renderedElements = shimmerElements ? shimmerElements.map(function (element, index) {\n    var type = element.type,\n        filteredElem = tslib_1.__rest(element, [\"type\"]);\n\n    switch (element.type) {\n      case Shimmer_types_1.ShimmerElementType.circle:\n        return React.createElement(ShimmerCircle_1.ShimmerCircle, tslib_1.__assign({\n          key: index\n        }, filteredElem, {\n          styles: getElementStyles(element, backgroundColor, rowHeight)\n        }));\n\n      case Shimmer_types_1.ShimmerElementType.gap:\n        return React.createElement(ShimmerGap_1.ShimmerGap, tslib_1.__assign({\n          key: index\n        }, filteredElem, {\n          styles: getElementStyles(element, backgroundColor, rowHeight)\n        }));\n\n      case Shimmer_types_1.ShimmerElementType.line:\n        return React.createElement(ShimmerLine_1.ShimmerLine, tslib_1.__assign({\n          key: index\n        }, filteredElem, {\n          styles: getElementStyles(element, backgroundColor, rowHeight)\n        }));\n    }\n  }) : React.createElement(ShimmerLine_1.ShimmerLine, {\n    height: Shimmer_types_1.ShimmerElementsDefaultHeights.line\n  });\n  return renderedElements;\n}\n\nfunction getElementStyles(element, backgroundColor, rowHeight) {\n  var verticalAlign = element.verticalAlign,\n      type = element.type,\n      elementHeight = element.height;\n  var dif = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n  var borderStyle;\n\n  if (!verticalAlign || verticalAlign === 'center') {\n    borderStyle = {\n      borderBottomWidth: (dif ? Math.floor(dif / 2) : 0) + \"px\",\n      borderTopWidth: (dif ? Math.ceil(dif / 2) : 0) + \"px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'top') {\n    borderStyle = {\n      borderBottomWidth: dif + \"px\",\n      borderTopWidth: \"0px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'bottom') {\n    borderStyle = {\n      borderBottomWidth: \"0px\",\n      borderTopWidth: dif + \"px\"\n    };\n  }\n\n  if (backgroundColor) {\n    switch (type) {\n      case Shimmer_types_1.ShimmerElementType.circle:\n        return {\n          root: tslib_1.__assign({}, borderStyle, {\n            borderColor: backgroundColor\n          }),\n          svg: {\n            fill: backgroundColor\n          }\n        };\n\n      case Shimmer_types_1.ShimmerElementType.gap:\n        return {\n          root: tslib_1.__assign({}, borderStyle, {\n            borderColor: backgroundColor,\n            backgroundColor: backgroundColor\n          })\n        };\n\n      case Shimmer_types_1.ShimmerElementType.line:\n        return {\n          root: tslib_1.__assign({}, borderStyle, {\n            borderColor: backgroundColor\n          }),\n          topLeftCorner: {\n            fill: backgroundColor\n          },\n          topRightCorner: {\n            fill: backgroundColor\n          },\n          bottomLeftCorner: {\n            fill: backgroundColor\n          },\n          bottomRightCorner: {\n            fill: backgroundColor\n          }\n        };\n    }\n  }\n\n  return {\n    root: borderStyle\n  };\n}\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\n\n\nfunction findMaxElementHeight(shimmerElements) {\n  var shimmerElementsDefaulted = shimmerElements.map(function (element) {\n    switch (element.type) {\n      case Shimmer_types_1.ShimmerElementType.circle:\n        if (!element.height) {\n          element.height = Shimmer_types_1.ShimmerElementsDefaultHeights.circle;\n        }\n\n      case Shimmer_types_1.ShimmerElementType.line:\n        if (!element.height) {\n          element.height = Shimmer_types_1.ShimmerElementsDefaultHeights.line;\n        }\n\n      case Shimmer_types_1.ShimmerElementType.gap:\n        if (!element.height) {\n          element.height = Shimmer_types_1.ShimmerElementsDefaultHeights.gap;\n        }\n\n    }\n\n    return element;\n  });\n  var rowHeight = shimmerElementsDefaulted.reduce(function (acc, next) {\n    return next.height ? next.height > acc ? next.height : acc : acc;\n  }, 0);\n  return rowHeight;\n}","map":{"version":3,"sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport { IRawStyle } from '../../../Styling';\nimport { IShimmerElementsGroupProps, IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles } from './ShimmerElementsGroup.types';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights, IShimmerElement } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap\n  });\n\n  return (\n    <div style={{ width: width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(shimmerElements?: IShimmerElement[], backgroundColor?: string, rowHeight?: number): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={getElementStyles(element, backgroundColor, rowHeight)} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={getElementStyles(element, backgroundColor, rowHeight)} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={getElementStyles(element, backgroundColor, rowHeight)} />;\n        }\n      }\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nfunction getElementStyles(\n  element: IShimmerElement,\n  backgroundColor?: string,\n  rowHeight?: number\n): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles {\n  const { verticalAlign, type, height: elementHeight } = element;\n  const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n  let borderStyle: IRawStyle | undefined;\n\n  if (!verticalAlign || verticalAlign === 'center') {\n    borderStyle = {\n      borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n      borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`\n    };\n  } else if (verticalAlign && verticalAlign === 'top') {\n    borderStyle = {\n      borderBottomWidth: `${dif}px`,\n      borderTopWidth: `0px`\n    };\n  } else if (verticalAlign && verticalAlign === 'bottom') {\n    borderStyle = {\n      borderBottomWidth: `0px`,\n      borderTopWidth: `${dif}px`\n    };\n  }\n\n  if (backgroundColor) {\n    switch (type) {\n      case ShimmerElementType.circle:\n        return {\n          root: { ...borderStyle, borderColor: backgroundColor },\n          svg: { fill: backgroundColor }\n        };\n      case ShimmerElementType.gap:\n        return {\n          root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor }\n        };\n      case ShimmerElementType.line:\n        return {\n          root: { ...borderStyle, borderColor: backgroundColor },\n          topLeftCorner: { fill: backgroundColor },\n          topRightCorner: { fill: backgroundColor },\n          bottomLeftCorner: { fill: backgroundColor },\n          bottomRightCorner: { fill: backgroundColor }\n        };\n    }\n  }\n\n  return {\n    root: borderStyle\n  };\n}\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n      }\n      return element;\n    }\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}