{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar Styling_1 = require(\"../../Styling\"); // Size breakpoint when the default border width changes from 2px to 4px.\n\n\nvar CELL_BORDER_BREAKPOINT = 24;\nvar LARGE_BORDER = 4;\nvar SMALL_BORDER = 2;\nvar DIVIDING_PADDING = 2;\nvar DEFAULT_CELL_SIZE = 20;\nvar cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText'\n};\n\nexports.getStyles = function (props) {\n  var _a, _b, _c, _d;\n\n  var theme = props.theme,\n      disabled = props.disabled,\n      selected = props.selected,\n      circle = props.circle,\n      isWhite = props.isWhite,\n      _e = props.height,\n      height = _e === void 0 ? DEFAULT_CELL_SIZE : _e,\n      _f = props.width,\n      width = _f === void 0 ? DEFAULT_CELL_SIZE : _f,\n      borderWidth = props.borderWidth;\n  var semanticColors = theme.semanticColors; // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n\n  var calculatedBorderWidth = borderWidth ? borderWidth : width < CELL_BORDER_BREAKPOINT ? SMALL_BORDER : LARGE_BORDER;\n  return {\n    // this is a button that wraps the color\n    colorCell: [Styling_1.getFocusStyle(theme, -1, 'relative', cellHighContrastFocus), {\n      backgroundColor: semanticColors.bodyBackground,\n      padding: 0,\n      position: 'relative',\n      boxSizing: 'border-box',\n      display: 'inline-block',\n      cursor: 'pointer',\n      userSelect: 'none',\n      borderRadius: 0,\n      border: 'none',\n      height: height,\n      width: width\n    }, !circle && {\n      selectors: (_a = {}, _a[\".\" + Utilities_1.IsFocusVisibleClassName + \" &:focus::after\"] = {\n        // -1px so that we don't increase visually the size of the cell.\n        outlineOffset: calculatedBorderWidth - 1 + \"px\"\n      }, _a)\n    }, // In focus state for circle we want a round border which is not possible with outline.\n    circle && {\n      borderRadius: '50%',\n      selectors: (_b = {}, _b[\".\" + Utilities_1.IsFocusVisibleClassName + \" &:focus::after\"] = {\n        outline: 'none',\n        borderColor: semanticColors.focusBorder,\n        borderRadius: '50%',\n        left: -calculatedBorderWidth,\n        right: -calculatedBorderWidth,\n        top: -calculatedBorderWidth,\n        bottom: -calculatedBorderWidth,\n        selectors: (_c = {}, _c[Styling_1.HighContrastSelector] = {\n          outline: \"1px solid ButtonText\"\n        }, _c)\n      }, _b)\n    }, selected && {\n      padding: DIVIDING_PADDING,\n      border: calculatedBorderWidth + \"px solid \" + theme.palette.neutralTertiaryAlt\n    }, !selected && {\n      selectors: (_d = {}, _d['&:hover, &:active, &:focus'] = {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: DIVIDING_PADDING,\n        border: calculatedBorderWidth + \"px solid \" + theme.palette.neutralLight\n      }, _d['&:focus'] = {\n        borderColor: semanticColors.bodyBackground,\n        padding: 0,\n        selectors: {\n          ':hover': {\n            borderColor: theme.palette.neutralLight,\n            padding: DIVIDING_PADDING\n          }\n        }\n      }, _d)\n    }, disabled && {\n      color: semanticColors.disabledBodyText,\n      pointerEvents: 'none',\n      opacity: 0.3\n    }, isWhite && !selected && {\n      // fake a border for white\n      backgroundColor: semanticColors.bodyDivider,\n      padding: 1\n    }],\n    // the <svg> that holds the color\n    svg: [{\n      width: '100%',\n      height: '100%'\n    }, circle && {\n      borderRadius: '50%'\n    }]\n  };\n};","map":{"version":3,"sources":["components/SwatchColorPicker/ColorPickerGridCell.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling';\nimport { IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\n\n// Size breakpoint when the default border width changes from 2px to 4px.\nconst CELL_BORDER_BREAKPOINT = 24;\nconst LARGE_BORDER = 4;\nconst SMALL_BORDER = 2;\nconst DIVIDING_PADDING = 2;\nconst DEFAULT_CELL_SIZE = 20;\n\nconst cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText'\n};\n\nexport const getStyles = (props: IColorPickerGridCellStyleProps): IColorPickerGridCellStyles => {\n  const { theme, disabled, selected, circle, isWhite, height = DEFAULT_CELL_SIZE, width = DEFAULT_CELL_SIZE, borderWidth } = props;\n  const { semanticColors } = theme;\n\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n  const calculatedBorderWidth = borderWidth ? borderWidth : width < CELL_BORDER_BREAKPOINT ? SMALL_BORDER : LARGE_BORDER;\n\n  return {\n    // this is a button that wraps the color\n    colorCell: [\n      getFocusStyle(theme, -1, 'relative', cellHighContrastFocus),\n      {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: 0,\n        position: 'relative',\n        boxSizing: 'border-box',\n        display: 'inline-block',\n        cursor: 'pointer',\n        userSelect: 'none',\n        borderRadius: 0,\n        border: 'none',\n        height: height,\n        width: width\n      },\n      !circle && {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            // -1px so that we don't increase visually the size of the cell.\n            outlineOffset: `${calculatedBorderWidth - 1}px`\n          }\n        }\n      },\n      // In focus state for circle we want a round border which is not possible with outline.\n      circle && {\n        borderRadius: '50%',\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            outline: 'none',\n            borderColor: semanticColors.focusBorder,\n            borderRadius: '50%',\n            left: -calculatedBorderWidth,\n            right: -calculatedBorderWidth,\n            top: -calculatedBorderWidth,\n            bottom: -calculatedBorderWidth,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: `1px solid ButtonText`\n              }\n            }\n          }\n        }\n      },\n      selected && {\n        padding: DIVIDING_PADDING,\n        border: `${calculatedBorderWidth}px solid ${theme.palette.neutralTertiaryAlt}`\n      },\n      !selected && {\n        selectors: {\n          ['&:hover, &:active, &:focus']: {\n            backgroundColor: semanticColors.bodyBackground, // overwrite white's override\n            padding: DIVIDING_PADDING,\n            border: `${calculatedBorderWidth}px solid ${theme.palette.neutralLight}`\n          },\n          ['&:focus']: {\n            borderColor: semanticColors.bodyBackground,\n            padding: 0,\n            selectors: {\n              ':hover': {\n                borderColor: theme.palette.neutralLight,\n                padding: DIVIDING_PADDING\n              }\n            }\n          }\n        }\n      },\n      disabled && {\n        color: semanticColors.disabledBodyText,\n        pointerEvents: 'none',\n        opacity: 0.3\n      },\n      isWhite &&\n        !selected && {\n          // fake a border for white\n          backgroundColor: semanticColors.bodyDivider,\n          padding: 1\n        }\n    ],\n    // the <svg> that holds the color\n    svg: [\n      {\n        width: '100%',\n        height: '100%'\n      },\n      circle && {\n        borderRadius: '50%'\n      }\n    ]\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}