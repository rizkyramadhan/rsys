{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Icon_styles_1 = require(\"./Icon.styles\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar Styling_1 = require(\"../../Styling\");\n\nexports.getIconContent = Utilities_1.memoizeFunction(function (iconName) {\n  var iconDefinition = Styling_1.getIcon(iconName) || {\n    subset: {\n      className: undefined\n    },\n    code: undefined\n  };\n  return {\n    children: iconDefinition.code,\n    iconClassName: iconDefinition.subset.className\n  };\n});\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\n\nexports.FontIcon = function (props) {\n  var iconName = props.iconName,\n      className = props.className;\n\n  var _a = exports.getIconContent(iconName),\n      iconClassName = _a.iconClassName,\n      children = _a.children;\n\n  var nativeProps = Utilities_1.getNativeProps(props, Utilities_1.htmlElementProperties);\n  var containerProps = props['aria-label'] ? {} : {\n    role: 'presentation',\n    'aria-hidden': true\n  };\n  return React.createElement(\"i\", tslib_1.__assign({\n    \"data-icon-name\": iconName\n  }, containerProps, nativeProps, {\n    className: Utilities_1.css(Icon_styles_1.MS_ICON, Icon_styles_1.classNames.root, iconClassName, !iconName && Icon_styles_1.classNames.placeholder, className)\n  }), children);\n};\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\n\n\nexports.getFontIcon = Utilities_1.memoizeFunction(function (iconName, className, ariaLabel) {\n  return exports.FontIcon({\n    iconName: iconName,\n    className: className,\n    'aria-label': ariaLabel\n  });\n});","map":{"version":3,"sources":["components/Icon/FontIcon.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAGA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEa,OAAA,CAAA,cAAA,GAAiB,WAAA,CAAA,eAAA,CAAgB,UAAC,QAAD,EAAkB;AAC9D,MAAM,cAAc,GAAG,SAAA,CAAA,OAAA,CAAQ,QAAR,KAAqB;AAC1C,IAAA,MAAM,EAAE;AACN,MAAA,SAAS,EAAE;AADL,KADkC;AAI1C,IAAA,IAAI,EAAE;AAJoC,GAA5C;AAOA,SAAO;AACL,IAAA,QAAQ,EAAE,cAAc,CAAC,IADpB;AAEL,IAAA,aAAa,EAAE,cAAc,CAAC,MAAf,CAAsB;AAFhC,GAAP;AAID,CAZ6B,CAAjB;AAcb;;;;;;AAKa,OAAA,CAAA,QAAA,GAAoD,UAAA,KAAA,EAAK;AAC5D,MAAA,QAAA,GAAA,KAAA,CAAA,QAAA;AAAA,MAAU,SAAA,GAAA,KAAA,CAAA,SAAV;;AACF,MAAA,EAAA,GAAA,OAAA,CAAA,cAAA,CAAA,QAAA,CAAA;AAAA,MAAE,aAAA,GAAA,EAAA,CAAA,aAAF;AAAA,MAAiB,QAAA,GAAA,EAAA,CAAA,QAAjB;;AAEN,MAAM,WAAW,GAAG,WAAA,CAAA,cAAA,CAAkD,KAAlD,EAAyD,WAAA,CAAA,qBAAzD,CAApB;AACA,MAAM,cAAc,GAAG,KAAK,CAAC,YAAD,CAAL,GACnB,EADmB,GAEnB;AACE,IAAA,IAAI,EAAE,cADR;AAEE,mBAAe;AAFjB,GAFJ;AAOA,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,OAAA,CAAA,QAAA,CAAA;AAAA,sBACkB;AADlB,GAAA,EAEM,cAFN,EAGM,WAHN,EAGiB;AACf,IAAA,SAAS,EAAE,WAAA,CAAA,GAAA,CAAI,aAAA,CAAA,OAAJ,EAAa,aAAA,CAAA,UAAA,CAAW,IAAxB,EAA8B,aAA9B,EAA6C,CAAC,QAAD,IAAa,aAAA,CAAA,UAAA,CAAW,WAArE,EAAkF,SAAlF;AADI,GAHjB,CAAA,EAMG,QANH,CADF;AAUD,CAtBY;AAwBb;;;;;;;;;AAOa,OAAA,CAAA,WAAA,GAAc,WAAA,CAAA,eAAA,CAAgB,UAAC,QAAD,EAAmB,SAAnB,EAAuC,SAAvC,EAAyD;AAClG,SAAO,OAAA,CAAA,QAAA,CAAS;AAAE,IAAA,QAAQ,EAAA,QAAV;AAAY,IAAA,SAAS,EAAA,SAArB;AAAuB,kBAAc;AAArC,GAAT,CAAP;AACD,CAF0B,CAAd","sourcesContent":["import * as React from 'react';\n\nimport { IFontIconProps } from './Icon.types';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\n\nexport const getIconContent = memoizeFunction((iconName?: string) => {\n  const iconDefinition = getIcon(iconName) || {\n    subset: {\n      className: undefined\n    },\n    code: undefined\n  };\n\n  return {\n    children: iconDefinition.code,\n    iconClassName: iconDefinition.subset.className\n  };\n});\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className } = props;\n  const { iconClassName, children } = getIconContent(iconName);\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const containerProps = props['aria-label']\n    ? {}\n    : {\n        role: 'presentation',\n        'aria-hidden': true\n      };\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n    >\n      {children}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}