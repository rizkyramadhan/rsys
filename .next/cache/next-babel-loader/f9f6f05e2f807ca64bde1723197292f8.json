{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { GridCell } from '../../utilities/grid/GridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nvar getColorPickerGridCellButtonClassNames = memoizeFunction(function (theme, className, variantClassName, iconClassName, menuIconClassName, disabled, checked, expanded, isSplit) {\n  var styles = getActionButtonStyles(theme);\n  return mergeStyleSets({\n    root: ['ms-Button', styles.root, variantClassName, className, checked && ['is-checked', styles.rootChecked], disabled && ['is-disabled', styles.rootDisabled], !disabled && !checked && {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }],\n    flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n  });\n});\nvar getClassNames = classNamesFunction();\n\nvar ColorCell =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColorCell, _super);\n\n  function ColorCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return ColorCell;\n}(GridCell);\n\nvar ColorPickerGridCellBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColorPickerGridCellBase, _super);\n\n  function ColorPickerGridCellBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Render the core of a color cell\n     * @returns - Element representing the core of the item\n     */\n\n\n    _this._onRenderColorOption = function (colorOption) {\n      // Build an SVG for the cell with the given shape and color properties\n      return React.createElement(\"svg\", {\n        className: _this._classNames.svg,\n        viewBox: \"0 0 20 20\",\n        fill: getColorFromString(colorOption.color).str\n      }, _this.props.circle ? React.createElement(\"circle\", {\n        cx: \"50%\",\n        cy: \"50%\",\n        r: \"50%\"\n      }) : React.createElement(\"rect\", {\n        width: \"100%\",\n        height: \"100%\"\n      }));\n    };\n\n    return _this;\n  }\n\n  ColorPickerGridCellBase.prototype.render = function () {\n    var _a = this.props,\n        item = _a.item,\n        id = _a.id,\n        selected = _a.selected,\n        disabled = _a.disabled,\n        styles = _a.styles,\n        theme = _a.theme,\n        circle = _a.circle,\n        color = _a.color,\n        onClick = _a.onClick,\n        onHover = _a.onHover,\n        onFocus = _a.onFocus,\n        onMouseEnter = _a.onMouseEnter,\n        onMouseMove = _a.onMouseMove,\n        onMouseLeave = _a.onMouseLeave,\n        onWheel = _a.onWheel,\n        onKeyDown = _a.onKeyDown,\n        height = _a.height,\n        width = _a.width,\n        borderWidth = _a.borderWidth;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      circle: circle,\n      isWhite: this._isWhiteCell(color),\n      height: height,\n      width: width,\n      borderWidth: borderWidth\n    });\n    return React.createElement(ColorCell, {\n      item: item,\n      id: id + \"-\" + item.id + \"-\" + item.index,\n      key: item.id,\n      disabled: disabled,\n      role: 'gridcell',\n      onRenderItem: this._onRenderColorOption,\n      selected: selected,\n      onClick: onClick,\n      onHover: onHover,\n      onFocus: onFocus,\n      label: item.label,\n      className: this._classNames.colorCell,\n      getClassNames: getColorPickerGridCellButtonClassNames,\n      index: item.index,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onWheel: onWheel,\n      onKeyDown: onKeyDown\n    });\n  };\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n\n\n  ColorPickerGridCellBase.prototype._isWhiteCell = function (inputColor) {\n    var color = getColorFromString(inputColor);\n    return color.hex === 'ffffff';\n  };\n\n  ColorPickerGridCellBase.defaultProps = {\n    circle: true,\n    disabled: false,\n    selected: false\n  };\n  return ColorPickerGridCellBase;\n}(React.Component);\n\nexport { ColorPickerGridCellBase };","map":{"version":3,"sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ITheme, mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { GridCell } from '../../utilities/grid/GridCell';\nimport { IGridCellProps } from '../../utilities/grid/GridCell.types';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles\n} from './ColorPickerGridCell.types';\n\nconst getColorPickerGridCellButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined\n  ): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets({\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && ['is-checked', styles.rootChecked],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed\n            }\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed\n            }\n          }\n      ],\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n    });\n  }\n);\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\nclass ColorCell extends GridCell<IColorCellProps, IGridCellProps<IColorCellProps>> {}\n\nexport class ColorPickerGridCellBase extends React.Component<IColorPickerGridCellProps, {}> {\n  public static defaultProps = {\n    circle: true,\n    disabled: false,\n    selected: false\n  } as IColorPickerGridCellProps;\n\n  private _classNames: { [key in keyof IColorPickerGridCellStyles]: string };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      id,\n      selected,\n      disabled,\n      styles,\n      theme,\n      circle,\n      color,\n      onClick,\n      onHover,\n      onFocus,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave,\n      onWheel,\n      onKeyDown,\n      height,\n      width,\n      borderWidth\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      disabled,\n      selected,\n      circle,\n      isWhite: this._isWhiteCell(color),\n      height,\n      width,\n      borderWidth\n    });\n\n    return (\n      <ColorCell\n        item={item}\n        id={`${id}-${item.id}-${item.index}`}\n        key={item.id}\n        disabled={disabled}\n        role={'gridcell'}\n        onRenderItem={this._onRenderColorOption}\n        selected={selected}\n        onClick={onClick}\n        onHover={onHover}\n        onFocus={onFocus}\n        label={item.label}\n        className={this._classNames.colorCell}\n        getClassNames={getColorPickerGridCellButtonClassNames}\n        index={item.index}\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        onWheel={onWheel}\n        onKeyDown={onKeyDown}\n      />\n    );\n  }\n\n  /**\n   * Render the core of a color cell\n   * @returns - Element representing the core of the item\n   */\n  private _onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    // Build an SVG for the cell with the given shape and color properties\n    return (\n      <svg className={this._classNames.svg} viewBox=\"0 0 20 20\" fill={getColorFromString(colorOption.color as string)!.str}>\n        {this.props.circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\n      </svg>\n    );\n  };\n\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n  private _isWhiteCell(inputColor: string | undefined): boolean {\n    const color = getColorFromString(inputColor!);\n    return color!.hex === 'ffffff';\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}