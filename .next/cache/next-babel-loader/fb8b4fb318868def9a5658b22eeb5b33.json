{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar React = require(\"react\");\n\nvar Utilities_1 = require(\"../../Utilities\");\n\nvar Callout_1 = require(\"../../Callout\");\n\nvar DirectionalHint_1 = require(\"../../common/DirectionalHint\");\n\nvar getClassNames = Utilities_1.classNamesFunction();\n\nvar TooltipBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TooltipBase, _super);\n\n  function TooltipBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onRenderContent = function (props) {\n      return React.createElement(\"p\", {\n        className: _this._classNames.subText\n      }, props.content);\n    };\n\n    return _this;\n  }\n\n  TooltipBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        calloutProps = _a.calloutProps,\n        directionalHint = _a.directionalHint,\n        directionalHintForRTL = _a.directionalHintForRTL,\n        styles = _a.styles,\n        id = _a.id,\n        maxWidth = _a.maxWidth,\n        _b = _a.onRenderContent,\n        onRenderContent = _b === void 0 ? this._onRenderContent : _b,\n        targetElement = _a.targetElement,\n        theme = _a.theme;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className || calloutProps && calloutProps.className,\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth\n    });\n    return React.createElement(Callout_1.Callout, tslib_1.__assign({\n      target: targetElement,\n      directionalHint: directionalHint,\n      directionalHintForRTL: directionalHintForRTL\n    }, calloutProps, Utilities_1.getNativeProps(this.props, Utilities_1.divProperties, ['id']), {\n      className: this._classNames.root\n    }), React.createElement(\"div\", {\n      className: this._classNames.content,\n      id: id,\n      role: \"tooltip\",\n      onMouseEnter: this.props.onMouseEnter,\n      onMouseLeave: this.props.onMouseLeave\n    }, onRenderContent(this.props, this._onRenderContent)));\n  }; // Specify default props values\n\n\n  TooltipBase.defaultProps = {\n    directionalHint: DirectionalHint_1.DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false\n    }\n  };\n  return TooltipBase;\n}(React.Component);\n\nexports.TooltipBase = TooltipBase;","map":{"version":3,"sources":["components/Tooltip/Tooltip.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false\n    }\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          role=\"tooltip\"\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    return <p className={this._classNames.subText}>{props.content}</p>;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"script"}