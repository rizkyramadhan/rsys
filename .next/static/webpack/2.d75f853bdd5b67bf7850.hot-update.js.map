{"version":3,"file":"static/webpack/2.d75f853bdd5b67bf7850.hot-update.js","sources":["webpack:///./components/Grape.tsx","webpack:///./components/Grape/Blocks/Basic/blocks.ts","webpack:///./components/Grape/Blocks/Basic/index.ts"],"sourcesContent":["import GrapesJS from 'grapesjs';\nimport Head from 'next/head';\nimport { useEffect, useState } from 'react';\nimport basic from './Grape/Blocks/Basic/index';\nimport bs from 'grapesjs-blocks-basic';\n\nexport default ({\n  id = 'grapesjs-react-editor',\n  components = [],\n  blocks = [],\n  plugins = [],\n  blockManager,\n  storageManager\n}: any) => {\n  const [editor, setEditor] = useState(null);\n\n  useEffect(() => {\n    if (!editor) {\n      const e = GrapesJS.init({\n        blockManager,\n        storageManager,\n        container: `#${id}`,\n        fromElement: true,\n        plugins: [ basic, ...plugins]\n      });\n\n      const defaultType = e.DomComponents.getType('default');\n      const defaultModel = defaultType.model;\n      const defaultView = defaultType.view;\n      components.forEach((component: any) => {\n        e.DomComponents.addType(component.type, {\n          model: defaultModel.extend(\n            {\n              defaults: Object.assign({}, defaultModel.prototype.defaults)\n            },\n            {\n              isComponent: component.isComponent.bind(this)\n            }\n          ),\n          view: defaultView.extend({\n            events: {\n              ...component.events\n            },\n            render: component.render.bind(this)\n          })\n        });\n      });\n      blocks.forEach((block: any) => {\n        e.BlockManager.add(block.id, block);\n      });\n      setEditor(e);\n    } else {\n      if (document) {\n        document.getElementById(id).append(editor.render());\n      }\n    }\n\n    return function cleanup() {\n      if (editor) {\n        editor.destroy();\n        GrapesJS.editors = GrapesJS.editors.filter(e => e !== editor);\n      }\n    };\n  }, []);\n\n  return (\n    <div id={id}>\n      <Head>\n        <link rel='stylesheet' href='/static/grapesjs/css/grapes.min.css' />\n      </Head>\n    </div>\n  );\n};\n","export default function(editor, opt: any = {}) {\n  const c = opt;\n  let bm = editor.BlockManager;\n  let blocks = c.blocks || [];\n  let stylePrefix = c.stylePrefix;\n  const flexGrid = c.flexGrid;\n  const basicStyle = c.addBasicStyle;\n  const clsRow = `${stylePrefix}row`;\n  const clsCell = `${stylePrefix}cell`;\n  const styleRow = flexGrid\n    ? `\n      .${clsRow} {\n        display: flex;\n        justify-content: flex-start;\n        align-items: stretch;\n        flex-wrap: nowrap;\n        padding: 10px;\n      }\n      @media (max-width: 768px) {\n        .${clsRow} {\n          flex-wrap: wrap;\n        }\n      }`\n    : `\n      .${clsRow} {\n        display: table;\n        padding: 10px;\n        width: 100%;\n      }\n      @media (max-width: 768px) {\n        .${stylePrefix}cell, .${stylePrefix}cell30, .${stylePrefix}cell70 {\n          width: 100%;\n          display: block;\n        }\n      }`;\n  const styleClm = flexGrid\n    ? `\n      .${clsCell} {\n        min-height: 75px;\n        flex-grow: 1;\n        flex-basis: 100%;\n      }`\n    : `\n      .${clsCell} {\n        width: 8%;\n        display: table-cell;\n        height: 75px;\n      }`;\n  const styleClm30 = `\n    .${stylePrefix}cell30 {\n      width: 30%;\n    }`;\n  const styleClm70 = `\n    .${stylePrefix}cell70 {\n      width: 70%;\n    }`;\n\n  const step = 0.2;\n  const minDim = 1;\n  const currentUnit = 1;\n  const resizerBtm = {\n    tl: 0,\n    tc: 0,\n    tr: 0,\n    cl: 0,\n    cr: 0,\n    bl: 0,\n    br: 0,\n    minDim\n  };\n  const resizerRight = {\n    ...resizerBtm,\n    cr: 1,\n    bc: 0,\n    currentUnit,\n    minDim,\n    step,\n    keyWidth: 'flex-basis'\n  };\n\n  // Flex elements do not react on width style change therefore I use\n  // 'flex-basis' as keyWidth for the resizer on columns\n  if (flexGrid) {\n    resizerRight.keyWidth = 'flex-basis';\n  }\n\n  const rowAttr = {\n    class: clsRow,\n    'data-gjs-droppable': `.${clsCell}`,\n    'data-gjs-resizable': resizerBtm,\n    'data-gjs-name': 'Row'\n  };\n\n  const colAttr = {\n    class: clsCell,\n    'data-gjs-draggable': `.${clsRow}`,\n    'data-gjs-resizable': resizerRight,\n    'data-gjs-name': 'Cell'\n  };\n\n  if (flexGrid) {\n    colAttr['data-gjs-unstylable'] = ['width'];\n    colAttr['data-gjs-stylable-require'] = ['flex-basis'];\n  }\n\n  // Make row and column classes private\n  const privateCls = [`.${clsRow}`, `.${clsCell}`];\n  editor.on(\n    'selector:add',\n    selector =>\n      privateCls.indexOf(selector.getFullName()) >= 0 &&\n      selector.set('private', 1)\n  );\n\n  const attrsToString = attrs => {\n    const result = [];\n\n    for (let key in attrs) {\n      let value = attrs[key];\n      const toParse = value instanceof Array || value instanceof Object;\n      value = toParse ? JSON.stringify(value) : value;\n      result.push(`${key}=${toParse ? `'${value}'` : `\"${value}\"`}`);\n    }\n\n    return result.length ? ` ${result.join(' ')}` : '';\n  };\n\n  const toAdd = name => blocks.indexOf(name) >= 0;\n  const attrsRow = attrsToString(rowAttr);\n  const attrsCell = attrsToString(colAttr);\n\n  toAdd('column1') &&\n    bm.add('column1', {\n      label: c.labelColumn1,\n      category: c.category,\n      attributes: { class: 'gjs-fonts gjs-f-b1' },\n      content: `<div ${attrsRow}>\n          <div ${attrsCell}></div>\n        </div>\n        ${\n          basicStyle\n            ? `<style>\n            ${styleRow}\n            ${styleClm}\n          </style>`\n            : ''\n        }`\n    });\n\n  toAdd('column2') &&\n    bm.add('column2', {\n      label: c.labelColumn2,\n      attributes: { class: 'gjs-fonts gjs-f-b2' },\n      category: c.category,\n      content: `<div ${attrsRow}>\n          <div ${attrsCell}></div>\n          <div ${attrsCell}></div>\n        </div>\n        ${\n          basicStyle\n            ? `<style>\n            ${styleRow}\n            ${styleClm}\n          </style>`\n            : ''\n        }`\n    });\n\n  toAdd('column3') &&\n    bm.add('column3', {\n      label: c.labelColumn3,\n      category: c.category,\n      attributes: { class: 'gjs-fonts gjs-f-b3' },\n      content: `<div ${attrsRow}>\n          <div ${attrsCell}></div>\n          <div ${attrsCell}></div>\n          <div ${attrsCell}></div>\n        </div>\n        ${\n          basicStyle\n            ? `<style>\n            ${styleRow}\n            ${styleClm}\n          </style>`\n            : ''\n        }`\n    });\n\n  toAdd('column3-7') &&\n    bm.add('column3-7', {\n      label: c.labelColumn37,\n      category: c.category,\n      attributes: { class: 'gjs-fonts gjs-f-b37' },\n      content: `<div ${attrsRow}>\n          <div ${attrsCell} style=\"${\n        flexGrid ? 'flex-basis' : 'width'\n      }: 30%;\"></div>\n          <div ${attrsCell} style=\"${\n        flexGrid ? 'flex-basis' : 'width'\n      }: 70%;\"></div>\n        </div>\n        ${\n          basicStyle\n            ? `<style>\n            ${styleRow}\n            ${styleClm}\n            ${styleClm30}\n            ${styleClm70}\n          </style>`\n            : ''\n        }`\n    });\n\n  toAdd('text') &&\n    bm.add('text', {\n      label: c.labelText,\n      category: c.category,\n      attributes: { class: 'gjs-fonts gjs-f-text' },\n      content: {\n        type: 'text',\n        content: 'Insert your text here',\n        style: { padding: '10px' },\n        activeOnRender: 1\n      }\n    });\n\n  toAdd('link') &&\n    bm.add('link', {\n      label: c.labelLink,\n      category: c.category,\n      attributes: { class: 'fa fa-link' },\n      content: {\n        type: 'link',\n        content: 'Link',\n        style: { color: '#d983a6' }\n      }\n    });\n\n  toAdd('image') &&\n    bm.add('image', {\n      label: c.labelImage,\n      category: c.category,\n      attributes: { class: 'gjs-fonts gjs-f-image' },\n      content: {\n        style: { color: 'black' },\n        type: 'image',\n        activeOnRender: 1\n      }\n    });\n\n  toAdd('video') &&\n    bm.add('video', {\n      label: c.labelVideo,\n      category: c.category,\n      attributes: { class: 'fa fa-youtube-play' },\n      content: {\n        type: 'video',\n        src: 'img/video2.webm',\n        style: {\n          height: '350px',\n          width: '615px'\n        }\n      }\n    });\n\n  toAdd('map') &&\n    bm.add('map', {\n      label: c.labelMap,\n      category: c.category,\n      attributes: { class: 'fa fa-map-o' },\n      content: {\n        type: 'map',\n        style: { height: '350px' }\n      }\n    });\n}\n","import grapesjs from 'grapesjs';\n\nexport default grapesjs.plugins.add('gjs-blocks-basic', (editor, opts = {}) => {\n  const config = {\n    blocks: [\n      'column1',\n      'column2',\n      'column3',\n      'column3-7',\n      'text',\n      'link',\n      'image',\n      'video',\n      'map'\n    ],\n    flexGrid: 0,\n    stylePrefix: 'gjs-',\n    addBasicStyle: true,\n    category: 'Basic',\n    labelColumn1: '1 Column',\n    labelColumn2: '2 Columns',\n    labelColumn3: '3 Columns',\n    labelColumn37: '2 Columns 3/7',\n    labelText: 'Text',\n    labelLink: 'Link',\n    labelImage: 'Image',\n    labelVideo: 'Video',\n    labelMap: 'Map',\n    ...opts\n  };\n\n  // Add blocks\n  const loadBlocks = require('./blocks');\n  loadBlocks.default(editor, config);\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AACA;AAGA;AAJA;AATA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;ACxEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA;AAaA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAiBA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAkBA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAmBA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAwBA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAJA;AAYA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAJA;AAWA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAJA;AAWA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAJA;AAcA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAJA;AASA;;;;;;;;;;;;;;;;;ACnRA;AAEA;AAAA;AACA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AACA;AA2BA;AACA;AAAA;AACA;;;;;;;A","sourceRoot":""}